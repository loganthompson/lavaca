{
    "project": {
        "name": "lavaca",
        "description": "A curated collection of tools built for mobile.",
        "version": "2.3.2",
        "url": "https://github.com/mutualmobile/lavaca"
    },
    "files": {
        "src/components/dustjs-linkedin/test/dust_files/jsdump.js": {
            "name": "src/components/dustjs-linkedin/test/dust_files/jsdump.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js": {
            "name": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/dustjs-linkedin/vendor/jsdump.js": {
            "name": "src/components/dustjs-linkedin/vendor/jsdump.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.0.0.js": {
            "name": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.0.0.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.0.js": {
            "name": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.0.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.1.js": {
            "name": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.1.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.2.js": {
            "name": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.2.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/dustjs-linkedin-helpers/lib/dust-helpers.js": {
            "name": "src/components/dustjs-linkedin-helpers/lib/dust-helpers.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/dustjs-linkedin-helpers/test/dust_files/jsdump.js": {
            "name": "src/components/dustjs-linkedin-helpers/test/dust_files/jsdump.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js": {
            "name": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/es5-shim/tests/lib/jasmine.js": {
            "name": "src/components/es5-shim/tests/lib/jasmine.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/es5-shim/es5-shim.js": {
            "name": "src/components/es5-shim/es5-shim.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/hammerjs/dist/hammer.js": {
            "name": "src/components/hammerjs/dist/hammer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/hammerjs/dist/jquery.hammer.js": {
            "name": "src/components/hammerjs/dist/jquery.hammer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/hammerjs/plugins/hammer.fakemultitouch.js": {
            "name": "src/components/hammerjs/plugins/hammer.fakemultitouch.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/hammerjs/plugins/hammer.showtouches.js": {
            "name": "src/components/hammerjs/plugins/hammer.showtouches.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/hammerjs/plugins/jquery.hammer.js": {
            "name": "src/components/hammerjs/plugins/jquery.hammer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/hammerjs/src/core.js": {
            "name": "src/components/hammerjs/src/core.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/hammerjs/src/detection.js": {
            "name": "src/components/hammerjs/src/detection.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/hammerjs/src/event.js": {
            "name": "src/components/hammerjs/src/event.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/hammerjs/src/gestures.js": {
            "name": "src/components/hammerjs/src/gestures.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/hammerjs/src/instance.js": {
            "name": "src/components/hammerjs/src/instance.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/hammerjs/src/pointerevent.js": {
            "name": "src/components/hammerjs/src/pointerevent.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/hammerjs/src/setup.js": {
            "name": "src/components/hammerjs/src/setup.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/hammerjs/src/utils.js": {
            "name": "src/components/hammerjs/src/utils.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/hammerjs/tests/libs/qunit.js": {
            "name": "src/components/hammerjs/tests/libs/qunit.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/hammerjs/tests/gestures.js": {
            "name": "src/components/hammerjs/tests/gestures.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/hammerjs/tests/utils.js": {
            "name": "src/components/hammerjs/tests/utils.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/jquery/test/data/testinit.js": {
            "name": "src/components/jquery/test/data/testinit.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/jquery/test/data/testrunner.js": {
            "name": "src/components/jquery/test/data/testrunner.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/jquery/test/unit/core.js": {
            "name": "src/components/jquery/test/unit/core.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/jquery/test/unit/selector.js": {
            "name": "src/components/jquery/test/unit/selector.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/jquery/test/unit/serialize.js": {
            "name": "src/components/jquery/test/unit/serialize.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/jquery/Gruntfile.js": {
            "name": "src/components/jquery/Gruntfile.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/jquery/jquery.js": {
            "name": "src/components/jquery/jquery.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/append.js": {
            "name": "src/components/mout/src/array/append.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/collect.js": {
            "name": "src/components/mout/src/array/collect.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/combine.js": {
            "name": "src/components/mout/src/array/combine.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/compact.js": {
            "name": "src/components/mout/src/array/compact.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/contains.js": {
            "name": "src/components/mout/src/array/contains.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/difference.js": {
            "name": "src/components/mout/src/array/difference.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/every.js": {
            "name": "src/components/mout/src/array/every.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/filter.js": {
            "name": "src/components/mout/src/array/filter.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/find.js": {
            "name": "src/components/mout/src/array/find.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/findIndex.js": {
            "name": "src/components/mout/src/array/findIndex.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/flatten.js": {
            "name": "src/components/mout/src/array/flatten.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/forEach.js": {
            "name": "src/components/mout/src/array/forEach.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/indexOf.js": {
            "name": "src/components/mout/src/array/indexOf.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/insert.js": {
            "name": "src/components/mout/src/array/insert.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/intersection.js": {
            "name": "src/components/mout/src/array/intersection.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/invoke.js": {
            "name": "src/components/mout/src/array/invoke.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/join.js": {
            "name": "src/components/mout/src/array/join.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/lastIndexOf.js": {
            "name": "src/components/mout/src/array/lastIndexOf.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/map.js": {
            "name": "src/components/mout/src/array/map.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/max.js": {
            "name": "src/components/mout/src/array/max.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/min.js": {
            "name": "src/components/mout/src/array/min.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/pick.js": {
            "name": "src/components/mout/src/array/pick.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/pluck.js": {
            "name": "src/components/mout/src/array/pluck.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/range.js": {
            "name": "src/components/mout/src/array/range.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/reduce.js": {
            "name": "src/components/mout/src/array/reduce.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/reduceRight.js": {
            "name": "src/components/mout/src/array/reduceRight.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/reject.js": {
            "name": "src/components/mout/src/array/reject.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/remove.js": {
            "name": "src/components/mout/src/array/remove.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/removeAll.js": {
            "name": "src/components/mout/src/array/removeAll.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/shuffle.js": {
            "name": "src/components/mout/src/array/shuffle.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/some.js": {
            "name": "src/components/mout/src/array/some.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/sort.js": {
            "name": "src/components/mout/src/array/sort.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/split.js": {
            "name": "src/components/mout/src/array/split.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/toLookup.js": {
            "name": "src/components/mout/src/array/toLookup.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/union.js": {
            "name": "src/components/mout/src/array/union.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/unique.js": {
            "name": "src/components/mout/src/array/unique.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/xor.js": {
            "name": "src/components/mout/src/array/xor.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/array/zip.js": {
            "name": "src/components/mout/src/array/zip.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/collection/contains.js": {
            "name": "src/components/mout/src/collection/contains.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/collection/every.js": {
            "name": "src/components/mout/src/collection/every.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/collection/filter.js": {
            "name": "src/components/mout/src/collection/filter.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/collection/find.js": {
            "name": "src/components/mout/src/collection/find.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/collection/forEach.js": {
            "name": "src/components/mout/src/collection/forEach.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/collection/make_.js": {
            "name": "src/components/mout/src/collection/make_.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/collection/map.js": {
            "name": "src/components/mout/src/collection/map.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/collection/max.js": {
            "name": "src/components/mout/src/collection/max.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/collection/min.js": {
            "name": "src/components/mout/src/collection/min.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/collection/pluck.js": {
            "name": "src/components/mout/src/collection/pluck.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/collection/reduce.js": {
            "name": "src/components/mout/src/collection/reduce.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/collection/reject.js": {
            "name": "src/components/mout/src/collection/reject.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/collection/size.js": {
            "name": "src/components/mout/src/collection/size.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/collection/some.js": {
            "name": "src/components/mout/src/collection/some.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/date/dayOfTheYear.js": {
            "name": "src/components/mout/src/date/dayOfTheYear.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/date/diff.js": {
            "name": "src/components/mout/src/date/diff.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/date/isLeapYear.js": {
            "name": "src/components/mout/src/date/isLeapYear.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/date/isSame.js": {
            "name": "src/components/mout/src/date/isSame.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/date/parseIso.js": {
            "name": "src/components/mout/src/date/parseIso.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/date/startOf.js": {
            "name": "src/components/mout/src/date/startOf.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/date/strftime.js": {
            "name": "src/components/mout/src/date/strftime.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/date/timezoneAbbr.js": {
            "name": "src/components/mout/src/date/timezoneAbbr.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/date/timezoneOffset.js": {
            "name": "src/components/mout/src/date/timezoneOffset.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/date/totalDaysInMonth.js": {
            "name": "src/components/mout/src/date/totalDaysInMonth.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/date/totalDaysInYear.js": {
            "name": "src/components/mout/src/date/totalDaysInYear.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/date/weekOfTheYear.js": {
            "name": "src/components/mout/src/date/weekOfTheYear.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/function/bind.js": {
            "name": "src/components/mout/src/function/bind.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/function/compose.js": {
            "name": "src/components/mout/src/function/compose.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/function/debounce.js": {
            "name": "src/components/mout/src/function/debounce.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/function/func.js": {
            "name": "src/components/mout/src/function/func.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/function/makeIterator_.js": {
            "name": "src/components/mout/src/function/makeIterator_.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/function/partial.js": {
            "name": "src/components/mout/src/function/partial.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/function/prop.js": {
            "name": "src/components/mout/src/function/prop.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/function/series.js": {
            "name": "src/components/mout/src/function/series.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/function/throttle.js": {
            "name": "src/components/mout/src/function/throttle.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/function/timeout.js": {
            "name": "src/components/mout/src/function/timeout.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/function/times.js": {
            "name": "src/components/mout/src/function/times.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/clone.js": {
            "name": "src/components/mout/src/lang/clone.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/createObject.js": {
            "name": "src/components/mout/src/lang/createObject.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/ctorApply.js": {
            "name": "src/components/mout/src/lang/ctorApply.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/deepClone.js": {
            "name": "src/components/mout/src/lang/deepClone.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/defaults.js": {
            "name": "src/components/mout/src/lang/defaults.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/inheritPrototype.js": {
            "name": "src/components/mout/src/lang/inheritPrototype.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/is.js": {
            "name": "src/components/mout/src/lang/is.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/isArguments.js": {
            "name": "src/components/mout/src/lang/isArguments.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/isArray.js": {
            "name": "src/components/mout/src/lang/isArray.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/isBoolean.js": {
            "name": "src/components/mout/src/lang/isBoolean.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/isDate.js": {
            "name": "src/components/mout/src/lang/isDate.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/isFinite.js": {
            "name": "src/components/mout/src/lang/isFinite.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/isFunction.js": {
            "name": "src/components/mout/src/lang/isFunction.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/isInteger.js": {
            "name": "src/components/mout/src/lang/isInteger.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/isKind.js": {
            "name": "src/components/mout/src/lang/isKind.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/isNaN.js": {
            "name": "src/components/mout/src/lang/isNaN.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/isNull.js": {
            "name": "src/components/mout/src/lang/isNull.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/isNumber.js": {
            "name": "src/components/mout/src/lang/isNumber.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/isObject.js": {
            "name": "src/components/mout/src/lang/isObject.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/isPlainObject.js": {
            "name": "src/components/mout/src/lang/isPlainObject.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/isRegExp.js": {
            "name": "src/components/mout/src/lang/isRegExp.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/isString.js": {
            "name": "src/components/mout/src/lang/isString.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/isUndefined.js": {
            "name": "src/components/mout/src/lang/isUndefined.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/isnt.js": {
            "name": "src/components/mout/src/lang/isnt.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/kindOf.js": {
            "name": "src/components/mout/src/lang/kindOf.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/toArray.js": {
            "name": "src/components/mout/src/lang/toArray.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/toNumber.js": {
            "name": "src/components/mout/src/lang/toNumber.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/lang/toString.js": {
            "name": "src/components/mout/src/lang/toString.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/math/ceil.js": {
            "name": "src/components/mout/src/math/ceil.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/math/clamp.js": {
            "name": "src/components/mout/src/math/clamp.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/math/countSteps.js": {
            "name": "src/components/mout/src/math/countSteps.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/math/floor.js": {
            "name": "src/components/mout/src/math/floor.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/math/inRange.js": {
            "name": "src/components/mout/src/math/inRange.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/math/isNear.js": {
            "name": "src/components/mout/src/math/isNear.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/math/lerp.js": {
            "name": "src/components/mout/src/math/lerp.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/math/loop.js": {
            "name": "src/components/mout/src/math/loop.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/math/map.js": {
            "name": "src/components/mout/src/math/map.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/math/norm.js": {
            "name": "src/components/mout/src/math/norm.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/math/round.js": {
            "name": "src/components/mout/src/math/round.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/number/MAX_INT.js": {
            "name": "src/components/mout/src/number/MAX_INT.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/number/MAX_UINT.js": {
            "name": "src/components/mout/src/number/MAX_UINT.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/number/MIN_INT.js": {
            "name": "src/components/mout/src/number/MIN_INT.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/number/abbreviate.js": {
            "name": "src/components/mout/src/number/abbreviate.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/number/currencyFormat.js": {
            "name": "src/components/mout/src/number/currencyFormat.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/number/enforcePrecision.js": {
            "name": "src/components/mout/src/number/enforcePrecision.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/number/pad.js": {
            "name": "src/components/mout/src/number/pad.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/number/rol.js": {
            "name": "src/components/mout/src/number/rol.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/number/ror.js": {
            "name": "src/components/mout/src/number/ror.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/number/sign.js": {
            "name": "src/components/mout/src/number/sign.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/number/toInt.js": {
            "name": "src/components/mout/src/number/toInt.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/number/toUInt.js": {
            "name": "src/components/mout/src/number/toUInt.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/number/toUInt31.js": {
            "name": "src/components/mout/src/number/toUInt31.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/bindAll.js": {
            "name": "src/components/mout/src/object/bindAll.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/contains.js": {
            "name": "src/components/mout/src/object/contains.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/deepEquals.js": {
            "name": "src/components/mout/src/object/deepEquals.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/deepFillIn.js": {
            "name": "src/components/mout/src/object/deepFillIn.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/deepMatches.js": {
            "name": "src/components/mout/src/object/deepMatches.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/deepMixIn.js": {
            "name": "src/components/mout/src/object/deepMixIn.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/equals.js": {
            "name": "src/components/mout/src/object/equals.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/every.js": {
            "name": "src/components/mout/src/object/every.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/fillIn.js": {
            "name": "src/components/mout/src/object/fillIn.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/filter.js": {
            "name": "src/components/mout/src/object/filter.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/find.js": {
            "name": "src/components/mout/src/object/find.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/forIn.js": {
            "name": "src/components/mout/src/object/forIn.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/forOwn.js": {
            "name": "src/components/mout/src/object/forOwn.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/functions.js": {
            "name": "src/components/mout/src/object/functions.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/get.js": {
            "name": "src/components/mout/src/object/get.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/has.js": {
            "name": "src/components/mout/src/object/has.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/hasOwn.js": {
            "name": "src/components/mout/src/object/hasOwn.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/keys.js": {
            "name": "src/components/mout/src/object/keys.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/map.js": {
            "name": "src/components/mout/src/object/map.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/matches.js": {
            "name": "src/components/mout/src/object/matches.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/max.js": {
            "name": "src/components/mout/src/object/max.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/merge.js": {
            "name": "src/components/mout/src/object/merge.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/min.js": {
            "name": "src/components/mout/src/object/min.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/mixIn.js": {
            "name": "src/components/mout/src/object/mixIn.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/namespace.js": {
            "name": "src/components/mout/src/object/namespace.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/pick.js": {
            "name": "src/components/mout/src/object/pick.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/pluck.js": {
            "name": "src/components/mout/src/object/pluck.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/reduce.js": {
            "name": "src/components/mout/src/object/reduce.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/reject.js": {
            "name": "src/components/mout/src/object/reject.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/set.js": {
            "name": "src/components/mout/src/object/set.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/size.js": {
            "name": "src/components/mout/src/object/size.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/some.js": {
            "name": "src/components/mout/src/object/some.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/unset.js": {
            "name": "src/components/mout/src/object/unset.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/object/values.js": {
            "name": "src/components/mout/src/object/values.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/queryString/contains.js": {
            "name": "src/components/mout/src/queryString/contains.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/queryString/decode.js": {
            "name": "src/components/mout/src/queryString/decode.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/queryString/encode.js": {
            "name": "src/components/mout/src/queryString/encode.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/queryString/getParam.js": {
            "name": "src/components/mout/src/queryString/getParam.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/queryString/getQuery.js": {
            "name": "src/components/mout/src/queryString/getQuery.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/queryString/parse.js": {
            "name": "src/components/mout/src/queryString/parse.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/queryString/setParam.js": {
            "name": "src/components/mout/src/queryString/setParam.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/random/choice.js": {
            "name": "src/components/mout/src/random/choice.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/random/guid.js": {
            "name": "src/components/mout/src/random/guid.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/random/rand.js": {
            "name": "src/components/mout/src/random/rand.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/random/randBit.js": {
            "name": "src/components/mout/src/random/randBit.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/random/randHex.js": {
            "name": "src/components/mout/src/random/randHex.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/random/randInt.js": {
            "name": "src/components/mout/src/random/randInt.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/random/randSign.js": {
            "name": "src/components/mout/src/random/randSign.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/random/random.js": {
            "name": "src/components/mout/src/random/random.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/WHITE_SPACES.js": {
            "name": "src/components/mout/src/string/WHITE_SPACES.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/camelCase.js": {
            "name": "src/components/mout/src/string/camelCase.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/contains.js": {
            "name": "src/components/mout/src/string/contains.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/crop.js": {
            "name": "src/components/mout/src/string/crop.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/endsWith.js": {
            "name": "src/components/mout/src/string/endsWith.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/escapeHtml.js": {
            "name": "src/components/mout/src/string/escapeHtml.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/escapeRegExp.js": {
            "name": "src/components/mout/src/string/escapeRegExp.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/escapeUnicode.js": {
            "name": "src/components/mout/src/string/escapeUnicode.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/hyphenate.js": {
            "name": "src/components/mout/src/string/hyphenate.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/insert.js": {
            "name": "src/components/mout/src/string/insert.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/interpolate.js": {
            "name": "src/components/mout/src/string/interpolate.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/lowerCase.js": {
            "name": "src/components/mout/src/string/lowerCase.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/lpad.js": {
            "name": "src/components/mout/src/string/lpad.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/ltrim.js": {
            "name": "src/components/mout/src/string/ltrim.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/makePath.js": {
            "name": "src/components/mout/src/string/makePath.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/normalizeLineBreaks.js": {
            "name": "src/components/mout/src/string/normalizeLineBreaks.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/pascalCase.js": {
            "name": "src/components/mout/src/string/pascalCase.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/properCase.js": {
            "name": "src/components/mout/src/string/properCase.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/removeNonASCII.js": {
            "name": "src/components/mout/src/string/removeNonASCII.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/removeNonWord.js": {
            "name": "src/components/mout/src/string/removeNonWord.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/repeat.js": {
            "name": "src/components/mout/src/string/repeat.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/replace.js": {
            "name": "src/components/mout/src/string/replace.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/replaceAccents.js": {
            "name": "src/components/mout/src/string/replaceAccents.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/rpad.js": {
            "name": "src/components/mout/src/string/rpad.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/rtrim.js": {
            "name": "src/components/mout/src/string/rtrim.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/sentenceCase.js": {
            "name": "src/components/mout/src/string/sentenceCase.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/slugify.js": {
            "name": "src/components/mout/src/string/slugify.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/startsWith.js": {
            "name": "src/components/mout/src/string/startsWith.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/stripHtmlTags.js": {
            "name": "src/components/mout/src/string/stripHtmlTags.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/trim.js": {
            "name": "src/components/mout/src/string/trim.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/truncate.js": {
            "name": "src/components/mout/src/string/truncate.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/typecast.js": {
            "name": "src/components/mout/src/string/typecast.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/unCamelCase.js": {
            "name": "src/components/mout/src/string/unCamelCase.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/underscore.js": {
            "name": "src/components/mout/src/string/underscore.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/unescapeHtml.js": {
            "name": "src/components/mout/src/string/unescapeHtml.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/unescapeUnicode.js": {
            "name": "src/components/mout/src/string/unescapeUnicode.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/unhyphenate.js": {
            "name": "src/components/mout/src/string/unhyphenate.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/string/upperCase.js": {
            "name": "src/components/mout/src/string/upperCase.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/time/convert.js": {
            "name": "src/components/mout/src/time/convert.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/time/now.js": {
            "name": "src/components/mout/src/time/now.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/time/parseMs.js": {
            "name": "src/components/mout/src/time/parseMs.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/time/toTimeString.js": {
            "name": "src/components/mout/src/time/toTimeString.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/mout/src/index.js": {
            "name": "src/components/mout/src/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/require-dust/demo/lib/require.js": {
            "name": "src/components/require-dust/demo/lib/require.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/require-dust/require-dust.js": {
            "name": "src/components/require-dust/require-dust.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/components/requirejs/require.js": {
            "name": "src/components/requirejs/require.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/env/Device.js": {
            "name": "src/env/Device.js",
            "modules": {},
            "classes": {
                "lavaca.env.Device": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/events/EventDispatcher.js": {
            "name": "src/events/EventDispatcher.js",
            "modules": {},
            "classes": {
                "lavaca.events.EventDispatcher": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/fx/Animation.js": {
            "name": "src/fx/Animation.js",
            "modules": {},
            "classes": {
                "lavaca.fx.Animation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/fx/Spring.js": {
            "name": "src/fx/Spring.js",
            "modules": {},
            "classes": {
                "lavaca.fx.Spring": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/fx/Transform.js": {
            "name": "src/fx/Transform.js",
            "modules": {},
            "classes": {
                "lavaca.fx.Transform": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/fx/Transition.js": {
            "name": "src/fx/Transition.js",
            "modules": {},
            "classes": {
                "lavaca.fx.Transition": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/mvc/Application.js": {
            "name": "src/mvc/Application.js",
            "modules": {},
            "classes": {
                "lavaca.mvc.Application": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/mvc/Collection.js": {
            "name": "src/mvc/Collection.js",
            "modules": {},
            "classes": {
                "lavaca.mvc.ItemEvent": 1,
                "lavaca.mvc.Collection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/mvc/Controller.js": {
            "name": "src/mvc/Controller.js",
            "modules": {},
            "classes": {
                "lavaca.mvc.Controller": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/mvc/Model.js": {
            "name": "src/mvc/Model.js",
            "modules": {},
            "classes": {
                "lavaca.mvc.AttributeEvent": 1,
                "lavaca.mvc.Model": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/mvc/Route.js": {
            "name": "src/mvc/Route.js",
            "modules": {},
            "classes": {
                "lavaca.mvc.Route": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/mvc/Router.js": {
            "name": "src/mvc/Router.js",
            "modules": {},
            "classes": {
                "lavaca.mvc.Router": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/mvc/View.js": {
            "name": "src/mvc/View.js",
            "modules": {},
            "classes": {
                "lavaca.mvc.View": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/mvc/ViewManager.js": {
            "name": "src/mvc/ViewManager.js",
            "modules": {},
            "classes": {
                "lavaca.mvc.ViewManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/net/Connectivity.js": {
            "name": "src/net/Connectivity.js",
            "modules": {},
            "classes": {
                "lavaca.net.Connectivity": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/net/History.js": {
            "name": "src/net/History.js",
            "modules": {},
            "classes": {
                "lavaca.net.History": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/storage/LocalStore.js": {
            "name": "src/storage/LocalStore.js",
            "modules": {},
            "classes": {
                "lavaca.storage.LocalStore": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/storage/Store.js": {
            "name": "src/storage/Store.js",
            "modules": {},
            "classes": {
                "lavaca.storage.Store": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ui/DustTemplate.js": {
            "name": "src/ui/DustTemplate.js",
            "modules": {},
            "classes": {
                "lavaca.ui.DustTemplate": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ui/Form.js": {
            "name": "src/ui/Form.js",
            "modules": {},
            "classes": {
                "lavaca.ui.Form": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ui/LoadingIndicator.js": {
            "name": "src/ui/LoadingIndicator.js",
            "modules": {},
            "classes": {
                "lavaca.ui.LoadingIndicator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ui/Template.js": {
            "name": "src/ui/Template.js",
            "modules": {},
            "classes": {
                "lavaca.ui.Template": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ui/Widget.js": {
            "name": "src/ui/Widget.js",
            "modules": {},
            "classes": {
                "lavaca.ui.Widget": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/util/ArrayUtils.js": {
            "name": "src/util/ArrayUtils.js",
            "modules": {},
            "classes": {
                "lavaca.util.ArrayUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/util/Cache.js": {
            "name": "src/util/Cache.js",
            "modules": {},
            "classes": {
                "lavaca.util.Cache": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/util/Config.js": {
            "name": "src/util/Config.js",
            "modules": {},
            "classes": {
                "lavaca.util.Config": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/util/DateUtils.js": {
            "name": "src/util/DateUtils.js",
            "modules": {},
            "classes": {
                "lavaca.util.DateUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/util/Disposable.js": {
            "name": "src/util/Disposable.js",
            "modules": {},
            "classes": {
                "lavaca.util.Disposable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/util/Map.js": {
            "name": "src/util/Map.js",
            "modules": {},
            "classes": {
                "lavaca.util.Map": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/util/Promise.js": {
            "name": "src/util/Promise.js",
            "modules": {},
            "classes": {
                "lavaca.util.Promise": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/util/StringUtils.js": {
            "name": "src/util/StringUtils.js",
            "modules": {},
            "classes": {
                "lavaca.util.StringUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/util/Translation.js": {
            "name": "src/util/Translation.js",
            "modules": {},
            "classes": {
                "lavaca.util.Translation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/util/extend.js": {
            "name": "src/util/extend.js",
            "modules": {},
            "classes": {
                "lavaca.util.extend": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/util/resolve.js": {
            "name": "src/util/resolve.js",
            "modules": {},
            "classes": {
                "lavaca.util.resolve": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/util/uuid.js": {
            "name": "src/util/uuid.js",
            "modules": {},
            "classes": {
                "lavaca.util.uuid": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "lavaca.env.Device": {
            "name": "lavaca.env.Device",
            "shortname": "lavaca.env.Device",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/env/Device.js",
            "line": 5,
            "description": "Static utility type for working with Cordova (aka PhoneGap) and other non-standard native functionality"
        },
        "lavaca.events.EventDispatcher": {
            "name": "lavaca.events.EventDispatcher",
            "shortname": "lavaca.events.EventDispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/events/EventDispatcher.js",
            "line": 6,
            "description": "Basic event dispatcher type",
            "extends": "lavaca.util.Disposable",
            "is_constructor": 1
        },
        "lavaca.fx.Animation": {
            "name": "lavaca.fx.Animation",
            "shortname": "lavaca.fx.Animation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/fx/Animation.js",
            "line": 34,
            "description": "Static utility type for working with CSS keyframe animations"
        },
        "lavaca.fx.Spring": {
            "name": "lavaca.fx.Spring",
            "shortname": "lavaca.fx.Spring",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/fx/Spring.js",
            "line": 3,
            "description": "Static utility type for creating a CSS keyframe animation with a spring effect"
        },
        "lavaca.fx.Transform": {
            "name": "lavaca.fx.Transform",
            "shortname": "lavaca.fx.Transform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/fx/Transform.js",
            "line": 87,
            "description": "Static utility type for working with CSS transforms"
        },
        "lavaca.fx.Transition": {
            "name": "lavaca.fx.Transition",
            "shortname": "lavaca.fx.Transition",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/fx/Transition.js",
            "line": 31,
            "description": "Static utility type for working with CSS transitions"
        },
        "lavaca.mvc.Application": {
            "name": "lavaca.mvc.Application",
            "shortname": "lavaca.mvc.Application",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/mvc/Application.js",
            "line": 43,
            "description": "Base application type",
            "extends": "lavaca.events.EventDispatcher"
        },
        "lavaca.mvc.ItemEvent": {
            "name": "lavaca.mvc.ItemEvent",
            "shortname": "lavaca.mvc.ItemEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/mvc/Collection.js",
            "line": 34,
            "description": "Event type used when a model in a collection has an event",
            "extends": "lavaca.events.EventDispatcher",
            "itemtype": "property",
            "type": "Lavaca.mvc.Collection",
            "default": "null\nThe index of the event-causing model before the event"
        },
        "lavaca.mvc.Collection": {
            "name": "lavaca.mvc.Collection",
            "shortname": "lavaca.mvc.Collection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/mvc/Collection.js",
            "line": 57,
            "super": "Model\nBasic model collection type",
            "itemtype": "event",
            "is_constructor": 1,
            "params": [
                {
                    "name": "models",
                    "description": "A list of models to add to the collection",
                    "type": "Array"
                },
                {
                    "name": "map",
                    "description": "A parameter hash to apply to the collection",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "lavaca.mvc.Controller": {
            "name": "lavaca.mvc.Controller",
            "shortname": "lavaca.mvc.Controller",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/mvc/Controller.js",
            "line": 10,
            "description": "Base type for controllers",
            "extends": "lavaca.util.Disposable",
            "is_constructor": 1,
            "params": [
                {
                    "name": "other",
                    "description": "Another controller from which to take context information",
                    "type": "Lavaca.mvc.Controller"
                },
                {
                    "name": "router",
                    "description": "The application's router",
                    "type": "Lavaca.mvc.Router",
                    "optional": true
                },
                {
                    "name": "viewManager",
                    "description": "The application's view manager",
                    "type": "Lavaca.mvc.ViewManager",
                    "optional": true
                }
            ]
        },
        "lavaca.mvc.AttributeEvent": {
            "name": "lavaca.mvc.AttributeEvent",
            "shortname": "lavaca.mvc.AttributeEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/mvc/Model.js",
            "line": 66,
            "description": "Event type used when an attribute is modified",
            "extends": "Event"
        },
        "lavaca.mvc.Model": {
            "name": "lavaca.mvc.Model",
            "shortname": "lavaca.mvc.Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/mvc/Model.js",
            "line": 92,
            "description": "Basic model type",
            "extends": "lavaca.events.EventDispatcher\n\nPlace the events where they are triggered in the code, see the yuidoc syntax reference and view.js for rendersuccess trigger",
            "itemtype": "event",
            "is_constructor": 1,
            "params": [
                {
                    "name": "map",
                    "description": "A parameter hash to apply to the model",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "lavaca.mvc.Route": {
            "name": "lavaca.mvc.Route",
            "shortname": "lavaca.mvc.Route",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/mvc/Route.js",
            "line": 62,
            "extends": "lavaca.util.Disposable\nA relationship between a URL pattern and a controller action",
            "is_constructor": 1,
            "params": [
                {
                    "name": "pattern",
                    "description": "The route URL pattern\n  Route URL patterns should be in the form /path/{foo}/path/{*bar}.\n  The path variables, along with query string parameters, will be passed\n  to the controller action as a params object. In this case, when passed\n  the URL /path/something/path/1/2/3?abc=def, the params object would be\n  {foo: 'something', bar: [1, 2, 3], abc: 'def'}.",
                    "type": "String"
                },
                {
                    "name": "TController",
                    "description": "The type of controller that performs the action\n  (Should derive from [[Lavaca.mvc.Controller]])",
                    "type": "Function"
                },
                {
                    "name": "action",
                    "description": "The name of the controller method to call",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Key-value pairs that will be merged into the params\n  object that is passed to the controller action",
                    "type": "Object"
                }
            ]
        },
        "lavaca.mvc.Router": {
            "name": "lavaca.mvc.Router",
            "shortname": "lavaca.mvc.Router",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/mvc/Router.js",
            "line": 8,
            "extends": "lavaca.util.Disposable\nURL manager",
            "is_constructor": 1,
            "params": [
                {
                    "name": "viewManager",
                    "description": "The view manager",
                    "type": "Lavaca.mvc.ViewManager"
                }
            ]
        },
        "lavaca.mvc.View": {
            "name": "lavaca.mvc.View",
            "shortname": "lavaca.mvc.View",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/mvc/View.js",
            "line": 14,
            "description": "Base View Class",
            "extends": "lavaca.events.EventDispatcher",
            "is_constructor": 1,
            "params": [
                {
                    "name": "el",
                    "description": "the selector or Object for the element to attach to the view",
                    "type": "Object | String"
                },
                {
                    "name": "model",
                    "description": "the model for the view",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "parentView",
                    "description": "the parent view for the view",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "el",
                    "description": "the selector or Object for the element to attach to the view",
                    "type": "Object | String"
                },
                {
                    "name": "model",
                    "description": "the model for the view",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "layer",
                    "description": "The layer on which the view sits (only applicable to views used as a PageView)",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "lavaca.mvc.ViewManager": {
            "name": "lavaca.mvc.ViewManager",
            "shortname": "lavaca.mvc.ViewManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/mvc/ViewManager.js",
            "line": 11,
            "description": "Manager responsible for drawing views",
            "extends": "lavaca.util.Disposable",
            "is_constructor": 1,
            "params": [
                {
                    "name": "el",
                    "description": "The element that contains all layers",
                    "type": "JQuery"
                }
            ]
        },
        "lavaca.net.Connectivity": {
            "name": "lavaca.net.Connectivity",
            "shortname": "lavaca.net.Connectivity",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/net/Connectivity.js",
            "line": 7,
            "description": "A utility type for working under different network connectivity situations."
        },
        "lavaca.net.History": {
            "name": "lavaca.net.History",
            "shortname": "lavaca.net.History",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/net/History.js",
            "line": 27,
            "description": "HTML5 history abstraction layer",
            "extends": "lavaca.events.EventDispatcher",
            "itemtype": "event",
            "is_constructor": 1
        },
        "lavaca.storage.LocalStore": {
            "name": "lavaca.storage.LocalStore",
            "shortname": "lavaca.storage.LocalStore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/storage/LocalStore.js",
            "line": 27,
            "description": "An object for manage local storage",
            "extends": "lavaca.storage.Store"
        },
        "lavaca.storage.Store": {
            "name": "lavaca.storage.Store",
            "shortname": "lavaca.storage.Store",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/storage/Store.js",
            "line": 9,
            "description": "An object for manage local storage",
            "extends": "lavaca.util.Disposable"
        },
        "lavaca.ui.DustTemplate": {
            "name": "lavaca.ui.DustTemplate",
            "shortname": "lavaca.ui.DustTemplate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/ui/DustTemplate.js",
            "line": 11,
            "description": "Base type for templates that use the dust engine",
            "extends": "lavaca.ui.Template",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The unique name of the template",
                    "type": "String"
                },
                {
                    "name": "src",
                    "description": "A URL from which to load the template",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "The raw string code of the template's body",
                    "type": "String"
                }
            ]
        },
        "lavaca.ui.Form": {
            "name": "lavaca.ui.Form",
            "shortname": "lavaca.ui.Form",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/ui/Form.js",
            "line": 49,
            "description": "Basic form type",
            "extends": "lavaca.ui.Widget",
            "is_constructor": 1,
            "params": [
                {
                    "name": "el",
                    "description": "The DOM element that is the root of the widget",
                    "type": "JQuery"
                }
            ]
        },
        "lavaca.ui.LoadingIndicator": {
            "name": "lavaca.ui.LoadingIndicator",
            "shortname": "lavaca.ui.LoadingIndicator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/ui/LoadingIndicator.js",
            "line": 6,
            "description": "Type that shows/hides a loading indicator",
            "extends": "lavaca.ui.Widget",
            "is_constructor": 1,
            "params": [
                {
                    "name": "el",
                    "description": "The DOM element that is the root of the widget",
                    "type": "JQuery"
                }
            ]
        },
        "lavaca.ui.Template": {
            "name": "lavaca.ui.Template",
            "shortname": "lavaca.ui.Template",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/ui/Template.js",
            "line": 9,
            "description": "Abstract type for templates",
            "extends": "lavaca.util.Map"
        },
        "lavaca.ui.Widget": {
            "name": "lavaca.ui.Widget",
            "shortname": "lavaca.ui.Widget",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/ui/Widget.js",
            "line": 7,
            "description": "Base type for all UI elements",
            "extends": "lavaca.events.EventDispatcher",
            "is_constructor": 1,
            "params": [
                {
                    "name": "el",
                    "description": "The DOM element that is the root of the widget",
                    "type": "JQuery"
                }
            ]
        },
        "lavaca.util.ArrayUtils": {
            "name": "lavaca.util.ArrayUtils",
            "shortname": "lavaca.util.ArrayUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/util/ArrayUtils.js",
            "line": 3,
            "description": "Utility class for working with arrays"
        },
        "lavaca.util.Cache": {
            "name": "lavaca.util.Cache",
            "shortname": "lavaca.util.Cache",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/util/Cache.js",
            "line": 6,
            "description": "Object for storing data",
            "extends": "lavaca.util.Disposable"
        },
        "lavaca.util.Config": {
            "name": "lavaca.util.Config",
            "shortname": "lavaca.util.Config",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/util/Config.js",
            "line": 15,
            "description": "Configuration management type",
            "extends": "lavaca.util.Map"
        },
        "lavaca.util.DateUtils": {
            "name": "lavaca.util.DateUtils",
            "shortname": "lavaca.util.DateUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/util/DateUtils.js",
            "line": 5,
            "description": "Utility class for working with dates"
        },
        "lavaca.util.Disposable": {
            "name": "lavaca.util.Disposable",
            "shortname": "lavaca.util.Disposable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/util/Disposable.js",
            "line": 29,
            "description": "Abstract type for types that need to ready themselves for GC",
            "is_constructor": 1
        },
        "lavaca.util.Map": {
            "name": "lavaca.util.Map",
            "shortname": "lavaca.util.Map",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/util/Map.js",
            "line": 22,
            "description": "Abstract type for lookup tables",
            "extends": "lavaca.util.Disposable",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the map",
                    "type": "String"
                },
                {
                    "name": "src",
                    "description": "The URL of the map's data (or null if code is supplied)",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "The raw string data for the map (or null if src is supplied)",
                    "type": "String"
                }
            ]
        },
        "lavaca.util.Promise": {
            "name": "lavaca.util.Promise",
            "shortname": "lavaca.util.Promise",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/util/Promise.js",
            "line": 5,
            "description": "Utility type for asynchronous programming",
            "is_constructor": 1,
            "params": [
                {
                    "name": "thisp",
                    "description": "What the \"this\" keyword resolves to in callbacks",
                    "type": "Object"
                }
            ]
        },
        "lavaca.util.StringUtils": {
            "name": "lavaca.util.StringUtils",
            "shortname": "lavaca.util.StringUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/util/StringUtils.js",
            "line": 15,
            "description": "Static utility type for working with strings"
        },
        "lavaca.util.Translation": {
            "name": "lavaca.util.Translation",
            "shortname": "lavaca.util.Translation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/util/Translation.js",
            "line": 19,
            "description": "Translation dictionary",
            "extends": "lavaca.util.Map",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the map",
                    "type": "String"
                },
                {
                    "name": "src",
                    "description": "The URL of the map's data (or null if code is supplied)",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "The raw string data for the map (or null if src is supplied)",
                    "type": "String"
                }
            ]
        },
        "lavaca.util.extend": {
            "name": "lavaca.util.extend",
            "shortname": "lavaca.util.extend",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/util/extend.js",
            "line": 2,
            "description": "Establishes inheritance between types. After a type is extended, it receives its own static\nconvenience method, extend(TSub, overrides)."
        },
        "lavaca.util.resolve": {
            "name": "lavaca.util.resolve",
            "shortname": "lavaca.util.resolve",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/util/resolve.js",
            "line": 2,
            "description": "Looks up or creates an object, given its global path (ie, 'Lavaca.resolve' resolves to this function,\n'no.obj.exists' resolves to null)"
        },
        "lavaca.util.uuid": {
            "name": "lavaca.util.uuid",
            "shortname": "lavaca.util.uuid",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src/util/uuid.js",
            "line": 4,
            "description": "Produces a app specific unique identifier"
        }
    },
    "classitems": [
        {
            "file": "src/components/dustjs-linkedin/test/dust_files/jsdump.js",
            "line": 1,
            "description": "jsDump\nCopyright (c) 2008 Ariel Flesler - aflesler(at)gmail(dot)com | http://flesler.blogspot.com\nLicensed under BSD (http://www.opensource.org/licenses/bsd-license.php)\nDate: 5/15/2008",
            "projectdescription": "Advanced and extensible data dumping for Javascript.",
            "version": "1.0.0",
            "author": "Ariel Flesler",
            "link": "{http://flesler.blogspot.com/2008/05/jsdump-pretty-dump-of-any-javascript.html}",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 3,
            "description": "Top level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 10,
            "access": "private",
            "tagname": "",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 17,
            "description": "Use <code>jasmine.undefined</code> instead of <code>undefined</code>, since <code>undefined</code> is just\na plain old variable and may be redefined by somebody else.",
            "access": "private",
            "tagname": "",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 25,
            "description": "Show diagnostic messages in the console if set to true",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 31,
            "description": "Default interval in milliseconds for event loop yields (e.g. to allow network activity or to refresh the screen with the HTML-based runner). Small values here may result in slow test running. Zero means no updates until all tests have completed.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 37,
            "description": "Default timeout interval in milliseconds for waitsFor() blocks.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 50,
            "description": "Allows for bound functions to be compared.  Internal use only.",
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "base",
                    "description": "bound 'this' for the function",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "function to find",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 114,
            "description": "Getter for the Jasmine environment. Ensures one gets created",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 122,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 132,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 142,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 152,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "typeName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 163,
            "description": "Pretty printer for expecations.  Takes any object and turns it into a human-readable string.",
            "params": [
                {
                    "name": "value",
                    "description": "an object to be outputted",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 175,
            "description": "Returns true if the object is a DOM Node.",
            "params": [
                {
                    "name": "obj",
                    "description": "object to check",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 185,
            "description": "Returns a matchable 'generic' object of the class type.  For use in expecations of type when values don't matter.",
            "example": [
                "\n// don't care about which function is passed in, as long as it's a function\nexpect(mySpy).toHaveBeenCalledWith(jasmine.any(Function));"
            ],
            "params": [
                {
                    "name": "clazz",
                    "description": "",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "matchable object of the type clazz"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 199,
            "description": "Jasmine Spies are test doubles that can act as stubs, spies, fakes or when used in an expecation, mocks.\n\nSpies should be created in test setup, before expectations.  They can then be checked, using the standard Jasmine\nexpectation syntax. Spies can be checked if they were called or not and what the calling params were.\n\nA Spy has the following fields: wasCalled, callCount, mostRecentCall, and argsForCall (see docs).\n\nSpies are torn down at the end of every spec.\n\nNote: Do <b>not</b> call new jasmine.Spy() directly - a spy must be created using spyOn, jasmine.createSpy or jasmine.createSpyObj.",
            "example": [
                "\n// a stub\nvar myStub = jasmine.createSpy('myStub');  // can be used anywhere\n\n// spy example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\n\n// actual foo.not will not be called, execution stops\nspyOn(foo, 'not');\n\n// foo.not spied upon, execution will continue to implementation\nspyOn(foo, 'not').andCallThrough();\n\n// fake example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\n\n// foo.not(val) will return val\nspyOn(foo, 'not').andCallFake(function(value) {return value;});\n\n// mock example\nfoo.not(7 == 7);\nexpect(foo.not).toHaveBeenCalled();\nexpect(foo.not).toHaveBeenCalledWith(true);"
            ],
            "is_constructor": 1,
            "see": [
                "spyOn",
                "jasmine.createSpy",
                "jasmine.createSpyObj"
            ],
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 244,
            "description": "The name of the spy, if provided.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 248,
            "description": "Is this Object a spy?",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 252,
            "description": "The actual function this spy stubs.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 257,
            "description": "Tracking of the most recent call to the spy.",
            "example": [
                "\nvar mySpy = jasmine.createSpy('foo');\nmySpy(1, 2);\nmySpy.mostRecentCall.args = [1, 2];"
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 266,
            "description": "Holds arguments for each call to the spy, indexed by call count",
            "example": [
                "\nvar mySpy = jasmine.createSpy('foo');\nmySpy(1, 2);\nmySpy(7, 8);\nmySpy.mostRecentCall.args = [7, 8];\nmySpy.argsForCall[0] = [1, 2];\nmySpy.argsForCall[1] = [7, 8];"
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 280,
            "description": "Tells a spy to call through to the actual implemenatation.",
            "example": [
                "\nvar foo = {\n  bar: function() { // do some stuff }\n}\n\n// defining a spy on an existing property: foo.bar\nspyOn(foo, 'bar').andCallThrough();"
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 296,
            "description": "For setting the return value of a spy.",
            "example": [
                "\n// defining a spy from scratch: foo() returns 'baz'\nvar foo = jasmine.createSpy('spy on foo').andReturn('baz');\n\n// defining a spy on an existing property: foo.bar() returns 'baz'\nspyOn(foo, 'bar').andReturn('baz');"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 315,
            "description": "For throwing an exception when a spy is called.",
            "example": [
                "\n// defining a spy from scratch: foo() throws an exception w/ message 'ouch'\nvar foo = jasmine.createSpy('spy on foo').andThrow('baz');\n\n// defining a spy on an existing property: foo.bar() throws an exception w/ message 'ouch'\nspyOn(foo, 'bar').andThrow('baz');"
            ],
            "params": [
                {
                    "name": "exceptionMsg",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 334,
            "description": "Calls an alternate implementation when a spy is called.",
            "example": [
                "\nvar baz = function() {\n  // do some stuff, return something\n}\n// defining a spy from scratch: foo() calls the function baz\nvar foo = jasmine.createSpy('spy on foo').andCall(baz);\n\n// defining a spy on an existing property: foo.bar() calls an anonymnous function\nspyOn(foo, 'bar').andCall(function() { return 'baz';} );"
            ],
            "params": [
                {
                    "name": "fakeFunc",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 354,
            "description": "Resets all of a spy's the tracking variables so that it can be used again.",
            "example": [
                "\nspyOn(foo, 'bar');\n\nfoo.bar();\n\nexpect(foo.bar.callCount).toEqual(1);\n\nfoo.bar.reset();\n\nexpect(foo.bar.callCount).toEqual(0);"
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 400,
            "description": "Determines whether an object is a spy.",
            "params": [
                {
                    "name": "putativeSpy",
                    "description": "",
                    "type": "jasmine.Spy|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 410,
            "description": "Creates a more complicated spy: an Object that has every property a function that is a spy.  Used for stubbing something\nlarge in one call.",
            "params": [
                {
                    "name": "baseName",
                    "description": "name of spy class",
                    "type": "String"
                },
                {
                    "name": "methodNames",
                    "description": "array of names of methods to make spies",
                    "type": "Array"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 428,
            "description": "All parameters are pretty-printed and concatenated together, then written to the current spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 438,
            "description": "Function that installs a spy on an existing object's method name.  Used within a Spec to create a spy.",
            "example": [
                "\n// spy example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\nspyOn(foo, 'not'); // actual foo.not will not be called, execution stops"
            ],
            "see": [
                "jasmine.createSpy"
            ],
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "methodName",
                    "description": ""
                }
            ],
            "return": {
                "description": "a Jasmine spy that can be chained with all spy methods"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 458,
            "description": "Creates a Jasmine spec that will be added to the current suite.\n\n// TODO: pending tests",
            "example": [
                "\nit('should be true', function() {\n  expect(true).toEqual(true);\n});"
            ],
            "params": [
                {
                    "name": "desc",
                    "description": "description of this specification",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "defines the preconditions and expectations of the spec",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 476,
            "description": "Creates a <em>disabled</em> Jasmine spec.\n\nA convenience method that allows existing specs to be disabled temporarily during development.",
            "params": [
                {
                    "name": "desc",
                    "description": "description of this specification",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "defines the preconditions and expectations of the spec",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 489,
            "description": "Starts a chain for a Jasmine expectation.\n\nIt is passed an Object that is the actual value and should chain to one of the many\njasmine.Matchers functions.",
            "params": [
                {
                    "name": "actual",
                    "description": "Actual value to test against and expected value",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 502,
            "description": "Defines part of a jasmine spec.  Used in cominbination with waits or waitsFor in asynchrnous specs.",
            "params": [
                {
                    "name": "func",
                    "description": "Function that defines part of a jasmine spec.",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 512,
            "description": "Waits a fixed time period before moving to the next block.",
            "deprecated": true,
            "deprecationMessage": "Use waitsFor() instead",
            "params": [
                {
                    "name": "timeout",
                    "description": "milliseconds to wait",
                    "type": "Number"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 523,
            "description": "Waits for the latchFunction to return true before proceeding to the next block.",
            "params": [
                {
                    "name": "latchFunction",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "optional_timeoutMessage",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "optional_timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 535,
            "description": "A function that is called before each spec in a suite.\n\nUsed for spec setup, including validating assumptions.",
            "params": [
                {
                    "name": "beforeEachFunction",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 547,
            "description": "A function that is called after each spec in a suite.\n\nUsed for restoring any state that is hijacked during spec execution.",
            "params": [
                {
                    "name": "afterEachFunction",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 559,
            "description": "Defines a suite of specifications.\n\nStores the description and all defined specs in the Jasmine environment as one suite of specs. Variables declared\nare accessible by calls to beforeEach, it, and afterEach. Describe blocks can be nested, allowing for specialization\nof setup in some tests.",
            "example": [
                "\n// TODO: a simple suite\n\n// TODO: a simple suite with a nested describe block"
            ],
            "params": [
                {
                    "name": "description",
                    "description": "A string, usually the class under test.",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "function that defines several specs.",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 579,
            "description": "Disables a suite of specifications.  Used to disable some suites in a file, or files, temporarily during development.",
            "params": [
                {
                    "name": "description",
                    "description": "A string, usually the class under test.",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "function that defines several specs.",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 618,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 623,
            "description": "Declare that a child class inherit it's prototype from the parent class.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "childClass",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "parentClass",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 631,
            "access": "private",
            "tagname": "",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 685,
            "description": "Environment for Jasmine",
            "is_constructor": 1,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 723,
            "return": {
                "description": "an object containing jasmine version build info, if set."
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 734,
            "return": {
                "description": "string containing jasmine version build info, if set."
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 751,
            "return": {
                "description": "a sequential integer starting at 0"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 758,
            "return": {
                "description": "a sequential integer starting at 0"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 765,
            "description": "Register a reporter to receive status updates from Jasmine.",
            "params": [
                {
                    "name": "reporter",
                    "description": "An object which will receive status updates.",
                    "type": "jasmine.Reporter"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 954,
            "is_constructor": 1,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 985,
            "description": "Blocks are functions with executable code that make up a spec.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "spec",
                    "description": "",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1007,
            "is_constructor": 1,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1109,
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "actual",
                    "description": ""
                },
                {
                    "name": "spec",
                    "description": "",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1186,
            "description": "toBe: compares the actual to the expected using ===",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1194,
            "description": "toNotBe: compares the actual to the expected using !==",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toBe() instead.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1203,
            "description": "toEqual: compares the actual to the expected using common sense equality. Handles Objects, Arrays, etc.",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1212,
            "description": "toNotEqual: compares the actual to the expected using the ! of jasmine.Matchers.toEqual",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toNotEqual() instead.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1221,
            "description": "Matcher that compares the actual to the expected using a regular expression.  Constructs a RegExp, so takes\na pattern or a String.",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1231,
            "description": "Matcher that compares the actual to the expected using the boolean inverse of jasmine.Matchers.toMatch",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toMatch() instead.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1240,
            "description": "Matcher that compares the actual to jasmine.undefined.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1247,
            "description": "Matcher that compares the actual to jasmine.undefined.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1254,
            "description": "Matcher that compares the actual to null.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1261,
            "description": "Matcher that boolean not-nots the actual.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1269,
            "description": "Matcher that boolean nots the actual.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1277,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was called.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1299,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1302,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was not called.",
            "deprecated": true,
            "deprecationMessage": "Use expect(xxx).not.toHaveBeenCalled() instead",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1326,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was called with a set of parameters.",
            "example": [
                "\n"
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1355,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1358,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1375,
            "description": "Matcher that checks that the expected item is an element in the actual Array.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1384,
            "description": "Matcher that checks that the expected item is NOT an element in the actual Array.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Object"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toNotContain() instead.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1402,
            "description": "Matcher that checks that the expected item is equal to the actual item\nup to a given level of decimal precision (default 2).",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "precision",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1419,
            "description": "Matcher that checks that the expected exception was thrown by the actual.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1480,
            "is_constructor": 1,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1515,
            "description": "Holds results for a set of Jasmine spec. Allows for the results array to hold another jasmine.NestedResults",
            "is_constructor": 1,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1521,
            "description": "The total count of results",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1525,
            "description": "Number of passed results",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1529,
            "description": "Number of failed results",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1533,
            "description": "Was this suite/spec skipped?",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1537,
            "ignore": "",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1543,
            "description": "Roll up the result counts.",
            "params": [
                {
                    "name": "result",
                    "description": ""
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1554,
            "description": "Adds a log message.",
            "params": [
                {
                    "name": "values",
                    "description": "Array of message parts which will be concatenated later."
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1562,
            "description": "Getter for the results: message & results.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1569,
            "description": "Adds a result, tracking counts (total, passed, & failed)",
            "params": [
                {
                    "name": "result",
                    "description": "",
                    "type": "jasmine.ExpectationResult|jasmine.NestedResults"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1589,
            "return": {
                "description": "True if <b>everything</b> below passed",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1595,
            "description": "Base class for pretty printing for expectation results.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1602,
            "description": "Formats a value in a nice, human-readable string.",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1817,
            "description": "Runner",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1894,
            "description": "Internal representation of a Jasmine specification, or test.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "suite",
                    "description": "",
                    "type": "jasmine.Suite"
                },
                {
                    "name": "description",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1933,
            "description": "All parameters are pretty-printed and concatenated together, then written to the spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1956,
            "params": [
                {
                    "name": "result",
                    "description": "",
                    "type": "jasmine.ExpectationResult"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1969,
            "description": "Waits a fixed time period before moving to the next block.",
            "deprecated": true,
            "deprecationMessage": "Use waitsFor() instead",
            "params": [
                {
                    "name": "timeout",
                    "description": "milliseconds to wait",
                    "type": "Number"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1981,
            "description": "Waits for the latchFunction to return true before proceeding to the next block.",
            "params": [
                {
                    "name": "latchFunction",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "optional_timeoutMessage",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "optional_timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 2137,
            "description": "Internal representation of a Jasmine suite.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "description",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "parentSuite",
                    "description": "",
                    "type": "jasmine.Suite"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 2234,
            "description": "A block which waits for some condition to become true, with timeout.",
            "is_constructor": 1,
            "extends": "jasmine.Block",
            "params": [
                {
                    "name": "env",
                    "description": "The Jasmine environment.",
                    "type": "jasmine.Env"
                },
                {
                    "name": "timeout",
                    "description": "The maximum time in milliseconds to wait for the condition to become true.",
                    "type": "Number"
                },
                {
                    "name": "latchFunction",
                    "description": "A function which returns true when the desired condition has been met.",
                    "type": "Function"
                },
                {
                    "name": "message",
                    "description": "The message to display if the desired condition hasn't been met within the given time period.",
                    "type": "String"
                },
                {
                    "name": "spec",
                    "description": "The Jasmine spec.",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 2375,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin/vendor/jsdump.js",
            "line": 1,
            "description": "jsDump\nCopyright (c) 2008 Ariel Flesler - aflesler(at)gmail(dot)com | http://flesler.blogspot.com\nLicensed under BSD (http://www.opensource.org/licenses/bsd-license.php)\nDate: 5/15/2008",
            "projectdescription": "Advanced and extensible data dumping for Javascript.",
            "version": "1.0.0",
            "author": "Ariel Flesler",
            "link": "{http://flesler.blogspot.com/2008/05/jsdump-pretty-dump-of-any-javascript.html}",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.0.0.js",
            "line": 111,
            "description": "if helper",
            "params": [
                {
                    "name": "cond,",
                    "description": "either a string literal value or a dust reference\n              a string literal value, is enclosed in double quotes, e.g. cond=\"2>3\"\n              a dust reference is also enclosed in double quotes, e.g. cond=\"''' > 3\"\n  cond argument should evaluate to a valid javascript expression",
                    "type": "Val"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.0.0.js",
            "line": 138,
            "description": "math helper",
            "params": [
                {
                    "name": "key",
                    "description": "is the value to perform math against"
                },
                {
                    "name": "eq",
                    "description": "is the value to test for equality with key"
                },
                {
                    "name": "method",
                    "description": "is the math method we will employ\nin the absence of an equality test"
                },
                {
                    "name": "operand",
                    "description": "is the second value needed for\noperations like mod, add, subtract, etc."
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.0.0.js",
            "line": 202,
            "description": "select/eq/lt/lte/gt/gte/default helper",
            "params": [
                {
                    "name": "key,",
                    "description": "either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "type",
                    "description": "(optiona), supported types are  number, boolean, string, date, context, defaults to string"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.0.js",
            "line": 163,
            "description": "contextDump helper",
            "params": [
                {
                    "name": "key",
                    "description": "specifies how much to dump.\n\"current\" dumps current context. \"full\" dumps the full context stack."
                },
                {
                    "name": "to",
                    "description": "specifies where to write dump output.\nValues can be \"console\" or \"output\". Default is output."
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.0.js",
            "line": 191,
            "description": "if helper for complex evaluation complex logic expressions.\nNote : #1 if helper fails gracefully when there is no body block nor else block\n       #2 Undefined values and false values in the JSON need to be handled specially with .length check\n          for e.g @if cond=\" '{a}'.length && '{b}'.length\" is advised when there are chances of the a and b been\n          undefined or false in the context\n       #3 Use only when the default ? and ^ dust operators and the select fall short in addressing the given logic,\n          since eval executes in the global scope\n       #4 All dust references are default escaped as they are resolved, hence eval will block malicious scripts in the context\n          Be mindful of evaluating a expression that is passed through the unescape filter -> |s",
            "params": [
                {
                    "name": "cond,",
                    "description": "either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. cond=\"2>3\"\n             a dust reference is also enclosed in double quotes, e.g. cond=\"''' > 3\"\n cond argument should evaluate to a valid javascript expression",
                    "type": "Val"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.0.js",
            "line": 234,
            "description": "math helper",
            "params": [
                {
                    "name": "key",
                    "description": "is the value to perform math against"
                },
                {
                    "name": "method",
                    "description": "is the math method,  is a valid string supported by math helper like mod, add, subtract"
                },
                {
                    "name": "operand",
                    "description": "is the second value needed for operations like mod, add, subtract, etc."
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.0.js",
            "line": 306,
            "description": "select helperworks with one of the eq/gt/gte/lt/lte/default providing the functionality\nof branching conditions",
            "params": [
                {
                    "name": "key,",
                    "description": "( required ) either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.0.js",
            "line": 336,
            "description": "eq helper compares the given key is same as the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "params": [
                {
                    "name": "key,",
                    "description": "The actual key to be compared ( optional when helper used in conjunction with select)\n             either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "value,",
                    "description": "The expected value to compare to, when helper is used standalone or in conjunction with select"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string\nNote : use type=\"number\" when comparing numeric"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.0.js",
            "line": 354,
            "description": "ne helper compares the given key is not the same as the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "params": [
                {
                    "name": "key,",
                    "description": "The actual key to be compared ( optional when helper used in conjunction with select)\n             either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "value,",
                    "description": "The expected value to compare to, when helper is used standalone or in conjunction with select"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string\nNote : use type=\"number\" when comparing numeric"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.0.js",
            "line": 373,
            "description": "lt helper compares the given key is less than the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "params": [
                {
                    "name": "key,",
                    "description": "The actual key to be compared ( optional when helper used in conjunction with select)\n             either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "value,",
                    "description": "The expected value to compare to, when helper is used standalone  or in conjunction with select"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string\nNote : use type=\"number\" when comparing numeric"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.0.js",
            "line": 391,
            "description": "lte helper compares the given key is less or equal to the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "params": [
                {
                    "name": "key,",
                    "description": "The actual key to be compared ( optional when helper used in conjunction with select)\n             either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "value,",
                    "description": "The expected value to compare to, when helper is used standalone or in conjunction with select"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string\nNote : use type=\"number\" when comparing numeric"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.0.js",
            "line": 411,
            "description": "gt helper compares the given key is greater than the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "params": [
                {
                    "name": "key,",
                    "description": "The actual key to be compared ( optional when helper used in conjunction with select)\n             either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "value,",
                    "description": "The expected value to compare to, when helper is used standalone  or in conjunction with select"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string\nNote : use type=\"number\" when comparing numeric"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.0.js",
            "line": 431,
            "description": "gte helper, compares the given key is greater than or equal to the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "params": [
                {
                    "name": "key,",
                    "description": "The actual key to be compared ( optional when helper used in conjunction with select)\n             either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "value,",
                    "description": "The expected value to compare to, when helper is used standalone or in conjunction with select"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string\nNote : use type=\"number\" when comparing numeric"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.0.js",
            "line": 460,
            "description": "size helper prints the size of the given key\nNote : size helper is self closing and does not support bodies",
            "params": [
                {
                    "name": "key,",
                    "description": "the element whose size is returned"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.1.js",
            "line": 159,
            "description": "contextDump helper",
            "params": [
                {
                    "name": "key",
                    "description": "specifies how much to dump.\n\"current\" dumps current context. \"full\" dumps the full context stack."
                },
                {
                    "name": "to",
                    "description": "specifies where to write dump output.\nValues can be \"console\" or \"output\". Default is output."
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.1.js",
            "line": 187,
            "description": "if helper for complex evaluation complex logic expressions.\nNote : #1 if helper fails gracefully when there is no body block nor else block\n       #2 Undefined values and false values in the JSON need to be handled specially with .length check\n          for e.g @if cond=\" '{a}'.length && '{b}'.length\" is advised when there are chances of the a and b been\n          undefined or false in the context\n       #3 Use only when the default ? and ^ dust operators and the select fall short in addressing the given logic,\n          since eval executes in the global scope\n       #4 All dust references are default escaped as they are resolved, hence eval will block malicious scripts in the context\n          Be mindful of evaluating a expression that is passed through the unescape filter -> |s",
            "params": [
                {
                    "name": "cond,",
                    "description": "either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. cond=\"2>3\"\n             a dust reference is also enclosed in double quotes, e.g. cond=\"''' > 3\"\n cond argument should evaluate to a valid javascript expression",
                    "type": "Val"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.1.js",
            "line": 230,
            "description": "math helper",
            "params": [
                {
                    "name": "key",
                    "description": "is the value to perform math against"
                },
                {
                    "name": "method",
                    "description": "is the math method,  is a valid string supported by math helper like mod, add, subtract"
                },
                {
                    "name": "operand",
                    "description": "is the second value needed for operations like mod, add, subtract, etc."
                },
                {
                    "name": "round",
                    "description": "is a flag to assure that an integer is returned"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.1.js",
            "line": 310,
            "description": "select helperworks with one of the eq/gt/gte/lt/lte/default providing the functionality\nof branching conditions",
            "params": [
                {
                    "name": "key,",
                    "description": "( required ) either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.1.js",
            "line": 340,
            "description": "eq helper compares the given key is same as the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "params": [
                {
                    "name": "key,",
                    "description": "The actual key to be compared ( optional when helper used in conjunction with select)\n             either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "value,",
                    "description": "The expected value to compare to, when helper is used standalone or in conjunction with select"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string\nNote : use type=\"number\" when comparing numeric"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.1.js",
            "line": 358,
            "description": "ne helper compares the given key is not the same as the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "params": [
                {
                    "name": "key,",
                    "description": "The actual key to be compared ( optional when helper used in conjunction with select)\n             either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "value,",
                    "description": "The expected value to compare to, when helper is used standalone or in conjunction with select"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string\nNote : use type=\"number\" when comparing numeric"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.1.js",
            "line": 377,
            "description": "lt helper compares the given key is less than the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "params": [
                {
                    "name": "key,",
                    "description": "The actual key to be compared ( optional when helper used in conjunction with select)\n             either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "value,",
                    "description": "The expected value to compare to, when helper is used standalone  or in conjunction with select"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string\nNote : use type=\"number\" when comparing numeric"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.1.js",
            "line": 395,
            "description": "lte helper compares the given key is less or equal to the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "params": [
                {
                    "name": "key,",
                    "description": "The actual key to be compared ( optional when helper used in conjunction with select)\n             either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "value,",
                    "description": "The expected value to compare to, when helper is used standalone or in conjunction with select"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string\nNote : use type=\"number\" when comparing numeric"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.1.js",
            "line": 415,
            "description": "gt helper compares the given key is greater than the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "params": [
                {
                    "name": "key,",
                    "description": "The actual key to be compared ( optional when helper used in conjunction with select)\n             either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "value,",
                    "description": "The expected value to compare to, when helper is used standalone  or in conjunction with select"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string\nNote : use type=\"number\" when comparing numeric"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.1.js",
            "line": 435,
            "description": "gte helper, compares the given key is greater than or equal to the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "params": [
                {
                    "name": "key,",
                    "description": "The actual key to be compared ( optional when helper used in conjunction with select)\n             either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "value,",
                    "description": "The expected value to compare to, when helper is used standalone or in conjunction with select"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string\nNote : use type=\"number\" when comparing numeric"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.1.js",
            "line": 464,
            "description": "size helper prints the size of the given key\nNote : size helper is self closing and does not support bodies",
            "params": [
                {
                    "name": "key,",
                    "description": "the element whose size is returned"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.2.js",
            "line": 162,
            "description": "contextDump helper",
            "params": [
                {
                    "name": "key",
                    "description": "specifies how much to dump.\n\"current\" dumps current context. \"full\" dumps the full context stack."
                },
                {
                    "name": "to",
                    "description": "specifies where to write dump output.\nValues can be \"console\" or \"output\". Default is output."
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.2.js",
            "line": 190,
            "description": "if helper for complex evaluation complex logic expressions.\nNote : #1 if helper fails gracefully when there is no body block nor else block\n       #2 Undefined values and false values in the JSON need to be handled specially with .length check\n          for e.g @if cond=\" '{a}'.length && '{b}'.length\" is advised when there are chances of the a and b been\n          undefined or false in the context\n       #3 Use only when the default ? and ^ dust operators and the select fall short in addressing the given logic,\n          since eval executes in the global scope\n       #4 All dust references are default escaped as they are resolved, hence eval will block malicious scripts in the context\n          Be mindful of evaluating a expression that is passed through the unescape filter -> |s",
            "params": [
                {
                    "name": "cond,",
                    "description": "either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. cond=\"2>3\"\n             a dust reference is also enclosed in double quotes, e.g. cond=\"''' > 3\"\n cond argument should evaluate to a valid javascript expression",
                    "type": "Val"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.2.js",
            "line": 233,
            "description": "math helper",
            "params": [
                {
                    "name": "key",
                    "description": "is the value to perform math against"
                },
                {
                    "name": "method",
                    "description": "is the math method,  is a valid string supported by math helper like mod, add, subtract"
                },
                {
                    "name": "operand",
                    "description": "is the second value needed for operations like mod, add, subtract, etc."
                },
                {
                    "name": "round",
                    "description": "is a flag to assure that an integer is returned"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.2.js",
            "line": 313,
            "description": "select helper works with one of the eq/ne/gt/gte/lt/lte/default providing the functionality\nof branching conditions",
            "params": [
                {
                    "name": "key,",
                    "description": "( required ) either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.2.js",
            "line": 343,
            "description": "eq helper compares the given key is same as the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "params": [
                {
                    "name": "key,",
                    "description": "The actual key to be compared ( optional when helper used in conjunction with select)\n             either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "value,",
                    "description": "The expected value to compare to, when helper is used standalone or in conjunction with select"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string\nNote : use type=\"number\" when comparing numeric"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.2.js",
            "line": 361,
            "description": "ne helper compares the given key is not the same as the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "params": [
                {
                    "name": "key,",
                    "description": "The actual key to be compared ( optional when helper used in conjunction with select)\n             either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "value,",
                    "description": "The expected value to compare to, when helper is used standalone or in conjunction with select"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string\nNote : use type=\"number\" when comparing numeric"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.2.js",
            "line": 380,
            "description": "lt helper compares the given key is less than the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "params": [
                {
                    "name": "key,",
                    "description": "The actual key to be compared ( optional when helper used in conjunction with select)\n             either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "value,",
                    "description": "The expected value to compare to, when helper is used standalone  or in conjunction with select"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string\nNote : use type=\"number\" when comparing numeric"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.2.js",
            "line": 398,
            "description": "lte helper compares the given key is less or equal to the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "params": [
                {
                    "name": "key,",
                    "description": "The actual key to be compared ( optional when helper used in conjunction with select)\n             either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "value,",
                    "description": "The expected value to compare to, when helper is used standalone or in conjunction with select"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string\nNote : use type=\"number\" when comparing numeric"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.2.js",
            "line": 418,
            "description": "gt helper compares the given key is greater than the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "params": [
                {
                    "name": "key,",
                    "description": "The actual key to be compared ( optional when helper used in conjunction with select)\n             either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "value,",
                    "description": "The expected value to compare to, when helper is used standalone  or in conjunction with select"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string\nNote : use type=\"number\" when comparing numeric"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.2.js",
            "line": 438,
            "description": "gte helper, compares the given key is greater than or equal to the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "params": [
                {
                    "name": "key,",
                    "description": "The actual key to be compared ( optional when helper used in conjunction with select)\n             either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "value,",
                    "description": "The expected value to compare to, when helper is used standalone or in conjunction with select"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string\nNote : use type=\"number\" when comparing numeric"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.2.js",
            "line": 467,
            "description": "size helper prints the size of the given key\nNote : size helper is self closing and does not support bodies",
            "params": [
                {
                    "name": "key,",
                    "description": "the element whose size is returned"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/lib/dust-helpers.js",
            "line": 162,
            "description": "contextDump helper",
            "params": [
                {
                    "name": "key",
                    "description": "specifies how much to dump.\n\"current\" dumps current context. \"full\" dumps the full context stack."
                },
                {
                    "name": "to",
                    "description": "specifies where to write dump output.\nValues can be \"console\" or \"output\". Default is output."
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/lib/dust-helpers.js",
            "line": 190,
            "description": "if helper for complex evaluation complex logic expressions.\nNote : #1 if helper fails gracefully when there is no body block nor else block\n       #2 Undefined values and false values in the JSON need to be handled specially with .length check\n          for e.g @if cond=\" '{a}'.length && '{b}'.length\" is advised when there are chances of the a and b been\n          undefined or false in the context\n       #3 Use only when the default ? and ^ dust operators and the select fall short in addressing the given logic,\n          since eval executes in the global scope\n       #4 All dust references are default escaped as they are resolved, hence eval will block malicious scripts in the context\n          Be mindful of evaluating a expression that is passed through the unescape filter -> |s",
            "params": [
                {
                    "name": "cond,",
                    "description": "either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. cond=\"2>3\"\n             a dust reference is also enclosed in double quotes, e.g. cond=\"''' > 3\"\n cond argument should evaluate to a valid javascript expression",
                    "type": "Val"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/lib/dust-helpers.js",
            "line": 233,
            "description": "math helper",
            "params": [
                {
                    "name": "key",
                    "description": "is the value to perform math against"
                },
                {
                    "name": "method",
                    "description": "is the math method,  is a valid string supported by math helper like mod, add, subtract"
                },
                {
                    "name": "operand",
                    "description": "is the second value needed for operations like mod, add, subtract, etc."
                },
                {
                    "name": "round",
                    "description": "is a flag to assure that an integer is returned"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/lib/dust-helpers.js",
            "line": 313,
            "description": "select helper works with one of the eq/ne/gt/gte/lt/lte/default providing the functionality\nof branching conditions",
            "params": [
                {
                    "name": "key,",
                    "description": "( required ) either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/lib/dust-helpers.js",
            "line": 343,
            "description": "eq helper compares the given key is same as the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "params": [
                {
                    "name": "key,",
                    "description": "The actual key to be compared ( optional when helper used in conjunction with select)\n             either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "value,",
                    "description": "The expected value to compare to, when helper is used standalone or in conjunction with select"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string\nNote : use type=\"number\" when comparing numeric"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/lib/dust-helpers.js",
            "line": 361,
            "description": "ne helper compares the given key is not the same as the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "params": [
                {
                    "name": "key,",
                    "description": "The actual key to be compared ( optional when helper used in conjunction with select)\n             either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "value,",
                    "description": "The expected value to compare to, when helper is used standalone or in conjunction with select"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string\nNote : use type=\"number\" when comparing numeric"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/lib/dust-helpers.js",
            "line": 380,
            "description": "lt helper compares the given key is less than the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "params": [
                {
                    "name": "key,",
                    "description": "The actual key to be compared ( optional when helper used in conjunction with select)\n             either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "value,",
                    "description": "The expected value to compare to, when helper is used standalone  or in conjunction with select"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string\nNote : use type=\"number\" when comparing numeric"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/lib/dust-helpers.js",
            "line": 398,
            "description": "lte helper compares the given key is less or equal to the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "params": [
                {
                    "name": "key,",
                    "description": "The actual key to be compared ( optional when helper used in conjunction with select)\n             either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "value,",
                    "description": "The expected value to compare to, when helper is used standalone or in conjunction with select"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string\nNote : use type=\"number\" when comparing numeric"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/lib/dust-helpers.js",
            "line": 418,
            "description": "gt helper compares the given key is greater than the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "params": [
                {
                    "name": "key,",
                    "description": "The actual key to be compared ( optional when helper used in conjunction with select)\n             either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "value,",
                    "description": "The expected value to compare to, when helper is used standalone  or in conjunction with select"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string\nNote : use type=\"number\" when comparing numeric"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/lib/dust-helpers.js",
            "line": 438,
            "description": "gte helper, compares the given key is greater than or equal to the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "params": [
                {
                    "name": "key,",
                    "description": "The actual key to be compared ( optional when helper used in conjunction with select)\n             either a string literal value or a dust reference\n             a string literal value, is enclosed in double quotes, e.g. key=\"foo\"\n             a dust reference may or may not be enclosed in double quotes, e.g. key=\"\" and key=val are both valid",
                    "type": "Val"
                },
                {
                    "name": "value,",
                    "description": "The expected value to compare to, when helper is used standalone or in conjunction with select"
                },
                {
                    "name": "type",
                    "description": "(optional), supported types are  number, boolean, string, date, context, defaults to string\nNote : use type=\"number\" when comparing numeric"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/lib/dust-helpers.js",
            "line": 467,
            "description": "size helper prints the size of the given key\nNote : size helper is self closing and does not support bodies",
            "params": [
                {
                    "name": "key,",
                    "description": "the element whose size is returned"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/dust_files/jsdump.js",
            "line": 1,
            "description": "jsDump\nCopyright (c) 2008 Ariel Flesler - aflesler(at)gmail(dot)com | http://flesler.blogspot.com\nLicensed under BSD (http://www.opensource.org/licenses/bsd-license.php)\nDate: 5/15/2008",
            "projectdescription": "Advanced and extensible data dumping for Javascript.",
            "version": "1.0.0",
            "author": "Ariel Flesler",
            "link": "{http://flesler.blogspot.com/2008/05/jsdump-pretty-dump-of-any-javascript.html}",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 3,
            "description": "Top level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 10,
            "access": "private",
            "tagname": "",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 17,
            "description": "Use <code>jasmine.undefined</code> instead of <code>undefined</code>, since <code>undefined</code> is just\na plain old variable and may be redefined by somebody else.",
            "access": "private",
            "tagname": "",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 25,
            "description": "Show diagnostic messages in the console if set to true",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 31,
            "description": "Default interval in milliseconds for event loop yields (e.g. to allow network activity or to refresh the screen with the HTML-based runner). Small values here may result in slow test running. Zero means no updates until all tests have completed.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 37,
            "description": "Default timeout interval in milliseconds for waitsFor() blocks.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 50,
            "description": "Allows for bound functions to be compared.  Internal use only.",
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "base",
                    "description": "bound 'this' for the function",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "function to find",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 114,
            "description": "Getter for the Jasmine environment. Ensures one gets created",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 122,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 132,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 142,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 152,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "typeName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 163,
            "description": "Pretty printer for expecations.  Takes any object and turns it into a human-readable string.",
            "params": [
                {
                    "name": "value",
                    "description": "an object to be outputted",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 175,
            "description": "Returns true if the object is a DOM Node.",
            "params": [
                {
                    "name": "obj",
                    "description": "object to check",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 185,
            "description": "Returns a matchable 'generic' object of the class type.  For use in expecations of type when values don't matter.",
            "example": [
                "\n// don't care about which function is passed in, as long as it's a function\nexpect(mySpy).toHaveBeenCalledWith(jasmine.any(Function));"
            ],
            "params": [
                {
                    "name": "clazz",
                    "description": "",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "matchable object of the type clazz"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 199,
            "description": "Jasmine Spies are test doubles that can act as stubs, spies, fakes or when used in an expecation, mocks.\n\nSpies should be created in test setup, before expectations.  They can then be checked, using the standard Jasmine\nexpectation syntax. Spies can be checked if they were called or not and what the calling params were.\n\nA Spy has the following fields: wasCalled, callCount, mostRecentCall, and argsForCall (see docs).\n\nSpies are torn down at the end of every spec.\n\nNote: Do <b>not</b> call new jasmine.Spy() directly - a spy must be created using spyOn, jasmine.createSpy or jasmine.createSpyObj.",
            "example": [
                "\n// a stub\nvar myStub = jasmine.createSpy('myStub');  // can be used anywhere\n\n// spy example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\n\n// actual foo.not will not be called, execution stops\nspyOn(foo, 'not');\n\n// foo.not spied upon, execution will continue to implementation\nspyOn(foo, 'not').andCallThrough();\n\n// fake example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\n\n// foo.not(val) will return val\nspyOn(foo, 'not').andCallFake(function(value) {return value;});\n\n// mock example\nfoo.not(7 == 7);\nexpect(foo.not).toHaveBeenCalled();\nexpect(foo.not).toHaveBeenCalledWith(true);"
            ],
            "is_constructor": 1,
            "see": [
                "spyOn",
                "jasmine.createSpy",
                "jasmine.createSpyObj"
            ],
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 244,
            "description": "The name of the spy, if provided.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 248,
            "description": "Is this Object a spy?",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 252,
            "description": "The actual function this spy stubs.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 257,
            "description": "Tracking of the most recent call to the spy.",
            "example": [
                "\nvar mySpy = jasmine.createSpy('foo');\nmySpy(1, 2);\nmySpy.mostRecentCall.args = [1, 2];"
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 266,
            "description": "Holds arguments for each call to the spy, indexed by call count",
            "example": [
                "\nvar mySpy = jasmine.createSpy('foo');\nmySpy(1, 2);\nmySpy(7, 8);\nmySpy.mostRecentCall.args = [7, 8];\nmySpy.argsForCall[0] = [1, 2];\nmySpy.argsForCall[1] = [7, 8];"
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 280,
            "description": "Tells a spy to call through to the actual implemenatation.",
            "example": [
                "\nvar foo = {\n  bar: function() { // do some stuff }\n}\n\n// defining a spy on an existing property: foo.bar\nspyOn(foo, 'bar').andCallThrough();"
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 296,
            "description": "For setting the return value of a spy.",
            "example": [
                "\n// defining a spy from scratch: foo() returns 'baz'\nvar foo = jasmine.createSpy('spy on foo').andReturn('baz');\n\n// defining a spy on an existing property: foo.bar() returns 'baz'\nspyOn(foo, 'bar').andReturn('baz');"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 315,
            "description": "For throwing an exception when a spy is called.",
            "example": [
                "\n// defining a spy from scratch: foo() throws an exception w/ message 'ouch'\nvar foo = jasmine.createSpy('spy on foo').andThrow('baz');\n\n// defining a spy on an existing property: foo.bar() throws an exception w/ message 'ouch'\nspyOn(foo, 'bar').andThrow('baz');"
            ],
            "params": [
                {
                    "name": "exceptionMsg",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 334,
            "description": "Calls an alternate implementation when a spy is called.",
            "example": [
                "\nvar baz = function() {\n  // do some stuff, return something\n}\n// defining a spy from scratch: foo() calls the function baz\nvar foo = jasmine.createSpy('spy on foo').andCall(baz);\n\n// defining a spy on an existing property: foo.bar() calls an anonymnous function\nspyOn(foo, 'bar').andCall(function() { return 'baz';} );"
            ],
            "params": [
                {
                    "name": "fakeFunc",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 354,
            "description": "Resets all of a spy's the tracking variables so that it can be used again.",
            "example": [
                "\nspyOn(foo, 'bar');\n\nfoo.bar();\n\nexpect(foo.bar.callCount).toEqual(1);\n\nfoo.bar.reset();\n\nexpect(foo.bar.callCount).toEqual(0);"
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 400,
            "description": "Determines whether an object is a spy.",
            "params": [
                {
                    "name": "putativeSpy",
                    "description": "",
                    "type": "jasmine.Spy|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 410,
            "description": "Creates a more complicated spy: an Object that has every property a function that is a spy.  Used for stubbing something\nlarge in one call.",
            "params": [
                {
                    "name": "baseName",
                    "description": "name of spy class",
                    "type": "String"
                },
                {
                    "name": "methodNames",
                    "description": "array of names of methods to make spies",
                    "type": "Array"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 428,
            "description": "All parameters are pretty-printed and concatenated together, then written to the current spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 438,
            "description": "Function that installs a spy on an existing object's method name.  Used within a Spec to create a spy.",
            "example": [
                "\n// spy example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\nspyOn(foo, 'not'); // actual foo.not will not be called, execution stops"
            ],
            "see": [
                "jasmine.createSpy"
            ],
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "methodName",
                    "description": ""
                }
            ],
            "return": {
                "description": "a Jasmine spy that can be chained with all spy methods"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 458,
            "description": "Creates a Jasmine spec that will be added to the current suite.\n\n// TODO: pending tests",
            "example": [
                "\nit('should be true', function() {\n  expect(true).toEqual(true);\n});"
            ],
            "params": [
                {
                    "name": "desc",
                    "description": "description of this specification",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "defines the preconditions and expectations of the spec",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 476,
            "description": "Creates a <em>disabled</em> Jasmine spec.\n\nA convenience method that allows existing specs to be disabled temporarily during development.",
            "params": [
                {
                    "name": "desc",
                    "description": "description of this specification",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "defines the preconditions and expectations of the spec",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 489,
            "description": "Starts a chain for a Jasmine expectation.\n\nIt is passed an Object that is the actual value and should chain to one of the many\njasmine.Matchers functions.",
            "params": [
                {
                    "name": "actual",
                    "description": "Actual value to test against and expected value",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 502,
            "description": "Defines part of a jasmine spec.  Used in cominbination with waits or waitsFor in asynchrnous specs.",
            "params": [
                {
                    "name": "func",
                    "description": "Function that defines part of a jasmine spec.",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 512,
            "description": "Waits a fixed time period before moving to the next block.",
            "deprecated": true,
            "deprecationMessage": "Use waitsFor() instead",
            "params": [
                {
                    "name": "timeout",
                    "description": "milliseconds to wait",
                    "type": "Number"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 523,
            "description": "Waits for the latchFunction to return true before proceeding to the next block.",
            "params": [
                {
                    "name": "latchFunction",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "optional_timeoutMessage",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "optional_timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 535,
            "description": "A function that is called before each spec in a suite.\n\nUsed for spec setup, including validating assumptions.",
            "params": [
                {
                    "name": "beforeEachFunction",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 547,
            "description": "A function that is called after each spec in a suite.\n\nUsed for restoring any state that is hijacked during spec execution.",
            "params": [
                {
                    "name": "afterEachFunction",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 559,
            "description": "Defines a suite of specifications.\n\nStores the description and all defined specs in the Jasmine environment as one suite of specs. Variables declared\nare accessible by calls to beforeEach, it, and afterEach. Describe blocks can be nested, allowing for specialization\nof setup in some tests.",
            "example": [
                "\n// TODO: a simple suite\n\n// TODO: a simple suite with a nested describe block"
            ],
            "params": [
                {
                    "name": "description",
                    "description": "A string, usually the class under test.",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "function that defines several specs.",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 579,
            "description": "Disables a suite of specifications.  Used to disable some suites in a file, or files, temporarily during development.",
            "params": [
                {
                    "name": "description",
                    "description": "A string, usually the class under test.",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "function that defines several specs.",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 618,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 623,
            "description": "Declare that a child class inherit it's prototype from the parent class.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "childClass",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "parentClass",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 631,
            "access": "private",
            "tagname": "",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 685,
            "description": "Environment for Jasmine",
            "is_constructor": 1,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 723,
            "return": {
                "description": "an object containing jasmine version build info, if set."
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 734,
            "return": {
                "description": "string containing jasmine version build info, if set."
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 751,
            "return": {
                "description": "a sequential integer starting at 0"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 758,
            "return": {
                "description": "a sequential integer starting at 0"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 765,
            "description": "Register a reporter to receive status updates from Jasmine.",
            "params": [
                {
                    "name": "reporter",
                    "description": "An object which will receive status updates.",
                    "type": "jasmine.Reporter"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 954,
            "is_constructor": 1,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 985,
            "description": "Blocks are functions with executable code that make up a spec.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "spec",
                    "description": "",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1007,
            "is_constructor": 1,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1109,
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "actual",
                    "description": ""
                },
                {
                    "name": "spec",
                    "description": "",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1186,
            "description": "toBe: compares the actual to the expected using ===",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1194,
            "description": "toNotBe: compares the actual to the expected using !==",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toBe() instead.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1203,
            "description": "toEqual: compares the actual to the expected using common sense equality. Handles Objects, Arrays, etc.",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1212,
            "description": "toNotEqual: compares the actual to the expected using the ! of jasmine.Matchers.toEqual",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toNotEqual() instead.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1221,
            "description": "Matcher that compares the actual to the expected using a regular expression.  Constructs a RegExp, so takes\na pattern or a String.",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1231,
            "description": "Matcher that compares the actual to the expected using the boolean inverse of jasmine.Matchers.toMatch",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toMatch() instead.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1240,
            "description": "Matcher that compares the actual to jasmine.undefined.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1247,
            "description": "Matcher that compares the actual to jasmine.undefined.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1254,
            "description": "Matcher that compares the actual to null.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1261,
            "description": "Matcher that boolean not-nots the actual.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1269,
            "description": "Matcher that boolean nots the actual.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1277,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was called.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1299,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1302,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was not called.",
            "deprecated": true,
            "deprecationMessage": "Use expect(xxx).not.toHaveBeenCalled() instead",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1326,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was called with a set of parameters.",
            "example": [
                "\n"
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1355,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1358,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1375,
            "description": "Matcher that checks that the expected item is an element in the actual Array.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1384,
            "description": "Matcher that checks that the expected item is NOT an element in the actual Array.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Object"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toNotContain() instead.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1402,
            "description": "Matcher that checks that the expected item is equal to the actual item\nup to a given level of decimal precision (default 2).",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "precision",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1419,
            "description": "Matcher that checks that the expected exception was thrown by the actual.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1480,
            "is_constructor": 1,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1515,
            "description": "Holds results for a set of Jasmine spec. Allows for the results array to hold another jasmine.NestedResults",
            "is_constructor": 1,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1521,
            "description": "The total count of results",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1525,
            "description": "Number of passed results",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1529,
            "description": "Number of failed results",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1533,
            "description": "Was this suite/spec skipped?",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1537,
            "ignore": "",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1543,
            "description": "Roll up the result counts.",
            "params": [
                {
                    "name": "result",
                    "description": ""
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1554,
            "description": "Adds a log message.",
            "params": [
                {
                    "name": "values",
                    "description": "Array of message parts which will be concatenated later."
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1562,
            "description": "Getter for the results: message & results.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1569,
            "description": "Adds a result, tracking counts (total, passed, & failed)",
            "params": [
                {
                    "name": "result",
                    "description": "",
                    "type": "jasmine.ExpectationResult|jasmine.NestedResults"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1589,
            "return": {
                "description": "True if <b>everything</b> below passed",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1595,
            "description": "Base class for pretty printing for expectation results.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1602,
            "description": "Formats a value in a nice, human-readable string.",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1817,
            "description": "Runner",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1894,
            "description": "Internal representation of a Jasmine specification, or test.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "suite",
                    "description": "",
                    "type": "jasmine.Suite"
                },
                {
                    "name": "description",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1933,
            "description": "All parameters are pretty-printed and concatenated together, then written to the spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1956,
            "params": [
                {
                    "name": "result",
                    "description": "",
                    "type": "jasmine.ExpectationResult"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1969,
            "description": "Waits a fixed time period before moving to the next block.",
            "deprecated": true,
            "deprecationMessage": "Use waitsFor() instead",
            "params": [
                {
                    "name": "timeout",
                    "description": "milliseconds to wait",
                    "type": "Number"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 1981,
            "description": "Waits for the latchFunction to return true before proceeding to the next block.",
            "params": [
                {
                    "name": "latchFunction",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "optional_timeoutMessage",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "optional_timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 2137,
            "description": "Internal representation of a Jasmine suite.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "description",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "parentSuite",
                    "description": "",
                    "type": "jasmine.Suite"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 2234,
            "description": "A block which waits for some condition to become true, with timeout.",
            "is_constructor": 1,
            "extends": "jasmine.Block",
            "params": [
                {
                    "name": "env",
                    "description": "The Jasmine environment.",
                    "type": "jasmine.Env"
                },
                {
                    "name": "timeout",
                    "description": "The maximum time in milliseconds to wait for the condition to become true.",
                    "type": "Number"
                },
                {
                    "name": "latchFunction",
                    "description": "A function which returns true when the desired condition has been met.",
                    "type": "Function"
                },
                {
                    "name": "message",
                    "description": "The message to display if the desired condition hasn't been met within the given time period.",
                    "type": "String"
                },
                {
                    "name": "spec",
                    "description": "The Jasmine spec.",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js",
            "line": 2375,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 3,
            "description": "Top level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 10,
            "access": "private",
            "tagname": "",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 17,
            "description": "Use <code>jasmine.undefined</code> instead of <code>undefined</code>, since <code>undefined</code> is just\na plain old variable and may be redefined by somebody else.",
            "access": "private",
            "tagname": "",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 25,
            "description": "Show diagnostic messages in the console if set to true",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 31,
            "description": "Default interval in milliseconds for event loop yields (e.g. to allow network activity or to refresh the screen with the HTML-based runner). Small values here may result in slow test running. Zero means no updates until all tests have completed.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 37,
            "description": "Default timeout interval in milliseconds for waitsFor() blocks.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 50,
            "description": "Allows for bound functions to be compared.  Internal use only.",
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "base",
                    "description": "bound 'this' for the function",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "function to find",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 114,
            "description": "Getter for the Jasmine environment. Ensures one gets created",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 122,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 132,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 142,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 152,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "typeName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 163,
            "description": "Pretty printer for expecations.  Takes any object and turns it into a human-readable string.",
            "params": [
                {
                    "name": "value",
                    "description": "an object to be outputted",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 175,
            "description": "Returns true if the object is a DOM Node.",
            "params": [
                {
                    "name": "obj",
                    "description": "object to check",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 185,
            "description": "Returns a matchable 'generic' object of the class type.  For use in expecations of type when values don't matter.",
            "example": [
                "\n// don't care about which function is passed in, as long as it's a function\nexpect(mySpy).toHaveBeenCalledWith(jasmine.any(Function));"
            ],
            "params": [
                {
                    "name": "clazz",
                    "description": "",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "matchable object of the type clazz"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 199,
            "description": "Jasmine Spies are test doubles that can act as stubs, spies, fakes or when used in an expecation, mocks.\n\nSpies should be created in test setup, before expectations.  They can then be checked, using the standard Jasmine\nexpectation syntax. Spies can be checked if they were called or not and what the calling params were.\n\nA Spy has the following fields: wasCalled, callCount, mostRecentCall, and argsForCall (see docs).\n\nSpies are torn down at the end of every spec.\n\nNote: Do <b>not</b> call new jasmine.Spy() directly - a spy must be created using spyOn, jasmine.createSpy or jasmine.createSpyObj.",
            "example": [
                "\n// a stub\nvar myStub = jasmine.createSpy('myStub');  // can be used anywhere\n\n// spy example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\n\n// actual foo.not will not be called, execution stops\nspyOn(foo, 'not');\n\n// foo.not spied upon, execution will continue to implementation\nspyOn(foo, 'not').andCallThrough();\n\n// fake example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\n\n// foo.not(val) will return val\nspyOn(foo, 'not').andCallFake(function(value) {return value;});\n\n// mock example\nfoo.not(7 == 7);\nexpect(foo.not).toHaveBeenCalled();\nexpect(foo.not).toHaveBeenCalledWith(true);"
            ],
            "is_constructor": 1,
            "see": [
                "spyOn",
                "jasmine.createSpy",
                "jasmine.createSpyObj"
            ],
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 244,
            "description": "The name of the spy, if provided.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 248,
            "description": "Is this Object a spy?",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 252,
            "description": "The actual function this spy stubs.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 257,
            "description": "Tracking of the most recent call to the spy.",
            "example": [
                "\nvar mySpy = jasmine.createSpy('foo');\nmySpy(1, 2);\nmySpy.mostRecentCall.args = [1, 2];"
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 266,
            "description": "Holds arguments for each call to the spy, indexed by call count",
            "example": [
                "\nvar mySpy = jasmine.createSpy('foo');\nmySpy(1, 2);\nmySpy(7, 8);\nmySpy.mostRecentCall.args = [7, 8];\nmySpy.argsForCall[0] = [1, 2];\nmySpy.argsForCall[1] = [7, 8];"
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 280,
            "description": "Tells a spy to call through to the actual implemenatation.",
            "example": [
                "\nvar foo = {\n  bar: function() { // do some stuff }\n}\n\n// defining a spy on an existing property: foo.bar\nspyOn(foo, 'bar').andCallThrough();"
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 296,
            "description": "For setting the return value of a spy.",
            "example": [
                "\n// defining a spy from scratch: foo() returns 'baz'\nvar foo = jasmine.createSpy('spy on foo').andReturn('baz');\n\n// defining a spy on an existing property: foo.bar() returns 'baz'\nspyOn(foo, 'bar').andReturn('baz');"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 315,
            "description": "For throwing an exception when a spy is called.",
            "example": [
                "\n// defining a spy from scratch: foo() throws an exception w/ message 'ouch'\nvar foo = jasmine.createSpy('spy on foo').andThrow('baz');\n\n// defining a spy on an existing property: foo.bar() throws an exception w/ message 'ouch'\nspyOn(foo, 'bar').andThrow('baz');"
            ],
            "params": [
                {
                    "name": "exceptionMsg",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 334,
            "description": "Calls an alternate implementation when a spy is called.",
            "example": [
                "\nvar baz = function() {\n  // do some stuff, return something\n}\n// defining a spy from scratch: foo() calls the function baz\nvar foo = jasmine.createSpy('spy on foo').andCall(baz);\n\n// defining a spy on an existing property: foo.bar() calls an anonymnous function\nspyOn(foo, 'bar').andCall(function() { return 'baz';} );"
            ],
            "params": [
                {
                    "name": "fakeFunc",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 354,
            "description": "Resets all of a spy's the tracking variables so that it can be used again.",
            "example": [
                "\nspyOn(foo, 'bar');\n\nfoo.bar();\n\nexpect(foo.bar.callCount).toEqual(1);\n\nfoo.bar.reset();\n\nexpect(foo.bar.callCount).toEqual(0);"
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 400,
            "description": "Determines whether an object is a spy.",
            "params": [
                {
                    "name": "putativeSpy",
                    "description": "",
                    "type": "jasmine.Spy|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 410,
            "description": "Creates a more complicated spy: an Object that has every property a function that is a spy.  Used for stubbing something\nlarge in one call.",
            "params": [
                {
                    "name": "baseName",
                    "description": "name of spy class",
                    "type": "String"
                },
                {
                    "name": "methodNames",
                    "description": "array of names of methods to make spies",
                    "type": "Array"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 428,
            "description": "All parameters are pretty-printed and concatenated together, then written to the current spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 438,
            "description": "Function that installs a spy on an existing object's method name.  Used within a Spec to create a spy.",
            "example": [
                "\n// spy example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\nspyOn(foo, 'not'); // actual foo.not will not be called, execution stops"
            ],
            "see": [
                "jasmine.createSpy"
            ],
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "methodName",
                    "description": ""
                }
            ],
            "return": {
                "description": "a Jasmine spy that can be chained with all spy methods"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 458,
            "description": "Creates a Jasmine spec that will be added to the current suite.\n\n// TODO: pending tests",
            "example": [
                "\nit('should be true', function() {\n  expect(true).toEqual(true);\n});"
            ],
            "params": [
                {
                    "name": "desc",
                    "description": "description of this specification",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "defines the preconditions and expectations of the spec",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 476,
            "description": "Creates a <em>disabled</em> Jasmine spec.\n\nA convenience method that allows existing specs to be disabled temporarily during development.",
            "params": [
                {
                    "name": "desc",
                    "description": "description of this specification",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "defines the preconditions and expectations of the spec",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 489,
            "description": "Starts a chain for a Jasmine expectation.\n\nIt is passed an Object that is the actual value and should chain to one of the many\njasmine.Matchers functions.",
            "params": [
                {
                    "name": "actual",
                    "description": "Actual value to test against and expected value",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 502,
            "description": "Defines part of a jasmine spec.  Used in cominbination with waits or waitsFor in asynchrnous specs.",
            "params": [
                {
                    "name": "func",
                    "description": "Function that defines part of a jasmine spec.",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 512,
            "description": "Waits a fixed time period before moving to the next block.",
            "deprecated": true,
            "deprecationMessage": "Use waitsFor() instead",
            "params": [
                {
                    "name": "timeout",
                    "description": "milliseconds to wait",
                    "type": "Number"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 523,
            "description": "Waits for the latchFunction to return true before proceeding to the next block.",
            "params": [
                {
                    "name": "latchFunction",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "optional_timeoutMessage",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "optional_timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 535,
            "description": "A function that is called before each spec in a suite.\n\nUsed for spec setup, including validating assumptions.",
            "params": [
                {
                    "name": "beforeEachFunction",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 547,
            "description": "A function that is called after each spec in a suite.\n\nUsed for restoring any state that is hijacked during spec execution.",
            "params": [
                {
                    "name": "afterEachFunction",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 559,
            "description": "Defines a suite of specifications.\n\nStores the description and all defined specs in the Jasmine environment as one suite of specs. Variables declared\nare accessible by calls to beforeEach, it, and afterEach. Describe blocks can be nested, allowing for specialization\nof setup in some tests.",
            "example": [
                "\n// TODO: a simple suite\n\n// TODO: a simple suite with a nested describe block"
            ],
            "params": [
                {
                    "name": "description",
                    "description": "A string, usually the class under test.",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "function that defines several specs.",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 579,
            "description": "Disables a suite of specifications.  Used to disable some suites in a file, or files, temporarily during development.",
            "params": [
                {
                    "name": "description",
                    "description": "A string, usually the class under test.",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "function that defines several specs.",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 618,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 623,
            "description": "Declare that a child class inherit it's prototype from the parent class.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "childClass",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "parentClass",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 631,
            "access": "private",
            "tagname": "",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 685,
            "description": "Environment for Jasmine",
            "is_constructor": 1,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 723,
            "return": {
                "description": "an object containing jasmine version build info, if set."
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 734,
            "return": {
                "description": "string containing jasmine version build info, if set."
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 751,
            "return": {
                "description": "a sequential integer starting at 0"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 758,
            "return": {
                "description": "a sequential integer starting at 0"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 765,
            "description": "Register a reporter to receive status updates from Jasmine.",
            "params": [
                {
                    "name": "reporter",
                    "description": "An object which will receive status updates.",
                    "type": "jasmine.Reporter"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 954,
            "is_constructor": 1,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 985,
            "description": "Blocks are functions with executable code that make up a spec.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "spec",
                    "description": "",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1007,
            "is_constructor": 1,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1109,
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "actual",
                    "description": ""
                },
                {
                    "name": "spec",
                    "description": "",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1186,
            "description": "toBe: compares the actual to the expected using ===",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1194,
            "description": "toNotBe: compares the actual to the expected using !==",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toBe() instead.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1203,
            "description": "toEqual: compares the actual to the expected using common sense equality. Handles Objects, Arrays, etc.",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1212,
            "description": "toNotEqual: compares the actual to the expected using the ! of jasmine.Matchers.toEqual",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toNotEqual() instead.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1221,
            "description": "Matcher that compares the actual to the expected using a regular expression.  Constructs a RegExp, so takes\na pattern or a String.",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1231,
            "description": "Matcher that compares the actual to the expected using the boolean inverse of jasmine.Matchers.toMatch",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toMatch() instead.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1240,
            "description": "Matcher that compares the actual to jasmine.undefined.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1247,
            "description": "Matcher that compares the actual to jasmine.undefined.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1254,
            "description": "Matcher that compares the actual to null.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1261,
            "description": "Matcher that boolean not-nots the actual.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1269,
            "description": "Matcher that boolean nots the actual.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1277,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was called.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1299,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1302,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was not called.",
            "deprecated": true,
            "deprecationMessage": "Use expect(xxx).not.toHaveBeenCalled() instead",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1326,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was called with a set of parameters.",
            "example": [
                "\n"
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1355,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1358,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1375,
            "description": "Matcher that checks that the expected item is an element in the actual Array.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1384,
            "description": "Matcher that checks that the expected item is NOT an element in the actual Array.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Object"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toNotContain() instead.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1402,
            "description": "Matcher that checks that the expected item is equal to the actual item\nup to a given level of decimal precision (default 2).",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "precision",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1419,
            "description": "Matcher that checks that the expected exception was thrown by the actual.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1480,
            "is_constructor": 1,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1515,
            "description": "Holds results for a set of Jasmine spec. Allows for the results array to hold another jasmine.NestedResults",
            "is_constructor": 1,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1521,
            "description": "The total count of results",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1525,
            "description": "Number of passed results",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1529,
            "description": "Number of failed results",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1533,
            "description": "Was this suite/spec skipped?",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1537,
            "ignore": "",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1543,
            "description": "Roll up the result counts.",
            "params": [
                {
                    "name": "result",
                    "description": ""
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1554,
            "description": "Adds a log message.",
            "params": [
                {
                    "name": "values",
                    "description": "Array of message parts which will be concatenated later."
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1562,
            "description": "Getter for the results: message & results.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1569,
            "description": "Adds a result, tracking counts (total, passed, & failed)",
            "params": [
                {
                    "name": "result",
                    "description": "",
                    "type": "jasmine.ExpectationResult|jasmine.NestedResults"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1589,
            "return": {
                "description": "True if <b>everything</b> below passed",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1595,
            "description": "Base class for pretty printing for expectation results.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1602,
            "description": "Formats a value in a nice, human-readable string.",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1817,
            "description": "Runner",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1894,
            "description": "Internal representation of a Jasmine specification, or test.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "suite",
                    "description": "",
                    "type": "jasmine.Suite"
                },
                {
                    "name": "description",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1933,
            "description": "All parameters are pretty-printed and concatenated together, then written to the spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1956,
            "params": [
                {
                    "name": "result",
                    "description": "",
                    "type": "jasmine.ExpectationResult"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1969,
            "description": "Waits a fixed time period before moving to the next block.",
            "deprecated": true,
            "deprecationMessage": "Use waitsFor() instead",
            "params": [
                {
                    "name": "timeout",
                    "description": "milliseconds to wait",
                    "type": "Number"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 1981,
            "description": "Waits for the latchFunction to return true before proceeding to the next block.",
            "params": [
                {
                    "name": "latchFunction",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "optional_timeoutMessage",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "optional_timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 2137,
            "description": "Internal representation of a Jasmine suite.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "description",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "parentSuite",
                    "description": "",
                    "type": "jasmine.Suite"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 2234,
            "description": "A block which waits for some condition to become true, with timeout.",
            "is_constructor": 1,
            "extends": "jasmine.Block",
            "params": [
                {
                    "name": "env",
                    "description": "The Jasmine environment.",
                    "type": "jasmine.Env"
                },
                {
                    "name": "timeout",
                    "description": "The maximum time in milliseconds to wait for the condition to become true.",
                    "type": "Number"
                },
                {
                    "name": "latchFunction",
                    "description": "A function which returns true when the desired condition has been met.",
                    "type": "Function"
                },
                {
                    "name": "message",
                    "description": "The message to display if the desired condition hasn't been met within the given time period.",
                    "type": "String"
                },
                {
                    "name": "spec",
                    "description": "The Jasmine spec.",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/tests/lib/jasmine.js",
            "line": 2375,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/es5-shim.js",
            "line": 18,
            "description": "Brings an environment as close to ECMAScript 5 compliance\nas is possible with the facilities of erstwhile engines.\n\nAnnotated ES5: http://es5.github.com/ (specific links below)\nES5 Spec: http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf\nRequired reading: http://javascriptweblog.wordpress.com/2011/12/05/extending-javascript-natives/",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/es5-shim/es5-shim.js",
            "line": 1217,
            "description": "Get the substring of a string",
            "params": [
                {
                    "name": "start",
                    "description": "where to start the substring",
                    "type": "Integer"
                },
                {
                    "name": "length",
                    "description": "how many characters to return",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 10,
            "description": "Hammer\nuse this to create instances",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "is_constructor": 1,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 80,
            "description": "setup events to detect gestures on the document",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 106,
            "description": "create new hammer instance\nall methods should return the instance itself, so it is chainable.",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "is_constructor": 1,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 149,
            "description": "bind events to the instance",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 164,
            "description": "unbind events to the instance",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 179,
            "description": "trigger gesture event",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 203,
            "description": "enable of disable hammer.js detection",
            "params": [
                {
                    "name": "state",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 214,
            "description": "this holds the last move event,\nused to fix empty touchend issue\nsee the onTouch event for an explanation",
            "type": "{Object}",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 223,
            "description": "when the mouse is hold down, this is true",
            "type": "{Boolean}",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 230,
            "description": "when touch events have been fired, this is true",
            "type": "{Boolean}",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 238,
            "description": "simple addEventListener",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 252,
            "description": "touch events with mouse fallback",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "eventType",
                    "description": "like Hammer.EVENT_MOVE",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 345,
            "description": "we have different events for each device/browser\ndetermine what we need and set them in the Hammer.EVENT_TYPES constant",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 379,
            "description": "create touchlist depending on the event",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "eventType",
                    "description": "used by the fakemultitouch plugin",
                    "type": "String"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 405,
            "description": "collect event data for Hammer js",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "eventType",
                    "description": "like Hammer.EVENT_MOVE",
                    "type": "String"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 429,
            "description": "prevent the browser default actions\nmostly used to disable scrolling of the browser",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 443,
            "description": "stop bubbling the event up to its parents",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 450,
            "description": "immediately stop gesture detection\nmight be useful after a swipe was detected",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 463,
            "description": "holds all pointers",
            "type": "{Object}",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 469,
            "description": "get a list of pointers",
            "return": {
                "description": "touchlist",
                "type": "Array"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 484,
            "description": "update the position of a pointer",
            "params": [
                {
                    "name": "type",
                    "description": "Hammer.EVENT_END",
                    "type": "String"
                },
                {
                    "name": "pointerEvent",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 501,
            "description": "check if ev matches pointertype",
            "params": [
                {
                    "name": "pointerType",
                    "description": "Hammer.POINTER_MOUSE",
                    "type": "String"
                },
                {
                    "name": "ev",
                    "description": "",
                    "type": "PointerEvent"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 519,
            "description": "get events",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 530,
            "description": "reset the list",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 540,
            "description": "extend method,\nalso used for cloning when dest is an empty object",
            "params": [
                {
                    "name": "dest",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "src",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "merge",
                    "description": "do a merge",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "dest",
                "type": "Object"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 559,
            "description": "find if a node is in the given parent\nused for event delegation tricks",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "parent",
                    "description": "",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "has_parent",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 577,
            "description": "get the center of all the touches",
            "params": [
                {
                    "name": "touches",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "center",
                "type": "Object"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 597,
            "description": "calculate the velocity between two points",
            "params": [
                {
                    "name": "delta_time",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "delta_x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "delta_y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "velocity",
                "type": "Object"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 612,
            "description": "calculate the angle between two coordinates",
            "params": [
                {
                    "name": "touch1",
                    "description": "",
                    "type": "Touch"
                },
                {
                    "name": "touch2",
                    "description": "",
                    "type": "Touch"
                }
            ],
            "return": {
                "description": "angle",
                "type": "Number"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 625,
            "description": "angle to direction define",
            "params": [
                {
                    "name": "touch1",
                    "description": "",
                    "type": "Touch"
                },
                {
                    "name": "touch2",
                    "description": "",
                    "type": "Touch"
                }
            ],
            "return": {
                "description": "direction constant, like Hammer.DIRECTION_LEFT",
                "type": "String"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 644,
            "description": "calculate the distance between two touches",
            "params": [
                {
                    "name": "touch1",
                    "description": "",
                    "type": "Touch"
                },
                {
                    "name": "touch2",
                    "description": "",
                    "type": "Touch"
                }
            ],
            "return": {
                "description": "distance",
                "type": "Number"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 657,
            "description": "calculate the scale factor between two touchLists (fingers)\nno scale is 1, and goes down to 0 when pinched together, and bigger when pinched out",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "scale",
                "type": "Number"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 674,
            "description": "calculate the rotation degrees between two touchLists (fingers)",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "rotation",
                "type": "Number"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 690,
            "description": "boolean if the direction is vertical",
            "params": [
                {
                    "name": "direction",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "is_vertical",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 700,
            "description": "stop browser default behavior with css props",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HtmlElement"
                },
                {
                    "name": "css_props",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 754,
            "description": "start Hammer.gesture detection",
            "params": [
                {
                    "name": "inst",
                    "description": "",
                    "type": "Hammer.Instance"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 778,
            "description": "Hammer.gesture detection",
            "params": [
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 822,
            "description": "clear the Hammer.gesture vars\nthis is called on endDetect, but can also be used when a final Hammer.gesture has been detected\nto stop other Hammer.gestures from being fired",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 840,
            "description": "extend eventData for Hammer.gestures",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "ev",
                "type": "Object"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 888,
            "description": "register new gesture",
            "params": [
                {
                    "name": "gesture",
                    "description": "object, see gestures.js for documentation",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "gestures",
                "type": "Array"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 927,
            "description": "Custom gestures\n==============================\n\nGesture object\n--------------------\nThe object structure of a gesture:\n\n{ name: 'mygesture',\n  index: 1337,\n  defaults: {\n    mygesture_option: true\n  }\n  handler: function(type, ev, inst) {\n    // trigger gesture event\n    inst.trigger(this.name, ev);\n  }\n}",
            "params": [
                {
                    "name": "name\nthis",
                    "description": "should be the name of the gesture, lowercase\nit is also being used to disable/enable the gesture per instance config.",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "index of the gesture, where it is going to be in the stack of gestures detection\nlike when you build an gesture that depends on the drag gesture, it is a good\nidea to place it after the index of the drag gesture.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1000"
                },
                {
                    "name": "defaults",
                    "description": "default settings of the gesture. these are added to the instance settings,\nand can be overruled per instance. you can also add the name of the gesture,\nbut this is also added by default (and set to true).",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "handler\nthis",
                    "description": "handles the gesture detection of your custom gesture and receives the\nfollowing arguments:",
                    "type": "Function"
                },
                {
                    "name": "eventData",
                    "description": "event data containing the following properties:\n         timeStamp   {Number}        time the event occurred\n         target      {HTMLElement}   target element\n         touches     {Array}         touches (fingers, pointers, mouse) on the screen\n         pointerType {String}        kind of pointer that was used. matches Hammer.POINTER_MOUSE|TOUCH\n         center      {Object}        center position of the touches. contains pageX and pageY\n         deltaTime   {Number}        the total time of the touches in the screen\n         deltaX      {Number}        the delta on x axis we haved moved\n         deltaY      {Number}        the delta on y axis we haved moved\n         velocityX   {Number}        the velocity on the x\n         velocityY   {Number}        the velocity on y\n         angle       {Number}        the angle we are moving\n         direction   {String}        the direction we are moving. matches Hammer.DIRECTION_UP|DOWN|LEFT|RIGHT\n         distance    {Number}        the distance we haved moved\n         scale       {Number}        scaling of the touches, needs 2 touches\n         rotation    {Number}        rotation of the touches, needs 2 touches *\n         eventType   {String}        matches Hammer.EVENT_START|MOVE|END\n         srcEvent    {Object}        the source event, like TouchStart or MouseDown *\n         startEvent  {Object}        contains the same properties as above,\n                                     but from the first touch. this is used to calculate\n                                     distances, deltaTime, scaling etc",
                    "type": "Object"
                },
                {
                    "name": "inst",
                    "description": "the instance we are doing the detection for. you can get the options from\n     the inst.options object and trigger the gesture event by calling inst.trigger\n\n\nHandle gestures\n--------------------\ninside the handler you can get/set Hammer.detection.current. This is the current\ndetection session. It has the following properties",
                    "type": "Hammer.Instance"
                },
                {
                    "name": "name",
                    "description": "contains the name of the gesture we have detected. it has not a real function,\n     only to check in other gestures if something is detected.\n     like in the drag gesture we set it to 'drag' and in the swipe gesture we can\n     check if the current gesture is 'drag' by accessing Hammer.detection.current.name",
                    "type": "String"
                },
                {
                    "name": "inst",
                    "description": "the instance we do the detection for",
                    "type": "Hammer.Instance"
                },
                {
                    "name": "startEvent",
                    "description": "contains the properties of the first gesture detection in this session.\n     Used for calculations about timing, distance, etc.",
                    "type": "Object"
                },
                {
                    "name": "lastEvent",
                    "description": "contains all the properties of the last gesture detect in this session.\n\nafter the gesture detection session has been completed (user has released the screen)\nthe Hammer.detection.current object is copied into Hammer.detection.previous,\nthis is usefull for gestures like doubletap, where you need to know if the\nprevious gesture was a tap\n\noptions that have been set by the instance can be received by calling inst.options\n\nYou can trigger a gesture event by calling inst.trigger(\"mygesture\", event).\nThe first param is the name of your gesture, the second the event argument\n\n\nRegister gestures\n--------------------\nWhen an gesture is added to the Hammer.gestures object, it is auto registered\nat the setup of the first Hammer instance. You can also call Hammer.detection.register\nmanually and pass your gesture object as a param",
                    "type": "Object"
                }
            ],
            "readonly": "",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 1034,
            "description": "Hold\nTouch stays at the same place for x time",
            "events": "hold",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 1080,
            "description": "Tap/DoubleTap\nQuick touch at a place or double at the same place",
            "events": "tap, doubletap",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 1126,
            "description": "Swipe\ntriggers swipe events when the end velocity is above the threshold",
            "events": "swipe, swipeleft, swiperight, swipeup, swipedown",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 1160,
            "description": "Drag\nMove with x fingers (default 1) around on the page. Blocking the scrolling when\nmoving left and right is a good practice. When all the drag events are blocking\nyou disable scrolling on that area.",
            "events": "drag, drapleft, dragright, dragup, dragdown",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 1265,
            "description": "Transform\nUser want to scale or rotate with 2 fingers",
            "events": "transform, pinch, pinchin, pinchout, rotate",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 1355,
            "description": "Touch\nCalled as first, tells the user has touched the screen",
            "events": "touch",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/hammer.js",
            "line": 1391,
            "description": "Release\nCalled as last, tells the user has released the screen",
            "events": "release",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 10,
            "description": "Hammer\nuse this to create instances",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "is_constructor": 1,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 80,
            "description": "setup events to detect gestures on the document",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 106,
            "description": "create new hammer instance\nall methods should return the instance itself, so it is chainable.",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "is_constructor": 1,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 149,
            "description": "bind events to the instance",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 164,
            "description": "unbind events to the instance",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 179,
            "description": "trigger gesture event",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 203,
            "description": "enable of disable hammer.js detection",
            "params": [
                {
                    "name": "state",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 214,
            "description": "this holds the last move event,\nused to fix empty touchend issue\nsee the onTouch event for an explanation",
            "type": "{Object}",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 223,
            "description": "when the mouse is hold down, this is true",
            "type": "{Boolean}",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 230,
            "description": "when touch events have been fired, this is true",
            "type": "{Boolean}",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 238,
            "description": "simple addEventListener",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 252,
            "description": "touch events with mouse fallback",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "eventType",
                    "description": "like Hammer.EVENT_MOVE",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 345,
            "description": "we have different events for each device/browser\ndetermine what we need and set them in the Hammer.EVENT_TYPES constant",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 379,
            "description": "create touchlist depending on the event",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "eventType",
                    "description": "used by the fakemultitouch plugin",
                    "type": "String"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 405,
            "description": "collect event data for Hammer js",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "eventType",
                    "description": "like Hammer.EVENT_MOVE",
                    "type": "String"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 429,
            "description": "prevent the browser default actions\nmostly used to disable scrolling of the browser",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 443,
            "description": "stop bubbling the event up to its parents",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 450,
            "description": "immediately stop gesture detection\nmight be useful after a swipe was detected",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 463,
            "description": "holds all pointers",
            "type": "{Object}",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 469,
            "description": "get a list of pointers",
            "return": {
                "description": "touchlist",
                "type": "Array"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 484,
            "description": "update the position of a pointer",
            "params": [
                {
                    "name": "type",
                    "description": "Hammer.EVENT_END",
                    "type": "String"
                },
                {
                    "name": "pointerEvent",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 501,
            "description": "check if ev matches pointertype",
            "params": [
                {
                    "name": "pointerType",
                    "description": "Hammer.POINTER_MOUSE",
                    "type": "String"
                },
                {
                    "name": "ev",
                    "description": "",
                    "type": "PointerEvent"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 519,
            "description": "get events",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 530,
            "description": "reset the list",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 540,
            "description": "extend method,\nalso used for cloning when dest is an empty object",
            "params": [
                {
                    "name": "dest",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "src",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "merge",
                    "description": "do a merge",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "dest",
                "type": "Object"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 559,
            "description": "find if a node is in the given parent\nused for event delegation tricks",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "parent",
                    "description": "",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "has_parent",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 577,
            "description": "get the center of all the touches",
            "params": [
                {
                    "name": "touches",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "center",
                "type": "Object"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 597,
            "description": "calculate the velocity between two points",
            "params": [
                {
                    "name": "delta_time",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "delta_x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "delta_y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "velocity",
                "type": "Object"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 612,
            "description": "calculate the angle between two coordinates",
            "params": [
                {
                    "name": "touch1",
                    "description": "",
                    "type": "Touch"
                },
                {
                    "name": "touch2",
                    "description": "",
                    "type": "Touch"
                }
            ],
            "return": {
                "description": "angle",
                "type": "Number"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 625,
            "description": "angle to direction define",
            "params": [
                {
                    "name": "touch1",
                    "description": "",
                    "type": "Touch"
                },
                {
                    "name": "touch2",
                    "description": "",
                    "type": "Touch"
                }
            ],
            "return": {
                "description": "direction constant, like Hammer.DIRECTION_LEFT",
                "type": "String"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 644,
            "description": "calculate the distance between two touches",
            "params": [
                {
                    "name": "touch1",
                    "description": "",
                    "type": "Touch"
                },
                {
                    "name": "touch2",
                    "description": "",
                    "type": "Touch"
                }
            ],
            "return": {
                "description": "distance",
                "type": "Number"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 657,
            "description": "calculate the scale factor between two touchLists (fingers)\nno scale is 1, and goes down to 0 when pinched together, and bigger when pinched out",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "scale",
                "type": "Number"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 674,
            "description": "calculate the rotation degrees between two touchLists (fingers)",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "rotation",
                "type": "Number"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 690,
            "description": "boolean if the direction is vertical",
            "params": [
                {
                    "name": "direction",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "is_vertical",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 700,
            "description": "stop browser default behavior with css props",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HtmlElement"
                },
                {
                    "name": "css_props",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 754,
            "description": "start Hammer.gesture detection",
            "params": [
                {
                    "name": "inst",
                    "description": "",
                    "type": "Hammer.Instance"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 778,
            "description": "Hammer.gesture detection",
            "params": [
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 822,
            "description": "clear the Hammer.gesture vars\nthis is called on endDetect, but can also be used when a final Hammer.gesture has been detected\nto stop other Hammer.gestures from being fired",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 840,
            "description": "extend eventData for Hammer.gestures",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "ev",
                "type": "Object"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 888,
            "description": "register new gesture",
            "params": [
                {
                    "name": "gesture",
                    "description": "object, see gestures.js for documentation",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "gestures",
                "type": "Array"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 927,
            "description": "Custom gestures\n==============================\n\nGesture object\n--------------------\nThe object structure of a gesture:\n\n{ name: 'mygesture',\n  index: 1337,\n  defaults: {\n    mygesture_option: true\n  }\n  handler: function(type, ev, inst) {\n    // trigger gesture event\n    inst.trigger(this.name, ev);\n  }\n}",
            "params": [
                {
                    "name": "name\nthis",
                    "description": "should be the name of the gesture, lowercase\nit is also being used to disable/enable the gesture per instance config.",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "index of the gesture, where it is going to be in the stack of gestures detection\nlike when you build an gesture that depends on the drag gesture, it is a good\nidea to place it after the index of the drag gesture.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1000"
                },
                {
                    "name": "defaults",
                    "description": "default settings of the gesture. these are added to the instance settings,\nand can be overruled per instance. you can also add the name of the gesture,\nbut this is also added by default (and set to true).",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "handler\nthis",
                    "description": "handles the gesture detection of your custom gesture and receives the\nfollowing arguments:",
                    "type": "Function"
                },
                {
                    "name": "eventData",
                    "description": "event data containing the following properties:\n         timeStamp   {Number}        time the event occurred\n         target      {HTMLElement}   target element\n         touches     {Array}         touches (fingers, pointers, mouse) on the screen\n         pointerType {String}        kind of pointer that was used. matches Hammer.POINTER_MOUSE|TOUCH\n         center      {Object}        center position of the touches. contains pageX and pageY\n         deltaTime   {Number}        the total time of the touches in the screen\n         deltaX      {Number}        the delta on x axis we haved moved\n         deltaY      {Number}        the delta on y axis we haved moved\n         velocityX   {Number}        the velocity on the x\n         velocityY   {Number}        the velocity on y\n         angle       {Number}        the angle we are moving\n         direction   {String}        the direction we are moving. matches Hammer.DIRECTION_UP|DOWN|LEFT|RIGHT\n         distance    {Number}        the distance we haved moved\n         scale       {Number}        scaling of the touches, needs 2 touches\n         rotation    {Number}        rotation of the touches, needs 2 touches *\n         eventType   {String}        matches Hammer.EVENT_START|MOVE|END\n         srcEvent    {Object}        the source event, like TouchStart or MouseDown *\n         startEvent  {Object}        contains the same properties as above,\n                                     but from the first touch. this is used to calculate\n                                     distances, deltaTime, scaling etc",
                    "type": "Object"
                },
                {
                    "name": "inst",
                    "description": "the instance we are doing the detection for. you can get the options from\n     the inst.options object and trigger the gesture event by calling inst.trigger\n\n\nHandle gestures\n--------------------\ninside the handler you can get/set Hammer.detection.current. This is the current\ndetection session. It has the following properties",
                    "type": "Hammer.Instance"
                },
                {
                    "name": "name",
                    "description": "contains the name of the gesture we have detected. it has not a real function,\n     only to check in other gestures if something is detected.\n     like in the drag gesture we set it to 'drag' and in the swipe gesture we can\n     check if the current gesture is 'drag' by accessing Hammer.detection.current.name",
                    "type": "String"
                },
                {
                    "name": "inst",
                    "description": "the instance we do the detection for",
                    "type": "Hammer.Instance"
                },
                {
                    "name": "startEvent",
                    "description": "contains the properties of the first gesture detection in this session.\n     Used for calculations about timing, distance, etc.",
                    "type": "Object"
                },
                {
                    "name": "lastEvent",
                    "description": "contains all the properties of the last gesture detect in this session.\n\nafter the gesture detection session has been completed (user has released the screen)\nthe Hammer.detection.current object is copied into Hammer.detection.previous,\nthis is usefull for gestures like doubletap, where you need to know if the\nprevious gesture was a tap\n\noptions that have been set by the instance can be received by calling inst.options\n\nYou can trigger a gesture event by calling inst.trigger(\"mygesture\", event).\nThe first param is the name of your gesture, the second the event argument\n\n\nRegister gestures\n--------------------\nWhen an gesture is added to the Hammer.gestures object, it is auto registered\nat the setup of the first Hammer instance. You can also call Hammer.detection.register\nmanually and pass your gesture object as a param",
                    "type": "Object"
                }
            ],
            "readonly": "",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 1034,
            "description": "Hold\nTouch stays at the same place for x time",
            "events": "hold",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 1080,
            "description": "Tap/DoubleTap\nQuick touch at a place or double at the same place",
            "events": "tap, doubletap",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 1126,
            "description": "Swipe\ntriggers swipe events when the end velocity is above the threshold",
            "events": "swipe, swipeleft, swiperight, swipeup, swipedown",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 1160,
            "description": "Drag\nMove with x fingers (default 1) around on the page. Blocking the scrolling when\nmoving left and right is a good practice. When all the drag events are blocking\nyou disable scrolling on that area.",
            "events": "drag, drapleft, dragright, dragup, dragdown",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 1265,
            "description": "Transform\nUser want to scale or rotate with 2 fingers",
            "events": "transform, pinch, pinchin, pinchout, rotate",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 1355,
            "description": "Touch\nCalled as first, tells the user has touched the screen",
            "events": "touch",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 1391,
            "description": "Release\nCalled as last, tells the user has released the screen",
            "events": "release",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 1431,
            "description": "bind dom events\nthis overwrites addEventListener",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "eventTypes",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 1472,
            "description": "the methods are called by the instance, but with the jquery plugin\nwe use the jquery event methods instead.",
            "this": "{Hammer.Instance}",
            "return": {
                "description": "",
                "type": "JQuery"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 1486,
            "description": "trigger events\nthis is called by the gestures to trigger an event like 'tap'",
            "this": "{Hammer.Instance}",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "JQuery"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/dist/jquery.hammer.js",
            "line": 1507,
            "description": "jQuery plugin\ncreate instance of Hammer and watch for gestures,\nand when called again you can change the options",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ],
            "return": {
                "description": "",
                "type": "JQuery"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/plugins/hammer.fakemultitouch.js",
            "line": 2,
            "description": "enable multitouch on the desktop by pressing the shiftkey\nthe other touch goes in the opposite direction so the center keeps at its place\nit's recommended to enable Hammer.debug.showTouches for this one",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/plugins/hammer.fakemultitouch.js",
            "line": 15,
            "description": "overwrites Hammer.event.getTouchList.",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Event"
                },
                {
                    "name": "TOUCHTYPE",
                    "description": "type"
                }
            ],
            "return": {
                "description": "Touches",
                "type": "Array"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/plugins/hammer.showtouches.js",
            "line": 2,
            "description": "ShowTouches gesture\nrequires jQuery\nshow all touch on the screen by placing elements at there pageX and pageY",
            "params": [
                {
                    "name": "force",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/plugins/hammer.showtouches.js",
            "line": 18,
            "description": "remove unused touch elements",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/plugins/jquery.hammer.js",
            "line": 9,
            "description": "bind dom events\nthis overwrites addEventListener",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "eventTypes",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/plugins/jquery.hammer.js",
            "line": 50,
            "description": "the methods are called by the instance, but with the jquery plugin\nwe use the jquery event methods instead.",
            "this": "{Hammer.Instance}",
            "return": {
                "description": "",
                "type": "JQuery"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/plugins/jquery.hammer.js",
            "line": 64,
            "description": "trigger events\nthis is called by the gestures to trigger an event like 'tap'",
            "this": "{Hammer.Instance}",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "JQuery"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/plugins/jquery.hammer.js",
            "line": 85,
            "description": "jQuery plugin\ncreate instance of Hammer and watch for gestures,\nand when called again you can change the options",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ],
            "return": {
                "description": "",
                "type": "JQuery"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/core.js",
            "line": 1,
            "description": "Hammer\nuse this to create instances",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "is_constructor": 1,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/detection.js",
            "line": 16,
            "description": "start Hammer.gesture detection",
            "params": [
                {
                    "name": "inst",
                    "description": "",
                    "type": "Hammer.Instance"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/detection.js",
            "line": 40,
            "description": "Hammer.gesture detection",
            "params": [
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/detection.js",
            "line": 84,
            "description": "clear the Hammer.gesture vars\nthis is called on endDetect, but can also be used when a final Hammer.gesture has been detected\nto stop other Hammer.gestures from being fired",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/detection.js",
            "line": 102,
            "description": "extend eventData for Hammer.gestures",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "ev",
                "type": "Object"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/detection.js",
            "line": 150,
            "description": "register new gesture",
            "params": [
                {
                    "name": "gesture",
                    "description": "object, see gestures.js for documentation",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "gestures",
                "type": "Array"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/event.js",
            "line": 1,
            "description": "this holds the last move event,\nused to fix empty touchend issue\nsee the onTouch event for an explanation",
            "type": "{Object}",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/event.js",
            "line": 10,
            "description": "when the mouse is hold down, this is true",
            "type": "{Boolean}",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/event.js",
            "line": 17,
            "description": "when touch events have been fired, this is true",
            "type": "{Boolean}",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/event.js",
            "line": 25,
            "description": "simple addEventListener",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/event.js",
            "line": 39,
            "description": "touch events with mouse fallback",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "eventType",
                    "description": "like Hammer.EVENT_MOVE",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/event.js",
            "line": 132,
            "description": "we have different events for each device/browser\ndetermine what we need and set them in the Hammer.EVENT_TYPES constant",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/event.js",
            "line": 166,
            "description": "create touchlist depending on the event",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "eventType",
                    "description": "used by the fakemultitouch plugin",
                    "type": "String"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/event.js",
            "line": 192,
            "description": "collect event data for Hammer js",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "eventType",
                    "description": "like Hammer.EVENT_MOVE",
                    "type": "String"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/event.js",
            "line": 216,
            "description": "prevent the browser default actions\nmostly used to disable scrolling of the browser",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/event.js",
            "line": 230,
            "description": "stop bubbling the event up to its parents",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/event.js",
            "line": 237,
            "description": "immediately stop gesture detection\nmight be useful after a swipe was detected",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/gestures.js",
            "line": 3,
            "description": "Custom gestures\n==============================\n\nGesture object\n--------------------\nThe object structure of a gesture:\n\n{ name: 'mygesture',\n  index: 1337,\n  defaults: {\n    mygesture_option: true\n  }\n  handler: function(type, ev, inst) {\n    // trigger gesture event\n    inst.trigger(this.name, ev);\n  }\n}",
            "params": [
                {
                    "name": "name\nthis",
                    "description": "should be the name of the gesture, lowercase\nit is also being used to disable/enable the gesture per instance config.",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "index of the gesture, where it is going to be in the stack of gestures detection\nlike when you build an gesture that depends on the drag gesture, it is a good\nidea to place it after the index of the drag gesture.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1000"
                },
                {
                    "name": "defaults",
                    "description": "default settings of the gesture. these are added to the instance settings,\nand can be overruled per instance. you can also add the name of the gesture,\nbut this is also added by default (and set to true).",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "handler\nthis",
                    "description": "handles the gesture detection of your custom gesture and receives the\nfollowing arguments:",
                    "type": "Function"
                },
                {
                    "name": "eventData",
                    "description": "event data containing the following properties:\n         timeStamp   {Number}        time the event occurred\n         target      {HTMLElement}   target element\n         touches     {Array}         touches (fingers, pointers, mouse) on the screen\n         pointerType {String}        kind of pointer that was used. matches Hammer.POINTER_MOUSE|TOUCH\n         center      {Object}        center position of the touches. contains pageX and pageY\n         deltaTime   {Number}        the total time of the touches in the screen\n         deltaX      {Number}        the delta on x axis we haved moved\n         deltaY      {Number}        the delta on y axis we haved moved\n         velocityX   {Number}        the velocity on the x\n         velocityY   {Number}        the velocity on y\n         angle       {Number}        the angle we are moving\n         direction   {String}        the direction we are moving. matches Hammer.DIRECTION_UP|DOWN|LEFT|RIGHT\n         distance    {Number}        the distance we haved moved\n         scale       {Number}        scaling of the touches, needs 2 touches\n         rotation    {Number}        rotation of the touches, needs 2 touches *\n         eventType   {String}        matches Hammer.EVENT_START|MOVE|END\n         srcEvent    {Object}        the source event, like TouchStart or MouseDown *\n         startEvent  {Object}        contains the same properties as above,\n                                     but from the first touch. this is used to calculate\n                                     distances, deltaTime, scaling etc",
                    "type": "Object"
                },
                {
                    "name": "inst",
                    "description": "the instance we are doing the detection for. you can get the options from\n     the inst.options object and trigger the gesture event by calling inst.trigger\n\n\nHandle gestures\n--------------------\ninside the handler you can get/set Hammer.detection.current. This is the current\ndetection session. It has the following properties",
                    "type": "Hammer.Instance"
                },
                {
                    "name": "name",
                    "description": "contains the name of the gesture we have detected. it has not a real function,\n     only to check in other gestures if something is detected.\n     like in the drag gesture we set it to 'drag' and in the swipe gesture we can\n     check if the current gesture is 'drag' by accessing Hammer.detection.current.name",
                    "type": "String"
                },
                {
                    "name": "inst",
                    "description": "the instance we do the detection for",
                    "type": "Hammer.Instance"
                },
                {
                    "name": "startEvent",
                    "description": "contains the properties of the first gesture detection in this session.\n     Used for calculations about timing, distance, etc.",
                    "type": "Object"
                },
                {
                    "name": "lastEvent",
                    "description": "contains all the properties of the last gesture detect in this session.\n\nafter the gesture detection session has been completed (user has released the screen)\nthe Hammer.detection.current object is copied into Hammer.detection.previous,\nthis is usefull for gestures like doubletap, where you need to know if the\nprevious gesture was a tap\n\noptions that have been set by the instance can be received by calling inst.options\n\nYou can trigger a gesture event by calling inst.trigger(\"mygesture\", event).\nThe first param is the name of your gesture, the second the event argument\n\n\nRegister gestures\n--------------------\nWhen an gesture is added to the Hammer.gestures object, it is auto registered\nat the setup of the first Hammer instance. You can also call Hammer.detection.register\nmanually and pass your gesture object as a param",
                    "type": "Object"
                }
            ],
            "readonly": "",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/gestures.js",
            "line": 110,
            "description": "Hold\nTouch stays at the same place for x time",
            "events": "hold",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/gestures.js",
            "line": 156,
            "description": "Tap/DoubleTap\nQuick touch at a place or double at the same place",
            "events": "tap, doubletap",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/gestures.js",
            "line": 202,
            "description": "Swipe\ntriggers swipe events when the end velocity is above the threshold",
            "events": "swipe, swipeleft, swiperight, swipeup, swipedown",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/gestures.js",
            "line": 236,
            "description": "Drag\nMove with x fingers (default 1) around on the page. Blocking the scrolling when\nmoving left and right is a good practice. When all the drag events are blocking\nyou disable scrolling on that area.",
            "events": "drag, drapleft, dragright, dragup, dragdown",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/gestures.js",
            "line": 341,
            "description": "Transform\nUser want to scale or rotate with 2 fingers",
            "events": "transform, pinch, pinchin, pinchout, rotate",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/gestures.js",
            "line": 431,
            "description": "Touch\nCalled as first, tells the user has touched the screen",
            "events": "touch",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/gestures.js",
            "line": 467,
            "description": "Release\nCalled as last, tells the user has released the screen",
            "events": "release",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/instance.js",
            "line": 1,
            "description": "create new hammer instance\nall methods should return the instance itself, so it is chainable.",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "is_constructor": 1,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/instance.js",
            "line": 44,
            "description": "bind events to the instance",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/instance.js",
            "line": 59,
            "description": "unbind events to the instance",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/instance.js",
            "line": 74,
            "description": "trigger gesture event",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/instance.js",
            "line": 98,
            "description": "enable of disable hammer.js detection",
            "params": [
                {
                    "name": "state",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/pointerevent.js",
            "line": 2,
            "description": "holds all pointers",
            "type": "{Object}",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/pointerevent.js",
            "line": 8,
            "description": "get a list of pointers",
            "return": {
                "description": "touchlist",
                "type": "Array"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/pointerevent.js",
            "line": 23,
            "description": "update the position of a pointer",
            "params": [
                {
                    "name": "type",
                    "description": "Hammer.EVENT_END",
                    "type": "String"
                },
                {
                    "name": "pointerEvent",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/pointerevent.js",
            "line": 40,
            "description": "check if ev matches pointertype",
            "params": [
                {
                    "name": "pointerType",
                    "description": "Hammer.POINTER_MOUSE",
                    "type": "String"
                },
                {
                    "name": "ev",
                    "description": "",
                    "type": "PointerEvent"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/pointerevent.js",
            "line": 58,
            "description": "get events",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/pointerevent.js",
            "line": 69,
            "description": "reset the list",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/setup.js",
            "line": 4,
            "description": "setup events to detect gestures on the document",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/utils.js",
            "line": 2,
            "description": "extend method,\nalso used for cloning when dest is an empty object",
            "params": [
                {
                    "name": "dest",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "src",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "merge",
                    "description": "do a merge",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "dest",
                "type": "Object"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/utils.js",
            "line": 21,
            "description": "find if a node is in the given parent\nused for event delegation tricks",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "parent",
                    "description": "",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "has_parent",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/utils.js",
            "line": 39,
            "description": "get the center of all the touches",
            "params": [
                {
                    "name": "touches",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "center",
                "type": "Object"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/utils.js",
            "line": 59,
            "description": "calculate the velocity between two points",
            "params": [
                {
                    "name": "delta_time",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "delta_x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "delta_y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "velocity",
                "type": "Object"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/utils.js",
            "line": 74,
            "description": "calculate the angle between two coordinates",
            "params": [
                {
                    "name": "touch1",
                    "description": "",
                    "type": "Touch"
                },
                {
                    "name": "touch2",
                    "description": "",
                    "type": "Touch"
                }
            ],
            "return": {
                "description": "angle",
                "type": "Number"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/utils.js",
            "line": 87,
            "description": "angle to direction define",
            "params": [
                {
                    "name": "touch1",
                    "description": "",
                    "type": "Touch"
                },
                {
                    "name": "touch2",
                    "description": "",
                    "type": "Touch"
                }
            ],
            "return": {
                "description": "direction constant, like Hammer.DIRECTION_LEFT",
                "type": "String"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/utils.js",
            "line": 106,
            "description": "calculate the distance between two touches",
            "params": [
                {
                    "name": "touch1",
                    "description": "",
                    "type": "Touch"
                },
                {
                    "name": "touch2",
                    "description": "",
                    "type": "Touch"
                }
            ],
            "return": {
                "description": "distance",
                "type": "Number"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/utils.js",
            "line": 119,
            "description": "calculate the scale factor between two touchLists (fingers)\nno scale is 1, and goes down to 0 when pinched together, and bigger when pinched out",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "scale",
                "type": "Number"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/utils.js",
            "line": 136,
            "description": "calculate the rotation degrees between two touchLists (fingers)",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "rotation",
                "type": "Number"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/utils.js",
            "line": 152,
            "description": "boolean if the direction is vertical",
            "params": [
                {
                    "name": "direction",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "is_vertical",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/src/utils.js",
            "line": 162,
            "description": "stop browser default behavior with css props",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HtmlElement"
                },
                {
                    "name": "css_props",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/tests/libs/qunit.js",
            "line": 1,
            "description": "QUnit v1.4.0 - A JavaScript Unit Testing Framework\n\nhttp://docs.jquery.com/QUnit\n\nCopyright (c) 2012 John Resig, Jörn Zaefferer\nDual licensed under the MIT (MIT-LICENSE.txt)\nor GPL (GPL-LICENSE.txt) licenses.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/tests/libs/qunit.js",
            "line": 1267,
            "description": "jsDump Copyright (c) 2008 Ariel Flesler - aflesler(at)gmail(dot)com |\nhttp://flesler.blogspot.com Licensed under BSD\n(http://www.opensource.org/licenses/bsd-license.php) Date: 5/15/2008",
            "projectdescription": "Advanced and extensible data dumping for Javascript.",
            "version": "1.0.0",
            "author": "Ariel Flesler",
            "link": "{http://flesler.blogspot.com/2008/05/jsdump-pretty-dump-of-any-javascript.html}",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/tests/gestures.js",
            "line": 30,
            "description": "test gestures",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "expect_events",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/tests/gestures.js",
            "line": 65,
            "description": "test gestures",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/tests/gestures.js",
            "line": 97,
            "description": "test if event data contains wright values",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/tests/utils.js",
            "line": 1,
            "description": "extend objects with new params",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/hammerjs/tests/utils.js",
            "line": 16,
            "description": "cloning with the extend util\ntest clone references",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/test/data/testinit.js",
            "line": 16,
            "description": "Set up a mock AMD define function for testing AMD registration.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/test/data/testinit.js",
            "line": 25,
            "description": "Returns an array of elements with the given IDs",
            "example": [
                " q(\"main\", \"foo\", \"bar\")"
            ],
            "result": "[<div id=\"main\">, <span id=\"foo\">, <input id=\"bar\">]",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/test/data/testinit.js",
            "line": 40,
            "description": "Asserts that a select matches the given IDs",
            "params": [
                {
                    "name": "a",
                    "description": "- Assertion name",
                    "type": "String"
                },
                {
                    "name": "b",
                    "description": "- Sizzle selector",
                    "type": "String"
                },
                {
                    "name": "c",
                    "description": "- Array of ids to construct what is expected",
                    "type": "String"
                }
            ],
            "example": [
                " t(\"Check for something\", \"//[a]\", [\"foo\", \"baar\"]);"
            ],
            "result": "returns true if \"//[a]\" return two elements with the IDs 'foo' and 'baar'",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/test/data/testinit.js",
            "line": 132,
            "description": "Add random number to url to stop caching",
            "example": [
                " url(\"data/test.html\")",
                " url(\"data/test.php?foo=bar\")"
            ],
            "result": "\"data/test.php?foo=bar&10538358345554\"",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/test/data/testrunner.js",
            "line": 1,
            "description": "Allow the test suite to run with other libs or jQuery's.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/test/data/testrunner.js",
            "line": 167,
            "description": "QUnit hooks",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/test/data/testrunner.js",
            "line": 197,
            "params": [
                {
                    "name": "elems",
                    "description": "Target (or array of targets) for jQuery.data.",
                    "type": "JQuery|HTMLElement|Object|Array"
                },
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/test/data/testrunner.js",
            "line": 257,
            "description": "Ensures that tests have cleaned up properly after themselves. Should be passed as the\nteardown function on all modules' lifecycle object.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/test/data/testrunner.js",
            "line": 355,
            "description": "QUnit configuration",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/test/data/testrunner.js",
            "line": 365,
            "description": "Load the TestSwarm listener if swarmURL is in the address.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/test/unit/core.js",
            "line": 986,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/test/unit/selector.js",
            "line": 3,
            "description": "This test page is for selector tests that require jQuery in order to do the selection",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/test/unit/selector.js",
            "line": 79,
            "description": "Returns an array of elements with the given IDs\nq & t are added here for the iFrame's context",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/test/unit/selector.js",
            "line": 93,
            "description": "Asserts that a select matches the given IDs",
            "example": [
                " t(\"Check for something\", \"//[a]\", [\"foo\", \"baar\"]);"
            ],
            "params": [
                {
                    "name": "a",
                    "description": "- Assertion name",
                    "type": "String"
                },
                {
                    "name": "b",
                    "description": "- Sizzle selector",
                    "type": "String"
                },
                {
                    "name": "c",
                    "description": "- Array of ids to construct what is expected",
                    "type": "Array"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/test/unit/serialize.js",
            "line": 90,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/Gruntfile.js",
            "line": 220,
            "description": "sizzle-jquery.js -> sizzle between \"EXPOSE\" blocks,\n\t\t\treplace define & window.Sizzle assignment\n\n// EXPOSE\n\t\t\tif ( typeof define === \"function\" && define.amd ) {\n\t\t\t\tdefine(function() { return Sizzle; });\n\t\t\t} else {\n\t\t\t\twindow.Sizzle = Sizzle;\n\t\t\t}\n\t\t\t// EXPOSE\nBecomes...\nSizzle.attr = jQuery.attr;\n\t\t\tjQuery.find = Sizzle;\n\t\t\tjQuery.expr = Sizzle.selectors;\n\t\t\tjQuery.expr[\":\"] = jQuery.expr.pseudos;\n\t\t\tjQuery.unique = Sizzle.uniqueSort;\n\t\t\tjQuery.text = Sizzle.getText;\n\t\t\tjQuery.isXMLDoc = Sizzle.isXML;\n\t\t\tjQuery.contains = Sizzle.contains;",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/jquery.js",
            "line": 1157,
            "description": "Create key-value caches of limited size",
            "return": {
                "description": "Returns the Object data after storing it on itself with\n\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n\tdeleting the oldest entry",
                "type": "Function(string, Object)"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/jquery.js",
            "line": 1177,
            "description": "Mark a function for special use by Sizzle",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to mark",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/jquery.js",
            "line": 1186,
            "description": "Support testing using an element",
            "params": [
                {
                    "name": "fn",
                    "description": "Passed the created div and expects a boolean result",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/jquery.js",
            "line": 1207,
            "description": "Adds the same handler for all of the specified attrs",
            "params": [
                {
                    "name": "attrs",
                    "description": "Pipe-separated list of attributes",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "The method that will be applied",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/jquery.js",
            "line": 1221,
            "description": "Checks document order of two siblings",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Element"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "Returns less than 0 if a precedes b, greater than 0 if a follows b",
                "type": "Number"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/jquery.js",
            "line": 1250,
            "description": "Returns a function to use in pseudos for input types",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/jquery.js",
            "line": 1261,
            "description": "Returns a function to use in pseudos for buttons",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/jquery.js",
            "line": 1272,
            "description": "Returns a function to use in pseudos for positionals",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/jquery.js",
            "line": 1294,
            "description": "Detect xml",
            "params": [
                {
                    "name": "elem",
                    "description": "An element or a document",
                    "type": "Element|Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/jquery.js",
            "line": 1308,
            "description": "Sets document-related variables once based on the current document",
            "params": [
                {
                    "name": "doc",
                    "description": "An element or document object to use to set the document",
                    "type": "Element|Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the current document",
                "type": "Object"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/jquery.js",
            "line": 1718,
            "description": "Document sorting and removing duplicates",
            "params": [
                {
                    "name": "results",
                    "description": "",
                    "type": "ArrayLike"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/jquery/jquery.js",
            "line": 1747,
            "description": "Utility function for retrieving the text value of an array of DOM nodes",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Array|Element"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/append.js",
            "line": 3,
            "description": "Appends an array to the end of another.\nThe first array will be modified.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/collect.js",
            "line": 3,
            "description": "Maps the items in the array and concatenates the result arrays.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/combine.js",
            "line": 3,
            "description": "Combines an array with all the items of another.\nDoes not allow duplicates and is case and type sensitive.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/compact.js",
            "line": 3,
            "description": "Remove all null/undefined items from array.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/contains.js",
            "line": 3,
            "description": "If array contains values.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/difference.js",
            "line": 4,
            "description": "Return a new Array with elements that aren't present in the other Arrays.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/every.js",
            "line": 3,
            "description": "Array every",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/filter.js",
            "line": 3,
            "description": "Array filter",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/find.js",
            "line": 3,
            "description": "Returns first item that matches criteria",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/findIndex.js",
            "line": 3,
            "description": "Returns the index of the first item that matches criteria",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/flatten.js",
            "line": 29,
            "description": "Recursively flattens an array.\nA new array containing all the elements is returned.\nIf `shallow` is true, it will only flatten one level.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/forEach.js",
            "line": 3,
            "description": "Array forEach",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/indexOf.js",
            "line": 3,
            "description": "Array.indexOf",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/insert.js",
            "line": 3,
            "description": "Insert item into array if not already present.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/intersection.js",
            "line": 4,
            "description": "Return a new Array with elements common to all Arrays.\n- based on underscore.js implementation",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/invoke.js",
            "line": 3,
            "description": "Call `methodName` on each item of the array passing custom arguments if\nneeded.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/join.js",
            "line": 7,
            "description": "Joins strings with the specified separator inserted between each value.\nNull values and empty strings will be excluded.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/lastIndexOf.js",
            "line": 3,
            "description": "Array lastIndexOf",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/map.js",
            "line": 3,
            "description": "Array map",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/max.js",
            "line": 3,
            "description": "Return maximum value inside array",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/min.js",
            "line": 3,
            "description": "Return minimum value inside array",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/pick.js",
            "line": 3,
            "description": "Remove random item(s) from the Array and return it.\nReturns an Array of items if [nItems] is provided or a single item if\nit isn't specified.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/pluck.js",
            "line": 3,
            "description": "Extract a list of property values.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/range.js",
            "line": 3,
            "description": "Returns an Array of numbers inside range.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/reduce.js",
            "line": 3,
            "description": "Array reduce",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/reduceRight.js",
            "line": 3,
            "description": "Array reduceRight",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/reject.js",
            "line": 3,
            "description": "Array reject",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/remove.js",
            "line": 3,
            "description": "Remove a single item from the array.\n(it won't remove duplicates, just a single item)",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/removeAll.js",
            "line": 3,
            "description": "Remove all instances of an item from array.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/shuffle.js",
            "line": 3,
            "description": "Shuffle array items.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/some.js",
            "line": 3,
            "description": "Array some",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/sort.js",
            "line": 3,
            "description": "Merge sort (http://en.wikipedia.org/wiki/Merge_sort)",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/split.js",
            "line": 3,
            "description": "Split array into a fixed number of segments.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/toLookup.js",
            "line": 3,
            "description": "Creates an object that holds a lookup for the objects in the array.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/union.js",
            "line": 3,
            "description": "Concat multiple arrays and remove duplicates",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/unique.js",
            "line": 3,
            "return": {
                "description": "Array of unique items",
                "type": "Array"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/xor.js",
            "line": 4,
            "description": "Exclusive OR. Returns items that are present in a single array.\n- like ptyhon's `symmetric_difference`",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/array/zip.js",
            "line": 7,
            "description": "Merges together the values of each of the arrays with the values at the\ncorresponding position.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/collection/contains.js",
            "line": 3,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/collection/every.js",
            "line": 3,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/collection/filter.js",
            "line": 3,
            "description": "filter collection values, returns array.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/collection/find.js",
            "line": 3,
            "description": "Find value that returns true on iterator check.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/collection/forEach.js",
            "line": 3,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/collection/make_.js",
            "line": 3,
            "description": "internal method used to create other collection modules.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/collection/map.js",
            "line": 3,
            "description": "Map collection values, returns Array.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/collection/max.js",
            "line": 3,
            "description": "Get maximum value inside collection",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/collection/min.js",
            "line": 3,
            "description": "Get minimum value inside collection.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/collection/pluck.js",
            "line": 3,
            "description": "Extract a list of property values.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/collection/reduce.js",
            "line": 3,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/collection/reject.js",
            "line": 3,
            "description": "Inverse or collection/filter",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/collection/size.js",
            "line": 3,
            "description": "Get collection size",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/collection/some.js",
            "line": 3,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/date/dayOfTheYear.js",
            "line": 3,
            "description": "return the day of the year (1..366)",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/date/diff.js",
            "line": 3,
            "description": "calculate the difference between dates (range)",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/date/isLeapYear.js",
            "line": 3,
            "description": "checks if it's a leap year",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/date/isSame.js",
            "line": 3,
            "description": "Check if date is \"same\" with optional period",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/date/parseIso.js",
            "line": 131,
            "description": "Parse an ISO8601 formatted date string, and return a Date object.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/date/startOf.js",
            "line": 3,
            "description": "get a new Date object representing start of period",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/date/strftime.js",
            "line": 15,
            "description": "format date based on strftime format",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/date/timezoneAbbr.js",
            "line": 3,
            "description": "Abbreviated time zone name or similar information.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/date/timezoneOffset.js",
            "line": 3,
            "description": "time zone as hour and minute offset from UTC (e.g. +0900)",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/date/totalDaysInMonth.js",
            "line": 5,
            "description": "returns the total amount of days in the month (considering leap years)",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/date/totalDaysInYear.js",
            "line": 3,
            "description": "return the amount of days in the year following the gregorian calendar\nand leap years",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/date/weekOfTheYear.js",
            "line": 3,
            "description": "Return the week of the year based on given firstDayOfWeek",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/function/bind.js",
            "line": 7,
            "description": "Return a function that will execute in the given context, optionally adding any additional supplied parameters to the beginning of the arguments collection.",
            "params": [
                {
                    "name": "fn",
                    "description": "Function.",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "Execution context.",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "Arguments (0...n arguments).",
                    "type": "Rest"
                }
            ],
            "return": {
                "description": "Wrapped Function.",
                "type": "Function"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/function/compose.js",
            "line": 3,
            "description": "Returns a function that composes multiple functions, passing results to\neach other.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/function/debounce.js",
            "line": 3,
            "description": "Debounce callback execution",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/function/func.js",
            "line": 3,
            "description": "Returns a function that call a method on the passed object",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/function/makeIterator_.js",
            "line": 3,
            "description": "Converts argument into a valid iterator.\nUsed internally on most array/object/collection methods that receives a\ncallback/iterator providing a shortcut syntax.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/function/partial.js",
            "line": 7,
            "description": "Creates a partially applied function.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/function/prop.js",
            "line": 3,
            "description": "Returns a function that gets a property of the passed object",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/function/series.js",
            "line": 3,
            "description": "Returns a function that will execute a list of functions in sequence\npassing the same arguments to each one. (useful for batch processing\nitems during a forEach loop)",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/function/throttle.js",
            "line": 3,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/function/timeout.js",
            "line": 7,
            "description": "Delays the call of a function within a given context.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/function/times.js",
            "line": 3,
            "description": "Iterates over a callback a set amount of times",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/clone.js",
            "line": 3,
            "description": "Clone native types.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/createObject.js",
            "line": 3,
            "description": "Create Object using prototypal inheritance and setting custom properties.\n- Mix between Douglas Crockford Prototypal Inheritance <http://javascript.crockford.com/prototypal.html> and the EcmaScript 5 `Object.create()` method.",
            "params": [
                {
                    "name": "parent",
                    "description": "Parent Object.",
                    "type": "Object"
                },
                {
                    "name": "props",
                    "description": "Object properties.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Created object.",
                "type": "Object"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/ctorApply.js",
            "line": 5,
            "description": "Do fn.apply on a constructor.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/deepClone.js",
            "line": 3,
            "description": "Recursively clone native types.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/defaults.js",
            "line": 3,
            "description": "Return first non void argument",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/inheritPrototype.js",
            "line": 3,
            "description": "Inherit prototype from another Object.\n- inspired by Nicholas Zackas <http://nczonline.net> Solution",
            "params": [
                {
                    "name": "child",
                    "description": "Child object",
                    "type": "Object"
                },
                {
                    "name": "parent",
                    "description": "Parent Object",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/is.js",
            "line": 3,
            "description": "Check if both arguments are egal.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/isArguments.js",
            "line": 3,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/isArray.js",
            "line": 2,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/isBoolean.js",
            "line": 2,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/isDate.js",
            "line": 2,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/isFinite.js",
            "line": 5,
            "description": "Check if value is finite",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/isFunction.js",
            "line": 2,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/isInteger.js",
            "line": 3,
            "description": "Check if value is an integer",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/isKind.js",
            "line": 2,
            "description": "Check if value is from a specific \"kind\".",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/isNaN.js",
            "line": 3,
            "description": "Check if value is NaN for realz",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/isNull.js",
            "line": 2,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/isNumber.js",
            "line": 2,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/isObject.js",
            "line": 2,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/isPlainObject.js",
            "line": 3,
            "description": "Checks if the value is created by the `Object` constructor.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/isRegExp.js",
            "line": 2,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/isString.js",
            "line": 2,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/isUndefined.js",
            "line": 4,
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/isnt.js",
            "line": 3,
            "description": "Check if both values are not identical/egal",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/kindOf.js",
            "line": 7,
            "description": "Gets the \"kind\" of value. (e.g. \"String\", \"Number\", etc)",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/toArray.js",
            "line": 5,
            "description": "Convert array-like object into array",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/toNumber.js",
            "line": 3,
            "description": "covert value into number if numeric",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/lang/toString.js",
            "line": 3,
            "description": "Typecast a value to a String, using an empty string value for null or\nundefined.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/math/ceil.js",
            "line": 2,
            "description": "Round value up with a custom radix.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/math/clamp.js",
            "line": 2,
            "description": "Clamps value inside range.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/math/countSteps.js",
            "line": 2,
            "description": "Count number of full steps.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/math/floor.js",
            "line": 2,
            "description": "Floor value to full steps.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/math/inRange.js",
            "line": 2,
            "description": "Checks if value is inside the range.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/math/isNear.js",
            "line": 2,
            "description": "Check if value is close to target.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/math/lerp.js",
            "line": 2,
            "description": "Linear interpolation.\nIMPORTANT:will return `Infinity` if numbers overflow Number.MAX_VALUE",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/math/loop.js",
            "line": 2,
            "description": "Loops value inside range.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/math/map.js",
            "line": 2,
            "description": "Maps a number from one scale to another.",
            "example": [
                " map(3, 0, 4, -1, 1) -> 0.5"
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/math/norm.js",
            "line": 2,
            "description": "Gets normalized ratio of value inside range.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/math/round.js",
            "line": 2,
            "description": "Round number to a specific radix",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/number/MAX_INT.js",
            "line": 1,
            "constant": "Maximum 32-bit signed integer value. (2^31 - 1)",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/number/MAX_UINT.js",
            "line": 1,
            "constant": "Maximum 32-bit unsigned integet value (2^32 - 1)",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/number/MIN_INT.js",
            "line": 1,
            "constant": "Minimum 32-bit signed integer value (-2^31).",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/number/abbreviate.js",
            "line": 9,
            "description": "Abbreviate number if bigger than 1000. (eg: 2.5K, 17.5M, 3.4B, ...)",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/number/currencyFormat.js",
            "line": 3,
            "description": "Converts number into currency format",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/number/enforcePrecision.js",
            "line": 2,
            "description": "Enforce a specific amount of decimal digits and also fix floating\npoint rounding issues.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/number/pad.js",
            "line": 3,
            "description": "Add padding zeros if n.length < minLength.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/number/rol.js",
            "line": 2,
            "description": "Bitwise circular shift left\nhttp://en.wikipedia.org/wiki/Circular_shift",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/number/ror.js",
            "line": 2,
            "description": "Bitwise circular shift right\nhttp://en.wikipedia.org/wiki/Circular_shift",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/number/sign.js",
            "line": 3,
            "description": "Get sign of the value.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/number/toInt.js",
            "line": 3,
            "description": "\"Convert\" value into an 32-bit integer.\nWorks like `Math.floor` if val > 0 and `Math.ceil` if val < 0.\nIMPORTANT: val will wrap at 2^31 and -2^31.\nPerf tests: http://jsperf.com/vs-vs-parseint-bitwise-operators/7",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/number/toUInt.js",
            "line": 3,
            "description": "\"Convert\" value into a 32-bit unsigned integer.\nIMPORTANT: Value will wrap at 2^32.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/number/toUInt31.js",
            "line": 3,
            "description": "\"Convert\" value into an 31-bit unsigned integer (since 1 bit is used for sign).\nIMPORTANT: value wil wrap at 2^31, if negative will return 0.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/bindAll.js",
            "line": 3,
            "description": "Binds methods of the object to be run in it's own context.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/contains.js",
            "line": 3,
            "description": "Check if object contains value",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/deepEquals.js",
            "line": 7,
            "description": "Recursively checks for same properties and values.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/deepFillIn.js",
            "line": 3,
            "description": "Deeply copy missing properties in the target from the defaults.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/deepMatches.js",
            "line": 37,
            "description": "Recursively check if the objects match.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/deepMixIn.js",
            "line": 3,
            "description": "Mixes objects into the target object, recursively mixing existing child\nobjects.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/equals.js",
            "line": 19,
            "description": "Checks if two objects have the same keys and values.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/every.js",
            "line": 3,
            "description": "Object every",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/fillIn.js",
            "line": 3,
            "description": "Copy missing properties in the obj from the defaults.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/filter.js",
            "line": 3,
            "description": "Creates a new object with all the properties where the callback returns\ntrue.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/find.js",
            "line": 3,
            "description": "Returns first item that matches criteria",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/forIn.js",
            "line": 24,
            "description": "Similar to Array/forEach but works over object properties and fixes Don't\nEnum bug on IE.\nbased on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/forOwn.js",
            "line": 3,
            "description": "Similar to Array/forEach but works over object properties and fixes Don't\nEnum bug on IE.\nbased on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/functions.js",
            "line": 3,
            "description": "return a list of all enumerable properties that have function values",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/get.js",
            "line": 3,
            "description": "get \"nested\" object property",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/has.js",
            "line": 5,
            "description": "Check if object has nested property.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/hasOwn.js",
            "line": 3,
            "description": "Safer Object.hasOwnProperty",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/keys.js",
            "line": 3,
            "description": "Get object keys",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/map.js",
            "line": 3,
            "description": "Creates a new object where all the values are the result of calling\n`callback`.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/matches.js",
            "line": 3,
            "description": "checks if a object contains all given properties/values",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/max.js",
            "line": 3,
            "description": "Returns maximum value inside object.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/merge.js",
            "line": 3,
            "description": "Deep merge objects.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/min.js",
            "line": 3,
            "description": "Returns minimum value inside object.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/mixIn.js",
            "line": 3,
            "description": "Combine properties from all the objects into first one.\n- This method affects target object in place, if you want to create a new Object pass an empty object as first param.",
            "params": [
                {
                    "name": "target",
                    "description": "Target Object",
                    "type": "Object"
                },
                {
                    "name": "objects",
                    "description": "Objects to be combined (0...n objects).",
                    "type": "...object"
                }
            ],
            "return": {
                "description": "Target Object.",
                "type": "Object"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/namespace.js",
            "line": 3,
            "description": "Create nested object if non-existent",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/pick.js",
            "line": 3,
            "description": "Return a copy of the object, filtered to only have values for the whitelisted keys.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/pluck.js",
            "line": 3,
            "description": "Extract a list of property values.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/reduce.js",
            "line": 3,
            "description": "Object reduce",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/reject.js",
            "line": 3,
            "description": "Object reject",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/set.js",
            "line": 3,
            "description": "set \"nested\" object property",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/size.js",
            "line": 3,
            "description": "Get object size",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/some.js",
            "line": 3,
            "description": "Object some",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/unset.js",
            "line": 3,
            "description": "Unset object property.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/object/values.js",
            "line": 3,
            "description": "Get object values",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/queryString/contains.js",
            "line": 3,
            "description": "Checks if query string contains parameter.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/queryString/decode.js",
            "line": 3,
            "description": "Decode query string into an object of keys => vals.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/queryString/encode.js",
            "line": 3,
            "description": "Encode object into a query string.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/queryString/getParam.js",
            "line": 3,
            "description": "Get query parameter value.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/queryString/getQuery.js",
            "line": 3,
            "description": "Gets full query as string with all special chars decoded.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/queryString/parse.js",
            "line": 3,
            "description": "Get query string, parses and decodes it.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/queryString/setParam.js",
            "line": 3,
            "description": "Set query string parameter value",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/random/choice.js",
            "line": 3,
            "description": "Returns a random element from the supplied arguments\nor from the array (if single argument is an array).",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/random/guid.js",
            "line": 3,
            "description": "Returns pseudo-random guid (UUID v4)\nIMPORTANT: it's not totally \"safe\" since randHex/choice uses Math.random\nby default and sequences can be predicted in some cases. See the\n\"random/random\" documentation for more info about it and how to replace\nthe default PRNG.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/random/rand.js",
            "line": 3,
            "description": "Returns random number inside range",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/random/randBit.js",
            "line": 3,
            "description": "Returns random bit (0 or 1)",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/random/randHex.js",
            "line": 5,
            "description": "Returns a random hexadecimal string",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/random/randInt.js",
            "line": 3,
            "description": "Gets random integer inside range or snap to min/max values.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/random/randSign.js",
            "line": 3,
            "description": "Returns random sign (-1 or 1)",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/random/random.js",
            "line": 3,
            "description": "Just a wrapper to Math.random. No methods inside mout/random should call\nMath.random() directly so we can inject the pseudo-random number\ngenerator if needed (ie. in case we need a seeded random or a better\nalgorithm than the native one)",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/WHITE_SPACES.js",
            "line": 2,
            "description": "Contains all Unicode white-spaces. Taken from\nhttp://en.wikipedia.org/wiki/Whitespace_character.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/camelCase.js",
            "line": 2,
            "description": "Convert string to camelCase text.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/contains.js",
            "line": 3,
            "description": "Searches for a given substring",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/crop.js",
            "line": 2,
            "description": "Truncate string at full words.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/endsWith.js",
            "line": 2,
            "description": "Checks if string ends with specified suffix.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/escapeHtml.js",
            "line": 3,
            "description": "Escapes a string for insertion into HTML.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/escapeRegExp.js",
            "line": 5,
            "description": "Escape RegExp string chars.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/escapeUnicode.js",
            "line": 3,
            "description": "Escape string into unicode sequences",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/hyphenate.js",
            "line": 2,
            "description": "Replaces spaces with hyphens, split camelCase text, remove non-word chars, remove accents and convert to lower case.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/insert.js",
            "line": 3,
            "description": "Inserts a string at a given index.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/interpolate.js",
            "line": 5,
            "description": "String interpolation",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/lowerCase.js",
            "line": 2,
            "description": "\"Safer\" String.toLowerCase()",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/lpad.js",
            "line": 3,
            "description": "Pad string with `char` if its' length is smaller than `minLen`",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/ltrim.js",
            "line": 2,
            "description": "Remove chars from beginning of string.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/makePath.js",
            "line": 3,
            "description": "Group arguments as path segments, if any of the args is `null` or an\nempty string it will be ignored from resulting path.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/normalizeLineBreaks.js",
            "line": 3,
            "description": "Convert line-breaks from DOS/MAC to a single standard (UNIX by default)",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/pascalCase.js",
            "line": 2,
            "description": "camelCase + UPPERCASE first char",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/properCase.js",
            "line": 2,
            "description": "UPPERCASE first char of each word.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/removeNonASCII.js",
            "line": 2,
            "description": "Remove non-printable ASCII chars",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/removeNonWord.js",
            "line": 2,
            "description": "Remove non-word chars.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/repeat.js",
            "line": 3,
            "description": "Repeat string n times",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/replace.js",
            "line": 3,
            "description": "Replace string(s) with the replacement(s) in the source.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/replaceAccents.js",
            "line": 2,
            "description": "Replaces all accented chars with regular ones",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/rpad.js",
            "line": 3,
            "description": "Pad string with `char` if its' length is smaller than `minLen`",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/rtrim.js",
            "line": 2,
            "description": "Remove chars from end of string.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/sentenceCase.js",
            "line": 2,
            "description": "UPPERCASE first char of each sentence and lowercase other chars.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/slugify.js",
            "line": 2,
            "description": "Convert to lower case, remove accents, remove non-word chars and\nreplace spaces with the specified delimeter.\nDoes not split camelCase text.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/startsWith.js",
            "line": 2,
            "description": "Checks if string starts with specified prefix.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/stripHtmlTags.js",
            "line": 2,
            "description": "Remove HTML tags from string.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/trim.js",
            "line": 2,
            "description": "Remove white-spaces from beginning and end of string.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/truncate.js",
            "line": 2,
            "description": "Limit number of chars.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/typecast.js",
            "line": 5,
            "description": "Parses string and convert it into a native value.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/unCamelCase.js",
            "line": 5,
            "description": "Add space between camelCase text.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/underscore.js",
            "line": 2,
            "description": "Replaces spaces with underscores, split camelCase text, remove non-word chars, remove accents and convert to lower case.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/unescapeHtml.js",
            "line": 3,
            "description": "Unescapes HTML special chars",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/unescapeUnicode.js",
            "line": 3,
            "description": "Unescape unicode char sequences",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/unhyphenate.js",
            "line": 2,
            "description": "Replaces hyphens with spaces. (only hyphens between word chars)",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/string/upperCase.js",
            "line": 2,
            "description": "\"Safer\" String.toUpperCase()",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/time/convert.js",
            "line": 3,
            "description": "convert time into another unit",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/time/now.js",
            "line": 3,
            "description": "Get current time in miliseconds",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/time/parseMs.js",
            "line": 3,
            "description": "Parse timestamp into an object.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/time/toTimeString.js",
            "line": 7,
            "description": "Format timestamp into a time string.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/mout/src/index.js",
            "line": 1,
            "description": "mout v0.7.1 | http://moutjs.com | MIT license",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 1,
            "license": "RequireJS 2.0.1+ Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\nAvailable via the MIT or new BSD license.\nsee: http://github.com/jrburke/requirejs for details",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 48,
            "description": "Helper function for iterating over an array. If the func returns\na true value, it will break out of the loop.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 63,
            "description": "Helper function for iterating over an array backwards. If the func\nreturns a true value, it will break out of the loop.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 82,
            "description": "Cycles over properties in an object and calls a function for each\nproperty value. If the function returns a truthy value, then the\niteration is stopped.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 98,
            "description": "Simple function to mix in properties from source into target,\nbut only if target does not already have a property of the same name.\nThis is not robust in IE for transferring methods that match\nObject.prototype names, but the uses of mixin here seem unlikely to\ntrigger a problem related to that.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 175,
            "description": "Constructs an error with a pointer to an URL with more information.",
            "params": [
                {
                    "name": "id",
                    "description": "the error ID that maps to an ID on a web page.",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "human readable error.",
                    "type": "String"
                },
                {
                    "name": "err",
                    "description": "the original error, if there is one.",
                    "type": "Error",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Error"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 238,
            "description": "Trims the . and .. from an array of path segments.\nIt will keep a leading path segment if a .. will become\nthe first path segment, to help with module name lookups,\nwhich act like paths, but can be remapped. But the end result,\nall paths that use this function should look normalized.\nNOTE: this method MODIFIES the input array.",
            "params": [
                {
                    "name": "ary",
                    "description": "the array of path segments.",
                    "type": "Array"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 271,
            "description": "Given a relative module name, like ./something, normalize it to\na real name that can be mapped to a path.",
            "params": [
                {
                    "name": "name",
                    "description": "the relative name",
                    "type": "String"
                },
                {
                    "name": "baseName",
                    "description": "a real name that the name arg is relative\nto.",
                    "type": "String"
                },
                {
                    "name": "applyMap",
                    "description": "apply the map config to the value. Should\nonly be done if this normalization is for a dependency ID.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "normalized name",
                "type": "String"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 390,
            "description": "Creates a module mapping that includes plugin prefix, module\nname, and path. If parentModuleMap is provided it will\nalso normalize the name via require.normalize()",
            "params": [
                {
                    "name": "name",
                    "description": "the module name",
                    "type": "String"
                },
                {
                    "name": "parentModuleMap",
                    "description": "parent module map\nfor the module name, used to resolve relative names.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "isNormalized:",
                    "description": "is the ID already normalized.\nThis is true if this call is done for a define() module ID.",
                    "type": "Boolean"
                },
                {
                    "name": "applyMap:",
                    "description": "apply the map config to the ID.\nShould only be true if this map is for a dependency.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 530,
            "description": "Internal method to transfer globalQueue items to this context's\ndefQueue.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 546,
            "description": "Helper function that creates a require function object to give to\nmodules that ask for it as a dependency. It needs to be specific\nper module because of the implication of path mappings that may\nneed to be relative to the module name.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 943,
            "description": "Checks is the module is ready to define itself, and if so,\ndefine it. If the silent argument is true, then it will just\ndefine, but not notify listeners, and not ask for a context-wide\ncheck of all loaded modules. That is useful for cycle breaking.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 1219,
            "description": "Given an event from a script node, get the requirejs info from it,\nand then removes the event listeners on the node.",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 1252,
            "description": "Set a configuration for the context.",
            "params": [
                {
                    "name": "cfg",
                    "description": "config object to integrate.",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 1462,
            "description": "Called to enable a module if it is still in the registry\nawaiting enablement. parent module is passed in for context,\nused by the optimizer.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 1474,
            "description": "Internal method used by environment adapters to complete a load event.\nA load event could be a script load or just a load pass from a synchronous\nload call.",
            "params": [
                {
                    "name": "moduleName",
                    "description": "the name of the module to potentially complete.",
                    "type": "String"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 1532,
            "description": "Converts a module name + .extension into an URL path.\n*Requires* the use of a module name. It does not support using\nplain URLs like nameToUrl.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 1549,
            "description": "Converts a module name to a file path. Supports cases where\nmoduleName may actually be just an URL.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 1619,
            "description": "Executes a module callack function. Broken out as a separate function\nsolely to allow the build system to sequence the files in the built\nlayer in the right sequence.",
            "access": "private",
            "tagname": "",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 1630,
            "description": "callback for script loads, used to check status of loading.",
            "params": [
                {
                    "name": "evt",
                    "description": "the event from the browser for the script\nthat was loaded.",
                    "type": "Event"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 1652,
            "description": "Callback for script errors.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 1664,
            "description": "Main entry point.\n\nIf the only argument to require is a string, then the module that\nis represented by that string is fetched for the appropriate context.\n\nIf the first argument is an array, then it will be treated as an array\nof dependency string names to fetch. An optional function callback can\nbe specified to execute when all of those dependencies are available.\n\nMake a local req variable to help Caja compliance (it assumes things\non a require that are not standardized), and to give a short\nname for minification/local scope use.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 1714,
            "description": "Support require.config() to make it easier to cooperate with other\nAMD loaders on globally agreed names.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 1722,
            "description": "Export require as a global, but only if it does not already exist.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 1757,
            "description": "Any errors that require explicitly generates will be passed to this\nfunction. Intercept/override it if you want custom error handling.",
            "params": [
                {
                    "name": "err",
                    "description": "the error object.",
                    "type": "Error"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 1766,
            "description": "Does the request to load a module for the browser case.\nMake this a separate function to allow other environments\nto override it.",
            "params": [
                {
                    "name": "context",
                    "description": "the require context to find state.",
                    "type": "Object"
                },
                {
                    "name": "moduleName",
                    "description": "the name of the module.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "the URL to the module.",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 1909,
            "description": "The function that handles definitions of modules. Differs from\nrequire() in that a string for the module should be the first argument,\nand the function to execute after dependencies are loaded should\nreturn a value to define the module corresponding to the first argument's\nname.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/demo/lib/require.js",
            "line": 1982,
            "description": "Executes the text. Normally just uses eval, but can be modified\nto use a better, environment-specific call. Only used for transpiling\nloader plugins, not for plain JS modules.",
            "params": [
                {
                    "name": "text",
                    "description": "the text to execute/evaluate.",
                    "type": "String"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/require-dust/require-dust.js",
            "line": 1,
            "description": "AMD implementation for dust.js\nThis is based on require-cs code.\nsee: http://github.com/jrburke/require-cs for details",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 1,
            "license": "RequireJS 2.1.11 Copyright (c) 2010-2014, The Dojo Foundation All Rights Reserved.\nAvailable via the MIT or new BSD license.\nsee: http://github.com/jrburke/requirejs for details",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 49,
            "description": "Helper function for iterating over an array. If the func returns\na true value, it will break out of the loop.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 64,
            "description": "Helper function for iterating over an array backwards. If the func\nreturns a true value, it will break out of the loop.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 87,
            "description": "Cycles over properties in an object and calls a function for each\nproperty value. If the function returns a truthy value, then the\niteration is stopped.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 103,
            "description": "Simple function to mix in properties from source into target,\nbut only if target does not already have a property of the same name.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 157,
            "description": "Constructs an error with a pointer to an URL with more information.",
            "params": [
                {
                    "name": "id",
                    "description": "the error ID that maps to an ID on a web page.",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "human readable error.",
                    "type": "String"
                },
                {
                    "name": "err",
                    "description": "the original error, if there is one.",
                    "type": "Error",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Error"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 225,
            "description": "Trims the . and .. from an array of path segments.\nIt will keep a leading path segment if a .. will become\nthe first path segment, to help with module name lookups,\nwhich act like paths, but can be remapped. But the end result,\nall paths that use this function should look normalized.\nNOTE: this method MODIFIES the input array.",
            "params": [
                {
                    "name": "ary",
                    "description": "the array of path segments.",
                    "type": "Array"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 258,
            "description": "Given a relative module name, like ./something, normalize it to\na real name that can be mapped to a path.",
            "params": [
                {
                    "name": "name",
                    "description": "the relative name",
                    "type": "String"
                },
                {
                    "name": "baseName",
                    "description": "a real name that the name arg is relative\nto.",
                    "type": "String"
                },
                {
                    "name": "applyMap",
                    "description": "apply the map config to the value. Should\nonly be done if this normalization is for a dependency ID.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "normalized name",
                "type": "String"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 400,
            "description": "Creates a module mapping that includes plugin prefix, module\nname, and path. If parentModuleMap is provided it will\nalso normalize the name via require.normalize()",
            "params": [
                {
                    "name": "name",
                    "description": "the module name",
                    "type": "String"
                },
                {
                    "name": "parentModuleMap",
                    "description": "parent module map\nfor the module name, used to resolve relative names.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "isNormalized:",
                    "description": "is the ID already normalized.\nThis is true if this call is done for a define() module ID.",
                    "type": "Boolean"
                },
                {
                    "name": "applyMap:",
                    "description": "apply the map config to the ID.\nShould only be true if this map is for a dependency.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 542,
            "description": "Internal method to transfer globalQueue items to this context's\ndefQueue.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 824,
            "description": "Checks if the module is ready to define itself, and if so,\ndefine it.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 1189,
            "description": "Given an event from a script node, get the requirejs info from it,\nand then removes the event listeners on the node.",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 1242,
            "description": "Set a configuration for the context.",
            "params": [
                {
                    "name": "cfg",
                    "description": "config object to integrate.",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 1429,
            "description": "Converts a module name + .extension into an URL path.\n*Requires* the use of a module name. It does not support using\nplain URLs like nameToUrl.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 1502,
            "description": "Called to enable a module if it is still in the registry\nawaiting enablement. A second arg, parent, the parent module,\nis passed in for context, when this method is overridden by\nthe optimizer. Not shown here to keep code compact.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 1515,
            "description": "Internal method used by environment adapters to complete a load event.\nA load event could be a script load or just a load pass from a synchronous\nload call.",
            "params": [
                {
                    "name": "moduleName",
                    "description": "the name of the module to potentially complete.",
                    "type": "String"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 1571,
            "description": "Converts a module name to a file path. Supports cases where\nmoduleName may actually be just an URL.\nNote that it **does not** call normalize on the moduleName,\nit is assumed to have already been normalized. This is an\ninternal API, not a public one. Use toUrl for the public API.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 1642,
            "description": "Executes a module callback function. Broken out as a separate function\nsolely to allow the build system to sequence the files in the built\nlayer in the right sequence.",
            "access": "private",
            "tagname": "",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 1653,
            "description": "callback for script loads, used to check status of loading.",
            "params": [
                {
                    "name": "evt",
                    "description": "the event from the browser for the script\nthat was loaded.",
                    "type": "Event"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 1675,
            "description": "Callback for script errors.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 1690,
            "description": "Main entry point.\n\nIf the only argument to require is a string, then the module that\nis represented by that string is fetched for the appropriate context.\n\nIf the first argument is an array, then it will be treated as an array\nof dependency string names to fetch. An optional function callback can\nbe specified to execute when all of those dependencies are available.\n\nMake a local req variable to help Caja compliance (it assumes things\non a require that are not standardized), and to give a short\nname for minification/local scope use.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 1740,
            "description": "Support require.config() to make it easier to cooperate with other\nAMD loaders on globally agreed names.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 1748,
            "description": "Execute something after the current tick\nof the event loop. Override for other envs\nthat have a better solution than setTimeout.",
            "params": [
                {
                    "name": "fn",
                    "description": "function to execute later.",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 1758,
            "description": "Export require as a global, but only if it does not already exist.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 1805,
            "description": "Any errors that require explicitly generates will be passed to this\nfunction. Intercept/override it if you want custom error handling.",
            "params": [
                {
                    "name": "err",
                    "description": "the error object.",
                    "type": "Error"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 1812,
            "description": "Creates the node for the load command. Only used in browser envs.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 1825,
            "description": "Does the request to load a module for the browser case.\nMake this a separate function to allow other environments\nto override it.",
            "params": [
                {
                    "name": "context",
                    "description": "the require context to find state.",
                    "type": "Object"
                },
                {
                    "name": "moduleName",
                    "description": "the name of the module.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "the URL to the module.",
                    "type": "Object"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 1981,
            "description": "The function that handles definitions of modules. Differs from\nrequire() in that a string for the module should be the first argument,\nand the function to execute after dependencies are loaded should\nreturn a value to define the module corresponding to the first argument's\nname.",
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/components/requirejs/require.js",
            "line": 2055,
            "description": "Executes the text. Normally just uses eval, but can be modified\nto use a better, environment-specific call. Only used for transpiling\nloader plugins, not for plain JS modules.",
            "params": [
                {
                    "name": "text",
                    "description": "the text to execute/evaluate.",
                    "type": "String"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/env/Device.js",
            "line": 12,
            "description": "Indicates whether or not the app is being run through Cordova",
            "itemtype": "method",
            "name": "isCordova",
            "static": 1,
            "return": {
                "description": "True if app is being run through Cordova",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/env/Device.js",
            "line": 23,
            "description": "Executes a callback when the device is ready to be used",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The handler to execute when the device is ready",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 14,
            "description": "When true, do not fire events",
            "itemtype": "property",
            "name": "suppressEvents",
            "type": "Boolean",
            "default": "false",
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 22,
            "description": "Bind an event handler to this object",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to execute when the event occurs",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 30,
            "description": "Bind an event handler to this object",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to execute when the event occurs",
                    "type": "Function"
                },
                {
                    "name": "thisp",
                    "description": "The context of the handler",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 45,
            "description": "Unbinds all event handler from this object",
            "itemtype": "method",
            "name": "off",
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 51,
            "description": "Unbinds all event handlers for an event",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 58,
            "description": "Unbinds a specific event handler",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function handling the event",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 66,
            "description": "Unbinds a specific event handler",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function handling the event",
                    "type": "Function"
                },
                {
                    "name": "thisp",
                    "description": "The context of the handler",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 107,
            "description": "Dispatches an event",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event to dispatch",
                    "type": "String"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 114,
            "description": "Dispactches an event with additional parameters",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event to dispatch",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Additional data points to add to the event",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 136,
            "description": "Creates an event object",
            "itemtype": "method",
            "name": "createEvent",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event to create",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The event object",
                "type": "Object"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 143,
            "description": "Creates an event object with additional params",
            "itemtype": "method",
            "name": "createEvent",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event to create",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Additional data points to add to the event",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The event object",
                "type": "Object"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 39,
            "description": "Whether or not animations are supported by the browser",
            "itemtype": "method",
            "name": "isSupported",
            "static": 1,
            "return": {
                "description": "True if CSS keyframe animations are supported",
                "type": "Boolean"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 50,
            "description": "Gets the name of the animation end event",
            "itemtype": "method",
            "name": "animationEndEvent",
            "static": 1,
            "return": {
                "description": "The name of the event",
                "type": "String"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 61,
            "description": "Converts a list of keyframes to a CSS animation",
            "itemtype": "method",
            "name": "keyframesToCSS",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the keyframe animation",
                    "type": "String"
                },
                {
                    "name": "keyframes",
                    "description": "A list of timestamped keyframes in the form {'0%': {color: 'red'}, '100%': 'color: blue'}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The CSS keyframe animation declaration",
                "type": "String"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 97,
            "description": "Generates a keyframe animation",
            "itemtype": "method",
            "name": "generateKeyframes",
            "static": 1,
            "params": [
                {
                    "name": "keyframes",
                    "description": "A list of timestamped keyframes in the form {'0%': {color: 'red'}, '100%': 'color: blue'}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The name fo the animation",
                "type": "String"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 105,
            "description": "Generates a keyframe animation",
            "itemtype": "method",
            "name": "generateKeyframes",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the animation",
                    "type": "String"
                },
                {
                    "name": "keyframes",
                    "description": "A list of timestamped keyframes in the form {'0%': {color: 'red'}, '100%': 'color: blue'}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The name fo the animation",
                "type": "String"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 123,
            "description": "Gets the name of the animation CSS property",
            "itemtype": "method",
            "name": "cssProperty",
            "static": 1,
            "return": {
                "description": "The name of the CSS property",
                "type": "String"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 134,
            "description": "Applies a keyframe animation to an element",
            "itemtype": "method",
            "name": "$.fn.keyframe",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the animation",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options for the animation",
                    "type": "Object"
                }
            ],
            "opt": "{Function} complete  A function to execute when the animation has completed",
            "default": "null",
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 155,
            "description": "Applies a keyframe animation to an element",
            "itemtype": "method",
            "name": "$.fn.keyframe",
            "params": [
                {
                    "name": "keyframes",
                    "description": "A list of timestamped keyframes in the form {'0%': {color: 'red'}, '100%': 'color: blue'}",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "Options for the animation",
                    "type": "Object"
                }
            ],
            "opt": "{Function} complete  A function to execute when the animation has completed",
            "default": "null",
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 178,
            "description": "Applies a keyframe animation to an element",
            "itemtype": "method",
            "name": "$.fn.keyframe",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the animation",
                    "type": "String"
                },
                {
                    "name": "duration",
                    "description": "The number of milliseconds that the animation lasts",
                    "type": "Number"
                },
                {
                    "name": "easing",
                    "description": "The name of a CSS easing function",
                    "type": "String"
                },
                {
                    "name": "delay",
                    "description": "The number of milliseconds before the animation should start",
                    "type": "Number"
                },
                {
                    "name": "iterations",
                    "description": "Either the number of iterations to play the animation or 'infinite'",
                    "type": "Object"
                },
                {
                    "name": "direction",
                    "description": "The name of a CSS animation direction",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A function to execute when the animation has completed",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 192,
            "description": "Applies a keyframe animation to an element",
            "itemtype": "method",
            "name": "$.fn.keyframe",
            "params": [
                {
                    "name": "keyframes",
                    "description": "A list of timestamped keyframes in the form {'0%': {color: 'red'}, '100%': 'color: blue'}",
                    "type": "Object"
                },
                {
                    "name": "duration",
                    "description": "The number of milliseconds that the animation lasts",
                    "type": "Number"
                },
                {
                    "name": "easing",
                    "description": "The name of a CSS easing function",
                    "type": "String"
                },
                {
                    "name": "delay",
                    "description": "The number of milliseconds before the animation should start",
                    "type": "Number"
                },
                {
                    "name": "iterations",
                    "description": "Either the number of iterations to play the animation or 'infinite'",
                    "type": "Object"
                },
                {
                    "name": "direction",
                    "description": "The name of a CSS animation direction",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A function to execute when the animation has completed",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 244,
            "description": "Binds an animation end handler to an element.",
            "itemtype": "method",
            "name": "$.fn.animationEnd",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback for when the animation ends",
                    "type": "Function"
                },
                {
                    "name": "delegate",
                    "description": "Selector for the descendant elements to which the handler will be bound",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback for when the animation ends",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 267,
            "description": "Binds an animation end handler to an element's next animation end event",
            "itemtype": "method",
            "name": "$.fn.nextAnimationEnd",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback for when the animation ends",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 274,
            "description": "Binds an animation end handler to an element's next animation end event",
            "itemtype": "method",
            "name": "$.fn.nextAnimationEnd",
            "params": [
                {
                    "name": "delegate",
                    "description": "Selector for the descendant elements to which the handler will be bound",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback for when the animation ends",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Spring.js",
            "line": 412,
            "description": "Applies a spring keyframe animation to an element",
            "itemtype": "method",
            "name": "$.fn.spring",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the animation",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "springOptions",
                    "description": "Options for the spring",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "tension",
                            "description": "Positive integer representing the tension on the spring. Default is 50",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "friction",
                            "description": "Positive integer representing the friction of the spring. Default is 2",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "initialState",
                            "description": "Initial transform values. If element has previously been transformed with a spring, the initialState values will be merged into the result of the previous transformation.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "scale",
                                    "description": "Unitless number N that will be represented in CSS as scale3d(n,n,n)",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "scale",
                                    "description": "Object with `x`, `y`, and `z` properties as numbers that will be represented in CSS as scale3d(x,y,z).  If any properties are not specified, they default to 1.",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "translate",
                                    "description": "Number N that will be represented in CSS as translate3d(Npx,Npx,Npx)",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "translate",
                                    "description": "Object with `x`, `y`, and `z` properties as numbers that will be represented in CSS as translate3d(xpx,ypx,zpx).  If any properties are not specified, they default to 0.",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "rotate",
                                    "description": "Number N that will be represented in CSS as rotateZ(Ndeg)",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "rotate",
                                    "description": "Object with `x`, `y`, and `z` properties as numbers that will be represented in CSS as rotateX(xdeg) rotateY(ydeg) rotateZ(zdeg).  If any properties are not specified, they default to 0.",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "skew",
                                    "description": "Number N that will be represented in CSS as skewX(Ndeg) skewY(Ndeg)",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "skew",
                                    "description": "Object with `x` and `y` properties as numbers that will be represented in CSS as skewX(xdeg) skewY(ydeg).  If any properties are not specified, they default to 0.",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "perspective",
                                    "description": "Unitless number N that will be represented in CSS as perspective(Npx)",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "differences",
                            "description": "Differences between initial and final transform values. Same format as `initialState`",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "resultState",
                            "description": "Final transform values. Same format as `initialState`. If `differences` are also specified, `resultState` will be ignored",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "keyframeOptions",
                    "description": "Options for the animation",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "duration",
                            "description": "The number of milliseconds that the animation lasts",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "easing",
                            "description": "The name of a CSS easing function",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "delay",
                            "description": "The number of milliseconds before the animation should start",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "iterations",
                            "description": "Either the number of iterations to play the animation or 'infinite'",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "direction",
                            "description": "The name of a CSS animation direction",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "fillMode",
                            "description": "The name of a CSS animation fill-mode",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "complete",
                            "description": "A function to execute when the animation has completed",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "default": "null",
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Spring"
        },
        {
            "file": "src/fx/Transform.js",
            "line": 92,
            "description": "Whether or not transforms are supported by the browser",
            "itemtype": "method",
            "name": "isSupported",
            "static": 1,
            "return": {
                "description": "True when transforms are supported",
                "type": "Boolean"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/fx/Transform.js",
            "line": 103,
            "description": "Whether or not 3D transforms are supported by the browser",
            "itemtype": "method",
            "name": "is3dSupported",
            "static": 1,
            "return": {
                "description": "True when 3D transforms are supported",
                "type": "Boolean"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/fx/Transform.js",
            "line": 114,
            "description": "Converts a transform hash into a CSS string",
            "itemtype": "method",
            "name": "toCSS",
            "static": 1,
            "params": [
                {
                    "name": "opts",
                    "description": "A hash of CSS transform values, with properties in\n     the form {translateX: 1, translateY: 1} or {translate: {x: 1, y: 1}}",
                    "type": "Object"
                }
            ],
            "opt": "{String} perspective  A string containing the perspective transform values",
            "return": {
                "description": "The generated CSS string",
                "type": "String"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/fx/Transform.js",
            "line": 157,
            "description": "Gets the name of the transform CSS property",
            "itemtype": "method",
            "name": "cssProperty",
            "static": 1,
            "return": {
                "description": "The name of the CSS property",
                "type": "String"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/fx/Transform.js",
            "line": 168,
            "description": "Transforms an element",
            "itemtype": "method",
            "name": "$.fn.transform",
            "params": [
                {
                    "name": "value",
                    "description": "The CSS transform string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/fx/Transform.js",
            "line": 175,
            "description": "Transforms an element",
            "itemtype": "method",
            "name": "$.fn.transform",
            "params": [
                {
                    "name": "opt",
                    "description": "A hash of CSS transform values, with properties in\n     the form {translateX: 1, translateY: 1} or {translate: {x: 1, y: 1}}",
                    "type": "Object"
                }
            ],
            "opt": "{String} perspective  A string containing the perspective transform values",
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/fx/Transform.js",
            "line": 204,
            "description": "Transforms an element",
            "itemtype": "method",
            "name": "$.fn.transform",
            "params": [
                {
                    "name": "value",
                    "description": "The CSS transform string",
                    "type": "String"
                },
                {
                    "name": "origin",
                    "description": "The CSS transform origin",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/fx/Transform.js",
            "line": 212,
            "description": "Transforms an element",
            "itemtype": "method",
            "name": "$.fn.transform",
            "params": [
                {
                    "name": "opt",
                    "description": "A hash of CSS transform values, with properties in\n     the form {translateX: 1, translateY: 1} or {translate: {x: 1, y: 1}}",
                    "type": "Object"
                },
                {
                    "name": "origin",
                    "description": "The CSS transform origin",
                    "type": "String"
                }
            ],
            "opt": "{String} perspective  A string containing the perspective transform values",
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/fx/Transform.js",
            "line": 242,
            "description": "Transforms an element",
            "itemtype": "method",
            "name": "$.fn.transform",
            "params": [
                {
                    "name": "value",
                    "description": "The CSS transform string",
                    "type": "String"
                },
                {
                    "name": "origin",
                    "description": "The CSS transform origin, in the form {x: N, y: N},\n     where N is a decimal percentage between -1 and 1 or N is a pixel value > 1 or < -1.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/fx/Transform.js",
            "line": 251,
            "description": "Transforms an element",
            "itemtype": "method",
            "name": "$.fn.transform",
            "params": [
                {
                    "name": "opt",
                    "description": "A hash of CSS transform values, with properties in\n     the form {translateX: 1, translateY: 1} or {translate: {x: 1, y: 1}}",
                    "type": "Object"
                },
                {
                    "name": "origin",
                    "description": "The CSS transform origin, in the form {x: N, y: N},\n     where N is a decimal percentage between -1 and 1 or N is a pixel value > 1 or < -1.",
                    "type": "Object"
                }
            ],
            "opt": "{String} perspective  A string containing the perspective transform values",
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 36,
            "description": "Whether or not transitions are supported by the browser",
            "itemtype": "method",
            "name": "isSupported",
            "static": 1,
            "return": {
                "description": "True when CSS transitions are supported",
                "type": "Boolean"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 47,
            "description": "Generates a CSS transition property string from several values",
            "itemtype": "method",
            "name": "toCSS",
            "static": 1,
            "params": [
                {
                    "name": "props",
                    "description": "A hash in which the keys are the names of the CSS properties",
                    "type": "Object"
                },
                {
                    "name": "duration",
                    "description": "The amount of time in milliseconds that the transition lasts",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The generated CSS string",
                "type": "String"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 56,
            "description": "Generates a CSS transition property string from several values",
            "itemtype": "method",
            "name": "toCSS",
            "static": 1,
            "params": [
                {
                    "name": "props",
                    "description": "An array of CSS property names",
                    "type": "Array"
                },
                {
                    "name": "duration",
                    "description": "The amount of time in milliseconds that the transition lasts",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The generated CSS string",
                "type": "String"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 65,
            "description": "Generates a CSS transition property string from several values",
            "itemtype": "method",
            "name": "toCSS",
            "static": 1,
            "params": [
                {
                    "name": "props",
                    "description": "A hash in which the keys are the names of the CSS properties",
                    "type": "Object"
                },
                {
                    "name": "duration",
                    "description": "The amount of time in milliseconds that the transition lasts",
                    "type": "Number"
                },
                {
                    "name": "easing",
                    "description": "The interpolation for the transition",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The generated CSS string",
                "type": "String"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 75,
            "description": "Generates a CSS transition property string from several values",
            "itemtype": "method",
            "name": "toCSS",
            "static": 1,
            "params": [
                {
                    "name": "props",
                    "description": "An array of CSS property names",
                    "type": "Array"
                },
                {
                    "name": "duration",
                    "description": "The amount of time in milliseconds that the transition lasts",
                    "type": "Number"
                },
                {
                    "name": "easing",
                    "description": "The interpolation for the transition",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The generated CSS string",
                "type": "String"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 99,
            "description": "Gets the name of the transition CSS property",
            "itemtype": "method",
            "name": "cssProperty",
            "static": 1,
            "return": {
                "description": "The name of the CSS property",
                "type": "String"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 110,
            "description": "Gets the name of the transition end event",
            "itemtype": "method",
            "name": "transitionEndEvent",
            "static": 1,
            "return": {
                "description": "The name of the event",
                "type": "String"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 121,
            "description": "Causes an element to undergo a transition",
            "itemtype": "method",
            "name": "$.fn.transition",
            "params": [
                {
                    "name": "props",
                    "description": "The CSS property values at the end of the transition",
                    "type": "Object"
                },
                {
                    "name": "duration",
                    "description": "The amount of time in milliseconds that the transition lasts",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 129,
            "description": "Causes an element to undergo a transition",
            "itemtype": "method",
            "name": "$.fn.transition",
            "params": [
                {
                    "name": "props",
                    "description": "The CSS property values at the end of the transition",
                    "type": "Object"
                },
                {
                    "name": "duration",
                    "description": "The amount of time in milliseconds that the transition lasts",
                    "type": "Number"
                },
                {
                    "name": "easing",
                    "description": "The interpolation for the transition",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 138,
            "description": "Causes an element to undergo a transition",
            "itemtype": "method",
            "name": "$.fn.transition",
            "params": [
                {
                    "name": "props",
                    "description": "The CSS property values at the end of the transition",
                    "type": "Object"
                },
                {
                    "name": "duration",
                    "description": "The amount of time in milliseconds that the transition lasts",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "A function to execute when the transition completes",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 147,
            "description": "Causes an element to undergo a transition",
            "itemtype": "method",
            "name": "$.fn.transition",
            "params": [
                {
                    "name": "props",
                    "description": "The CSS property values at the end of the transition",
                    "type": "Object"
                },
                {
                    "name": "duration",
                    "description": "The amount of time in milliseconds that the transition lasts",
                    "type": "Number"
                },
                {
                    "name": "easing",
                    "description": "The interpolation for the transition",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A function to execute when the transition completes",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 180,
            "description": "Binds a transition end handler to an element.",
            "itemtype": "method",
            "name": "$.fn.transitionEnd",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback for when the transition ends",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 187,
            "description": "Binds a transition end handler to an element.",
            "itemtype": "method",
            "name": "$.fn.transitionEnd",
            "params": [
                {
                    "name": "delegate",
                    "description": "Selector for the descendant elements to which the handlers will be bound",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback for when the transition ends",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 203,
            "description": "Binds a transition end handler to an element's next transition end event.",
            "itemtype": "method",
            "name": "$.fn.nextTransitionEnd",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback for when the transition ends",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 210,
            "description": "Binds a transition end handler to an element's next transition end event.",
            "itemtype": "method",
            "name": "$.fn.nextTransitionEnd",
            "params": [
                {
                    "name": "delegate",
                    "description": "Selector for the descendant elements to which the handlers will be bound",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback for when the transition ends",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 49,
            "description": "Creates an application",
            "is_constructor": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "A callback to execute when the application is initialized but not yet ready",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 63,
            "description": "The default URL that the app will navigate to",
            "itemtype": "property",
            "name": "initRoute",
            "default": "'/'",
            "type": "String",
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 72,
            "description": "The default state object to supply the initial route",
            "itemtype": "property",
            "name": "initState",
            "default": "null",
            "type": "{Object}",
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 80,
            "description": "The default params object to supply the initial route",
            "itemtype": "property",
            "name": "initParams",
            "default": "null",
            "type": "{Object}",
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 89,
            "description": "The selector used to identify the DOM element that will contain views",
            "itemtype": "property",
            "name": "viewRootSelector",
            "default": "#view-root",
            "type": "{String}",
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 98,
            "description": "Handler for when the user attempts to navigate to an invalid route",
            "itemtype": "method",
            "name": "onInvalidRoute",
            "params": [
                {
                    "name": "err",
                    "description": "The routing error",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 111,
            "description": "Handler for when the user taps on a <A> element",
            "itemtype": "method",
            "name": "onTapLink",
            "params": [
                {
                    "name": "e",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 153,
            "description": "Makes an AJAX request if the user is online. If the user is offline, the returned\npromise will be rejected with the string argument \"offline\". (Alias for [[Lavaca.net.Connectivity]].ajax)",
            "itemtype": "method",
            "name": "ajax",
            "params": [
                {
                    "name": "opts",
                    "description": "jQuery-style AJAX options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 164,
            "description": "Initializes the application",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "args",
                    "description": "Data of any type from a resolved promise returned by Application.beforeInit(). Defaults to null.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that resolves when the application is ready for use",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 177,
            "description": "View manager used to transition between UI states",
            "itemtype": "property",
            "name": "viewManager",
            "default": "null",
            "type": "{Lavaca.mvc.ViewManager}",
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 185,
            "description": "Router used to manage application traffic and URLs",
            "itemtype": "property",
            "name": "router",
            "default": "null",
            "type": "{Lavaca.mvc.Router}",
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 221,
            "description": "Binds a global link handler",
            "itemtype": "method",
            "name": "bindLinkHandler",
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 237,
            "description": "Gets initial route based on query string returned by server 302 redirect",
            "itemtype": "property",
            "name": "initialStandardRoute",
            "default": "null",
            "type": "{String}",
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 247,
            "description": "Handles asynchronous requests that need to happen before Application.init() is called in the constructor",
            "itemtype": "method",
            "name": "beforeInit",
            "type": "String",
            "params": [
                {
                    "name": "Config",
                    "description": "cache that's been initialized",
                    "type": "Lavaca.util.Config"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 90,
            "description": "The type of model object to use for items in this collection",
            "itemtype": "property",
            "name": "TModel",
            "default": "[[Lavaca.mvc.Model]]",
            "type": "Function",
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 99,
            "description": "The name of the property containing the collection's items when using toObject()",
            "itemtype": "property",
            "name": "itemsProperty",
            "default": "'items'",
            "type": "String",
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 107,
            "description": "Whether to allow duplicated IDs in collection items. If false, a later added item will overwrite the one with same ID.",
            "itemtype": "property",
            "name": "allowDuplicatedIds",
            "default": "false",
            "type": "Boolean",
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 115,
            "description": "Removes and disposes of all models in the collection",
            "itemtype": "method",
            "name": "clear",
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 125,
            "description": "clears only the models in the collection",
            "itemtype": "method",
            "name": "clearModels",
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 142,
            "description": "Readies data to be an item in the collection",
            "itemtype": "method",
            "name": "prepare",
            "params": [
                {
                    "name": "data",
                    "description": "The model or object to be added",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The model derived from the data",
                "type": "Lavaca.mvc.Model"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 165,
            "description": "Determines whether or not an attribute can be assigned",
            "itemtype": "method",
            "name": "canSet",
            "params": [
                {
                    "name": "attribute",
                    "description": "The name of the attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if you can assign to the attribute",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 175,
            "description": "Inserts one or more items into the collection at the specified index",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "insertIndex",
                    "description": "index at which items will be inserted",
                    "type": "Number"
                },
                {
                    "name": "newItems",
                    "description": "Array of objects or Models to insert",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "false if no items were able to be added, true otherwise.",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 183,
            "description": "Inserts one or more items into the collection at the specified index",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "insertIndex",
                    "description": "index at which items will be inserted",
                    "type": "Number"
                },
                {
                    "name": "items",
                    "description": "One or more objects or Models to insert",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "false if no items were able to be added, true otherwise.",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 234,
            "description": "Adds one or more items to the collection. Items with IDs matching an item already in this collection will replace instead of add.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "item",
                    "description": "One or more items to add to the collection",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if an item was added, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 241,
            "description": "Adds one or more items to the collection. Items with IDs matching an item already in this collection will replace instead of add.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "items",
                    "description": "An array of items to add to the collection",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "True if an item was added, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 255,
            "description": "Moves an item",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "model",
                    "description": "The model to move",
                    "type": "Lavaca.mvc.Model"
                },
                {
                    "name": "newIndex",
                    "description": "The new index at which the model should be placed",
                    "type": "Number"
                }
            ],
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 263,
            "description": "Moves an item",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "oldIndex",
                    "description": "The current index of the model",
                    "type": "Number"
                },
                {
                    "name": "newIndex",
                    "description": "The new index at which the model should be placed",
                    "type": "Number"
                }
            ],
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 286,
            "description": "Removes an item from the collection",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the model to remove",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if an item was removed, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 293,
            "description": "Removes an item from the collection",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "item",
                    "description": "The models to remove from the collection",
                    "type": "Lavaca.mvc.Model"
                }
            ],
            "return": {
                "description": "True if an item was removed, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 300,
            "description": "Removes an item from the collection",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "item",
                    "description": "One object containing attributes matching any models to remove",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if at least one item was removed, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 307,
            "description": "Removes an item from the collection",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "item",
                    "description": "N number of object arguments containing attributes matching any models to remove",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An array of booleans indicating if at least one item was removed by matching each argument",
                "type": "Array"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 314,
            "description": "Removes an item from the collection",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "items",
                    "description": "An array of objects containing attributes matching any models to remove",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array of booleans indicating if at least one item was removed by matching each element in the array",
                "type": "Array"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 320,
            "description": "Removes an item from the collection",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "test",
                    "description": "A function to check each model in the collection in the form\n    test(index, model). If the test function returns true, the model will be removed",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "True if at least one item was removed, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 383,
            "description": "Compiles a list of items matching an attribute hash",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "The",
                    "description": "attributes to test against each model",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A list of this collection's models that matched the attributes",
                "type": "Array"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 390,
            "description": "Compiles a list of items matching an attribute hash",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "attributes",
                    "description": "The attributes to test against each model",
                    "type": "Object"
                },
                {
                    "name": "maxResults",
                    "description": "The maximum number of results to return",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A list of this collection's models that matched the attributes",
                "type": "Array"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 398,
            "description": "Compiles a list of items matching an attribute hash",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "test",
                    "description": "A function to check each model in the collection in the form\n    test(index, model). If the test function returns true, the model will be included\n    in the result",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A list of this collection's models that passed the test",
                "type": "Array"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 408,
            "description": "Compiles a list of items matching an attribute hash",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "test",
                    "description": "A function to check each model in the collection in the form\n    test(index, model). If the test function returns true, the model will be included\n    in the result",
                    "type": "Function"
                },
                {
                    "name": "maxResults",
                    "description": "The maximum number of results to return",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A list of this collection's models that passed the test",
                "type": "Array"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 445,
            "description": "Finds the first item matching an attribute hash",
            "itemtype": "method",
            "name": "first",
            "params": [
                {
                    "name": "attributes",
                    "description": "The attributes to test against each model",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The first model that matched the attributes (or null)",
                "type": "Lavaca.mvc.Model"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 452,
            "description": "Finds the first item that passed a functional test",
            "itemtype": "method",
            "name": "first",
            "params": [
                {
                    "name": "test",
                    "description": "A function to check each model in the collection in the form\n    test(index, model). If the test function returns true, the model will be included\n    as the result",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The first model that passed the test (or null)",
                "type": "Lavaca.mvc.Model"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 464,
            "description": "Finds the index of the first item matching an attribute hash",
            "itemtype": "method",
            "name": "indexOf",
            "sig": "Finds the index of the first item matching an attribute hash",
            "params": [
                {
                    "name": "attributes",
                    "description": "The attributes to test against each model",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Index of the matching model, or -1 if no match is found",
                "type": "Number"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 473,
            "description": "Finds the index of the first item that passed a functional test",
            "itemtype": "method",
            "name": "indexOf",
            "params": [
                {
                    "name": "test",
                    "description": "A function to check each model in the collection in the form\n    test(index, model). If the test function returns true, the model will be included\n    as the result",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Index of the matching model, or -1 if no match is found",
                "type": "Number"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 485,
            "description": "Gets the item at a specific index",
            "itemtype": "method",
            "name": "itemAt",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the item",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The model at that index",
                "type": "Lavaca.mvc.Model"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 495,
            "description": "Gets the number of items in the collection",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "The number of items in the collection",
                "type": "Number"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 504,
            "description": "Executes a callback for each model in the collection. To stop iteration immediately,\nreturn false from the callback.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "callback",
                    "description": "A function to execute for each item, callback(index, model)",
                    "type": "Function"
                }
            ],
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 511,
            "description": "Executes a callback for each model in the collection. To stop iteration immediately,\nreturn false from the callback.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "callback",
                    "description": "A function to execute for each item, callback(index, model)",
                    "type": "Function"
                },
                {
                    "name": "thisp",
                    "description": "The context of the callback",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 529,
            "description": "Sorts the models in the collection using the specified attribute, in ascending order.",
            "itemtype": "method",
            "name": "sort",
            "params": [
                {
                    "name": "attribute",
                    "description": "Attribute to sort by",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The updated collection (for chaining)",
                "type": "Lavaca.mvc.Collection"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 536,
            "description": "Sorts the models in the collection using the specified attribute, in either ascending or descending order.",
            "itemtype": "method",
            "name": "sort",
            "params": [
                {
                    "name": "attribute",
                    "description": "Attribute to sort by",
                    "type": "String"
                },
                {
                    "name": "descending",
                    "description": "Use descending sort. Defaults to false",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The updated collection (for chaining)",
                "type": "Lavaca.mvc.Collection"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 545,
            "description": "Sorts the models in the collection according to the specified compare function.",
            "itemtype": "method",
            "name": "sort",
            "params": [
                {
                    "name": "compareFunction",
                    "description": "A function that compares two models. It should work\n    in the same manner as the default Array.sort method in javascript.  i.e. the function\n    should have a signature of function(modelA, modelB) and should return a negative integer\n    if modelA should come before modelB, a positive integer if modelB should come before modelA\n    and integer 0 if modelA and modelB are equivalent.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The updated collection (for chaining)",
                "type": "Lavaca.mvc.Collection"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 576,
            "description": "Reverses the order of the models in the collection",
            "itemtype": "method",
            "name": "reverse",
            "return": {
                "description": "The updated collection (for chaining)",
                "type": "Lavaca.mvc.Collection"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 600,
            "description": "Handler invoked when an item in the collection has an event. Triggers an [[Lavaca.mvc.ItemEvent]].",
            "itemtype": "method",
            "name": "onItemEvent",
            "params": [
                {
                    "name": "e",
                    "description": "The item event",
                    "type": "Lavaca.mvc.ModelEvent"
                }
            ],
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 623,
            "description": "Processes the data received from a fetch request",
            "itemtype": "method",
            "name": "onFetchSuccess",
            "params": [
                {
                    "name": "response",
                    "description": "The response data",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 645,
            "description": "Saves the model to the server via POST",
            "itemtype": "method",
            "name": "saveToServer",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to which to post the data",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 671,
            "description": "Converts this model to a key-value hash",
            "itemtype": "method",
            "name": "toObject",
            "params": [
                {
                    "name": "idOnly",
                    "description": "When true, only include item IDs for pre-existing items",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The key-value hash",
                "type": "Object"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 689,
            "description": "Filters the raw response from onFetchSuccess() down to a custom object. (Meant to be overridden)",
            "itemtype": "method",
            "name": "responseFilter",
            "params": [
                {
                    "name": "response",
                    "description": "The raw response passed in onFetchSuccess()",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object or array to be applied to this collection instance",
                "type": "Object"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Controller.js",
            "line": 28,
            "description": "The application's router",
            "itemtype": "property",
            "name": "router",
            "type": "Lavaca.mvc.Router",
            "default": "null",
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/mvc/Controller.js",
            "line": 34,
            "description": "The application's view manager",
            "itemtype": "property",
            "name": "viewManager",
            "type": "Lavaca.mvc.ViewManager",
            "default": "null",
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/mvc/Controller.js",
            "line": 40,
            "description": "Executes an action on this controller",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "action",
                    "description": "The name of the controller method to call",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Key-value arguments to pass to the action",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/mvc/Controller.js",
            "line": 48,
            "description": "Executes an action on this controller",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "action",
                    "description": "The name of the controller method to call",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Key-value arguments to pass to the action",
                    "type": "Object"
                },
                {
                    "name": "state",
                    "description": "A history record object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/mvc/Controller.js",
            "line": 76,
            "description": "Loads a view",
            "itemtype": "method",
            "name": "view",
            "params": [
                {
                    "name": "cacheKey",
                    "description": "The key under which to cache the view",
                    "type": "String"
                },
                {
                    "name": "TView",
                    "description": "The type of view to load (should derive from [[Lavaca.mvc.View]])",
                    "type": "Function"
                },
                {
                    "name": "model",
                    "description": "The data object to pass to the view",
                    "type": "Object"
                },
                {
                    "name": "layer",
                    "description": "The integer indicating what UI layer the view sits on",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/mvc/Controller.js",
            "line": 89,
            "description": "Adds a state to the browser history",
            "itemtype": "method",
            "name": "history",
            "params": [
                {
                    "name": "state",
                    "description": "A data object associated with the page state",
                    "type": "Object"
                },
                {
                    "name": "title",
                    "description": "The title of the page state",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The URL of the page state",
                    "type": "String"
                },
                {
                    "name": "useReplace",
                    "description": "The bool to decide if to remove previous history",
                    "type": "Boolean"
                }
            ],
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/mvc/Controller.js",
            "line": 106,
            "description": "Convenience method for formatting URLs",
            "itemtype": "method",
            "name": "url",
            "params": [
                {
                    "name": "str",
                    "description": "The URL string",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Format arguments to insert into the URL",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The formatted URL",
                "type": "String"
            },
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/mvc/Controller.js",
            "line": 117,
            "description": "Directs the user to another route",
            "itemtype": "method",
            "name": "redirect",
            "params": [
                {
                    "name": "str",
                    "description": "The URL string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/mvc/Controller.js",
            "line": 125,
            "description": "Directs the user to another route",
            "itemtype": "method",
            "name": "redirect",
            "params": [
                {
                    "name": "str",
                    "description": "The URL string",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Format arguments to insert into the URL",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/mvc/Controller.js",
            "line": 135,
            "description": "Readies the controller for garbage collection",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 71,
            "description": "The name of the event-causing attribute",
            "itemtype": "property",
            "name": "attribute",
            "type": "String",
            "default": "null",
            "class": "lavaca.mvc.AttributeEvent"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 76,
            "description": "The value of the attribute before the event",
            "itemtype": "property",
            "name": "previous",
            "type": "Object",
            "default": "null",
            "class": "lavaca.mvc.AttributeEvent"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 81,
            "description": "The value of the attribute after the event",
            "itemtype": "property",
            "name": "value",
            "type": "Object",
            "default": "null",
            "class": "lavaca.mvc.AttributeEvent"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 86,
            "description": "A list of validation messages the change caused",
            "itemtype": "property",
            "name": "messages",
            "type": "Array",
            "default": "[]",
            "class": "lavaca.mvc.AttributeEvent"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 129,
            "description": "When true, attributes are not validated",
            "itemtype": "property",
            "name": "suppressValidation",
            "default": "false",
            "type": "Boolean",
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 138,
            "description": "When true, changes to attributes are not tracked",
            "itemtype": "property",
            "name": "suppressTracking",
            "default": "false",
            "type": "Boolean",
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 147,
            "description": "Gets the value of a attribute",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "attribute",
                    "description": "The name of the attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value of the attribute, or null if there is no value",
                "type": "Object"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 163,
            "description": "Determines whether or not an attribute can be assigned",
            "itemtype": "method",
            "name": "canSet",
            "params": [
                {
                    "name": "attribute",
                    "description": "The name of the attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if you can assign to the attribute",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 173,
            "description": "Sets the value of the attribute, if it passes validation",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "attribute",
                    "description": "The name of the attribute",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if attribute was set, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 182,
            "description": "Sets the value of the attribute, if it passes validation",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "attribute",
                    "description": "The name of the attribute",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "Object"
                },
                {
                    "name": "flag",
                    "description": "A metadata flag describing the attribute",
                    "type": "String"
                },
                {
                    "name": "suppress",
                    "description": "When true, validation, events and tracking are suppressed",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "True if attribute was set, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 222,
            "description": "Determines whether or not this model has a named attribute",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "attribute",
                    "description": "The name of the attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if the attribute exists and has a value",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 232,
            "description": "The name of the ID attribute",
            "itemtype": "property",
            "name": "id",
            "default": "'id'",
            "type": "String",
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 241,
            "description": "Gets the ID of the model",
            "itemtype": "method",
            "name": "id",
            "return": {
                "description": "The ID of the model",
                "type": "String"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 250,
            "description": "Determines whether or not this model has been saved before",
            "itemtype": "method",
            "name": "isNew",
            "return": {
                "description": "True when the model has no ID associated with it",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 259,
            "description": "Ensures that a map is suitable to be applied to this model",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "map",
                    "description": "The string or key-value hash to parse",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The parsed version of the map",
                "type": "Object"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 272,
            "description": "Sets each attribute of this model according to the map",
            "itemtype": "method",
            "name": "apply",
            "params": [
                {
                    "name": "map",
                    "description": "The string or key-value map to parse and apply",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 278,
            "description": "Sets each attribute of this model according to the map",
            "itemtype": "method",
            "name": "apply",
            "params": [
                {
                    "name": "map",
                    "description": "The string or key-value map to parse and apply",
                    "type": "Object"
                },
                {
                    "name": "suppress",
                    "description": "When true, validation, events and tracking are suppressed",
                    "type": "Boolean"
                }
            ],
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 293,
            "description": "Removes all data from the model or removes selected flag from model.",
            "itemtype": "method",
            "name": "clear",
            "sig": "Removes all flagged data from the model",
            "params": [
                {
                    "name": "flag",
                    "description": "The metadata flag describing the data to remove",
                    "type": "String"
                }
            ],
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 323,
            "description": "Makes a copy of this model",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "The copy",
                "type": "Lavaca.mvc.Model"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 332,
            "description": "Adds a validation rule to this model",
            "itemtype": "method",
            "name": "addRule",
            "params": [
                {
                    "name": "attribute",
                    "description": "The name of the attribute to which the rule applies",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to use to validate the attribute, in the\n  form callback(attribute, value)",
                    "type": "Function"
                },
                {
                    "name": "message",
                    "description": "A text message used when a value fails the test",
                    "type": "String"
                }
            ],
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 344,
            "description": "Validates all attributes on the model",
            "itemtype": "method",
            "name": "validate",
            "return": {
                "description": "A map of attribute names to validation error messages",
                "type": "Object"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 350,
            "description": "Runs validation tests for a specific attribute",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "The",
                    "description": "name of the attribute to test",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A list of validation error messages",
                "type": "Array"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 357,
            "description": "Runs validation against a potential value for a attribute",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "attribute",
                    "description": "The name of the attribute",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The potential value for the attribute",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A list of validation error messages",
                "type": "Array"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 389,
            "description": "Processes the data received from a fetch request",
            "itemtype": "method",
            "name": "onFetchSuccess",
            "params": [
                {
                    "name": "response",
                    "description": "The response data",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 403,
            "description": "Triggered when the model is unable to fetch data",
            "itemtype": "method",
            "name": "onFetchError",
            "params": [
                {
                    "name": "value",
                    "description": "The error value",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 412,
            "description": "Loads the data for this model from the server and only apply to this model attributes (Note: Does not clear the model first)",
            "itemtype": "event",
            "name": "fetchError",
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 419,
            "description": "Loads the data for this model from the server and only apply to this model attributes (Note: Does not clear the model first)",
            "itemtype": "method",
            "name": "fetch",
            "params": [
                {
                    "name": "url",
                    "description": "The URL from which to load the data",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 426,
            "description": "Loads the data for this model from the server and only apply to this model attributes (Note: Does not clear the model first)",
            "itemtype": "method",
            "name": "fetch",
            "params": [
                {
                    "name": "options",
                    "description": "jQuery AJAX settings. If url property is missing, fetch() will try to use the url property on this model",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 433,
            "description": "Loads the data for this model from the server and only apply to this model attributes (Note: Does not clear the model first)",
            "itemtype": "method",
            "name": "fetch",
            "params": [
                {
                    "name": "url",
                    "description": "The URL from which to load the data",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "jQuery AJAX settings",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 453,
            "description": "Converts a relative path to an absolute api url based on environment config 'apiRoot'",
            "itemtype": "method",
            "name": "getApiURL",
            "params": [
                {
                    "name": "relPath",
                    "description": "A relative path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A formated api url or an apparently bad url '/please_set_model_url' if relPath argument is faslsy",
                "type": "String"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 470,
            "description": "Saves the model",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "callback",
                    "description": "A function callback(model, changedAttributes, attributes)\n  that returns either a promise or a truthy value\n  indicating whether the operation failed or succeeded",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 480,
            "description": "Saves the model",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "callback",
                    "description": "A function callback(model, changedAttributes, attributes)\n  that returns either a promise or a truthy value\n  indicating whether the operation failed or succeeded",
                    "type": "Function"
                },
                {
                    "name": "thisp",
                    "description": "The context for the callback",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 526,
            "description": "Saves the model to the server via POST",
            "itemtype": "method",
            "name": "saveToServer",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to which to post the data",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 552,
            "description": "Converts this model to a key-value hash",
            "itemtype": "method",
            "name": "toObject",
            "return": {
                "description": "The key-value hash",
                "type": "Object"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 571,
            "description": "Converts this model to JSON",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "The JSON string representing the model",
                "type": "String"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 580,
            "description": "Bind an event handler to this object",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to execute when the event occurs",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 589,
            "description": "Bind an event handler to this object",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "attr",
                    "description": "An attribute to which to limit the scope of events",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to execute when the event occurs",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 598,
            "description": "Bind an event handler to this object",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to execute when the event occurs",
                    "type": "Function"
                },
                {
                    "name": "thisp",
                    "description": "The context of the handler",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 606,
            "description": "Bind an event handler to this object",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "attr",
                    "description": "An attribute to which to limit the scope of events",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to execute when the event occurs",
                    "type": "Function"
                },
                {
                    "name": "thisp",
                    "description": "The context of the handler",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 630,
            "description": "Filters the raw response from onFetchSuccess() down to a custom object. (Meant to be overriden)",
            "itemtype": "method",
            "name": "responseFilter",
            "params": [
                {
                    "name": "response",
                    "description": "The raw response passed in onFetchSuccess()",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object to be applied to this model instance",
                "type": "Object"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 641,
            "field": "{String} SENSITIVE",
            "static": 1,
            "default": "'sensitive'\nFlag indicating that data is sensitive",
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 648,
            "field": "{String} DO_NOT_COMPUTE",
            "static": 1,
            "default": "'do_not_compute'\nFlag indicating that the selected attribute should not be executed\nas a computed property and should instead just return the function.",
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Route.js",
            "line": 87,
            "description": "Tests if this route applies to a URL",
            "itemtype": "method",
            "name": "matches",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to test",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True when this route matches the URL",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Route"
        },
        {
            "file": "src/mvc/Route.js",
            "line": 97,
            "description": "Converts a URL into a params object according to this route's pattern",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to convert",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The params object",
                "type": "Object"
            },
            "class": "lavaca.mvc.Route"
        },
        {
            "file": "src/mvc/Route.js",
            "line": 148,
            "description": "Executes this route's controller action see if work",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "url",
                    "description": "The URL that supplies parameters to this route",
                    "type": "String"
                },
                {
                    "name": "router",
                    "description": "The router used by the application",
                    "type": "Lavaca.mvc.Router"
                },
                {
                    "name": "viewManager",
                    "description": "The view manager used by the application",
                    "type": "Lavaca.mvc.ViewManager"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Route"
        },
        {
            "file": "src/mvc/Route.js",
            "line": 157,
            "description": "Executes this route's controller action see if work",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "url",
                    "description": "The URL that supplies parameters to this route",
                    "type": "String"
                },
                {
                    "name": "router",
                    "description": "The router used by the application",
                    "type": "Lavaca.mvc.Router"
                },
                {
                    "name": "viewManager",
                    "description": "The view manager used by the application",
                    "type": "Lavaca.mvc.ViewManager"
                },
                {
                    "name": "state",
                    "description": "A history record object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Route"
        },
        {
            "file": "src/mvc/Route.js",
            "line": 167,
            "description": "Executes this route's controller action see if work",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "url",
                    "description": "The URL that supplies parameters to this route",
                    "type": "String"
                },
                {
                    "name": "router",
                    "description": "The router used by the application",
                    "type": "Lavaca.mvc.Router"
                },
                {
                    "name": "viewManager",
                    "description": "The view manager used by the application",
                    "type": "Lavaca.mvc.ViewManager"
                },
                {
                    "name": "state",
                    "description": "A history record object",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Additional parameters to pass to the controller action",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Route"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 18,
            "field": "{Array} routes",
            "default": "[]\nThe [[Lavaca.mvc.Route]]s used by this router",
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 24,
            "field": "{Lavaca.mvc.ViewManager} viewManager",
            "default": "null\nThe view manager used by this router",
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 32,
            "field": "{Boolean} locked",
            "default": "false\nWhen true, the router is prevented from executing a route",
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 38,
            "field": "{Boolean} hasNavigated",
            "default": "false\nWhether or not this router has been used to navigate",
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 56,
            "description": "Sets the viewManager property on the instance which is the view manager used by this router",
            "itemtype": "method",
            "name": "setEl",
            "params": [
                {
                    "name": "viewManager",
                    "description": "",
                    "type": "Lavaca.mvc.ViewManager"
                }
            ],
            "return": {
                "description": "This Router instance",
                "type": "Lavaca.mvc.Router"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 67,
            "description": "Adds multiple routes",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "map",
                    "description": "A hash in the form {pattern: [TController, action, params]}\n  or {pattern: {controller: TController, action: action, params: params}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The router (for chaining)",
                "type": "Lavaca.mvc.Router"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 75,
            "description": "Adds a route",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "pattern",
                    "description": "The route URL pattern",
                    "type": "String"
                },
                {
                    "name": "TController",
                    "description": "The type of controller to perform the action (should derive from [[Lavaca.mvc.Controller]])",
                    "type": "Function"
                },
                {
                    "name": "action",
                    "description": "The name of the controller method to call",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The router (for chaining)",
                "type": "Lavaca.mvc.Router"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 84,
            "description": "Adds a route",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "pattern",
                    "description": "The route URL pattern",
                    "type": "String"
                },
                {
                    "name": "TController",
                    "description": "The type of controller to perform the action (should derive from [[Lavaca.mvc.Controller]])",
                    "type": "Function"
                },
                {
                    "name": "action",
                    "description": "The name of the controller method to call",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Key-value pairs that will be passed to the action",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The router (for chaining)",
                "type": "Lavaca.mvc.Router"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 114,
            "description": "Executes the action for a given URL",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "url",
                    "description": "The URL",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 121,
            "description": "Executes the action for a given URL",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "url",
                    "description": "The URL",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "A history record object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 129,
            "description": "Executes the action for a given URL",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "url",
                    "description": "The URL",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "A history record object",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Additional parameters to pass to the route",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 168,
            "description": "Unlocks the router so that it can be used again",
            "itemtype": "method",
            "name": "unlock",
            "return": {
                "description": "This router (for chaining)",
                "type": "Lavaca.mvc.Router"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 178,
            "description": "Readies the router for garbage collection",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/View.js",
            "line": 34,
            "description": "The model used by the view",
            "itemtype": "property",
            "name": "model",
            "default": "null",
            "optional": 1,
            "type": "lavaca.mvc.Model",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 44,
            "description": "The element containing the view",
            "itemtype": "property",
            "name": "shell",
            "type": "JQuery",
            "default": "null",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 52,
            "description": "An id is applied to a data property on the views container",
            "itemtype": "property",
            "name": "id",
            "default": "generated from className and unique identifier",
            "type": "String",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 62,
            "description": "If the view is created in the context of a childView, the parent view is assigned to this view",
            "itemtype": "property",
            "name": "parentView",
            "default": "null",
            "type": "Object",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 75,
            "description": "The element that is either assigned to the view if in the context of a childView, or is created for the View\nif it is a PageView",
            "itemtype": "property",
            "name": "el",
            "default": "null",
            "type": "Object | String",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 86,
            "description": "A dictionary of selectors and event types in the form\n{eventType: {delegate: 'xyz', callback: func}}@property el",
            "itemtype": "property",
            "name": "eventMap",
            "default": "{}",
            "type": "Object",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 94,
            "description": "A dictionary of selectors, View types and models in the form\n  {selector: {TView: TView, model: model}}}",
            "itemtype": "property",
            "name": "childViewMap",
            "type": "Object",
            "default": "{}",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 103,
            "description": "Interactive elements used by the view",
            "itemtype": "property",
            "name": "childViews",
            "default": "lavaca.util.cache",
            "type": "lavaca.util.Cache",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 110,
            "description": "A dictionary of selectors and widget types in the form\n  {selector: widgetType}",
            "itemtype": "property",
            "name": "widgetMap",
            "type": "Object",
            "default": "{}",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 118,
            "description": "Interactive elements used by the view",
            "itemtype": "property",
            "name": "widgets",
            "default": "lavaca.util.Cache",
            "type": "lavaca.util.Cache",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 125,
            "description": "A map of all the events to be applied to child Views in the form of\n{type: {TView: TView, callback : callback}}",
            "itemtype": "property",
            "name": "childViewEventMap",
            "default": "Object",
            "type": "Object",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 138,
            "description": "Will render any childViews automatically when set to true",
            "itemtype": "property",
            "name": "autoRender",
            "default": "false",
            "type": "Boolean",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 146,
            "description": "The name of the template associated with the view",
            "itemtype": "property",
            "name": "template",
            "type": "String",
            "default": "null",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 153,
            "description": "A class name added to the view container",
            "itemtype": "property",
            "name": "String className",
            "default": "null",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 162,
            "description": "The index of the layer on which the view sits",
            "itemtype": "property",
            "name": "layer",
            "type": "Number",
            "default": "0",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 169,
            "description": "Type of view, ex PageView, View",
            "itemtype": "property",
            "name": "String viewType",
            "default": "null",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 187,
            "description": "Fired when there was an error during rendering process",
            "itemtype": "event",
            "name": "rendererror",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 210,
            "description": "Renders the view using its template and model",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 233,
            "description": "Renders the view using its template and model",
            "itemtype": "method",
            "name": "renderPageView",
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 263,
            "description": "Re-renders the view's template and replaces the DOM nodes that match\nthe selector argument. If no selector argument is provided, the whole view\nwill be re-rendered. If the first parameter is passed as <code>false</code>\nthe resulting html will pe passed with the promise and nothing will be replaced.\nNote: the number of elements that match the provided selector must be identical\nin the current markup and in the newly rendered markup or else the returned\npromise will be rejected.\nRe-renders the view's template using the view's model\nand redraws the entire view",
            "itemtype": "method",
            "name": "redraw",
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 277,
            "description": "Re-renders the view's template using the specified model\nand redraws the entire view",
            "itemtype": "method",
            "name": "redraw",
            "params": [
                {
                    "name": "model",
                    "description": "The data model to be passed to the template",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 284,
            "description": "Re-renders the view's template using the view's model and only redraws the\nelements that match the specified selector string.\nNote: The numbers of items that match the selector must\nbe exactly the same in the view's current markup and in the newly rendered\nmarkup. If that is not the case, the returned promise will be rejected and\nnothing will be redrawn.",
            "itemtype": "method",
            "name": "redraw",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector string that defines elements to redraw",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 295,
            "description": "Re-renders the view's template using the specified model and only redraws the\nelements that match the specified selector string.\nNote: The numbers of items that match the selector must\nbe exactly the same in the view's current markup and in the newly rendered\nmarkup. If that is not the case, the returned promise will be rejected and\nnothing will be redrawn.",
            "itemtype": "method",
            "name": "redraw",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector string that defines elements that will be updated",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "The data model to be passed to the template",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 307,
            "description": "Re-renders the view's template using the view's model. If shouldRedraw is true,\nthe entire view will be redrawn. If shouldRedraw is false, nothing will be redrawn,\nbut the returned promise will be resolved with the newly rendered content. This allows\nthe caller to attach a success handler to the returned promise and define their own\nredrawing behavior.",
            "itemtype": "method",
            "name": "redraw",
            "params": [
                {
                    "name": "shouldRedraw",
                    "description": "Whether the view should be automatically redrawn.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 317,
            "description": "Re-renders the view's template using the specified model. If shouldRedraw is true,\nthe entire view will be redrawn. If shouldRedraw is false, nothing will be redrawn,\nbut the returned promise will be resolved with the newly rendered content. This allows\nthe caller to attach a success handler to the returned promise and define their own\nredrawing behavior.",
            "itemtype": "method",
            "name": "redraw",
            "params": [
                {
                    "name": "shouldRedraw",
                    "description": "Whether the view should be automatically redrawn.",
                    "type": "Boolean"
                },
                {
                    "name": "model",
                    "description": "The data model to be passed to the template",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 398,
            "description": "Dispose old widgets and child views",
            "itemtype": "method",
            "name": "disposeChildViews",
            "params": [
                {
                    "name": "$el",
                    "description": "the $el to search for child views and widgets in",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 421,
            "description": "Dispose old widgets and child views",
            "itemtype": "method",
            "name": "disposeWidgets",
            "params": [
                {
                    "name": "$el",
                    "description": "the $el to search for child views and widgets in",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 442,
            "description": "Unbinds events from the model",
            "itemtype": "method",
            "name": "clearModelEvents",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 468,
            "description": "Checks for strings in the event map to bind events to this automatically",
            "itemtype": "method",
            "name": "bindMappedEvents",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 485,
            "description": "Binds events to the view",
            "itemtype": "method",
            "name": "applyEvents",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 541,
            "description": "Maps multiple delegated events for the view",
            "itemtype": "method",
            "name": "mapEvent",
            "params": [
                {
                    "name": "map",
                    "description": "A hash of the delegates, event types, and handlers\n    that will be bound when the view is rendered. The map should be in\n    the form <code>{delegate: {eventType: callback}}</code>. For example,\n    <code>{'.button': {click: onClickButton}}</code>. The events defined in\n    [[Lavaca.fx.Animation]] and [[Lavaca.fx.Transition]] are also supported.\n    To map an event to the view's el, use 'self' as the delegate. To map\n    events to the view's model, use 'model' as the delegate. To limit events\n    to only a particular property on the model, use a period-seperated\n    syntax such as <code>{model: {'change.myproperty': myCallback}}</code>",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This view (for chaining)",
                "type": "lavaca.mvc.View"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 556,
            "description": "Maps an event for the view",
            "itemtype": "method",
            "name": "mapEvent",
            "params": [
                {
                    "name": "delegate",
                    "description": "The element to which to delegate the event",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "The type of event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The event handler",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This view (for chaining)",
                "type": "lavaca.mvc.View"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 582,
            "description": "Initializes widgets on the view",
            "itemtype": "method",
            "name": "createWidgets",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 630,
            "description": "Assigns multiple widget types to elements on the view",
            "itemtype": "method",
            "name": "mapWidget",
            "params": [
                {
                    "name": "map",
                    "description": "A hash of selectors to bind widgets to when the view is rendered.\n    The map should be in the form {selector: [[Lavaca.ui.Widget]]} or\n    {selector: {TWidget: [[Lavaca.ui.Widget]], args: [optional arguments to pass to widget constructor]}}.\n    For example, {'form': Lavaca.ui.Form} or {'form': {TWidget: Lavaca.ui.Form, args: [...]}}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This view (for chaining)",
                "type": "Lavaca.mvc.View"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 640,
            "description": "Assigns a widget type to be created for elements matching a selector when the view is rendered",
            "itemtype": "method",
            "name": "mapWidget",
            "params": [
                {
                    "name": "selector",
                    "description": "The selector for the root element of the widget",
                    "type": "String"
                },
                {
                    "name": "TWidget",
                    "description": "The [[Lavaca.ui.Widget]]-derived type of widget to create",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This view (for chaining)",
                "type": "Lavaca.mvc.View"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 647,
            "description": "Assigns a widget type to be created for elements matching a selector when the view is rendered, and\naccepts optional arguments to pass to the widget constructor",
            "itemtype": "method",
            "name": "mapWidget",
            "params": [
                {
                    "name": "selector",
                    "description": "The selector for the root element of the widget",
                    "type": "String"
                },
                {
                    "name": "widgetOptions",
                    "description": "An object with a 'TWidget' key and an optional 'args' key which can be\n    an array of arguments to pass to the widget's constructor",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This view (for chaining)",
                "type": "Lavaca.mvc.View"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 667,
            "description": "Initializes child views on the view, called from onRenderSuccess",
            "itemtype": "method",
            "name": "createChildViews",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 716,
            "description": "Assigns multiple Views to elements on the view",
            "itemtype": "method",
            "name": "mapChildView",
            "params": [
                {
                    "name": "map",
                    "description": "A hash of selectors to view types and models to be bound when the view is rendered.\n    The map should be in the form {selector: {TView : TView, model : lavaca.mvc.Model}}. For example, {'form': {TView : ExampleView, model : new Model()}}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This view (for chaining)",
                "type": "lavaca.mvc.View"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 736,
            "description": "Listen for events triggered from child views.",
            "itemtype": "method",
            "name": "mapChildViewEvent",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event to listen for",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The method to execute when this event type has occured",
                    "type": "Function"
                },
                {
                    "name": "TView",
                    "description": "(Optional) Only listen on child views of this type",
                    "type": "Lavaca.mvc.View"
                }
            ],
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 744,
            "description": "Maps multiple child event types",
            "itemtype": "method",
            "name": "mapChildViewEvent",
            "params": [
                {
                    "name": "map",
                    "description": "A hash of event types with callbacks and TView's associated with that type\n The map should be in the form {type : {callback : {Function}, TView : TView}}",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 766,
            "description": "Called from onRenderSuccess of the view, adds listeners to all childviews if present",
            "itemtype": "method",
            "name": "applyChildViewEvent",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 792,
            "description": "Executes when the template renders successfully",
            "itemtype": "method",
            "name": "onRenderSuccess",
            "params": [
                {
                    "name": "e",
                    "description": "The render event. This object should have a string property named \"html\"\n  that contains the template's rendered HTML output.",
                    "type": "Event"
                }
            ],
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 810,
            "description": "Executes when the template fails to render",
            "itemtype": "method",
            "name": "onRenderError",
            "params": [
                {
                    "name": "e",
                    "description": "The error event. This object should have a string property named \"err\"\n  that contains the error message.",
                    "type": "Event"
                }
            ],
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 820,
            "description": "Readies the view for garbage collection",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 846,
            "description": "Creates the view's wrapper element",
            "itemtype": "method",
            "name": "wrapper",
            "return": {
                "description": "The wrapper element",
                "type": "JQuery"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 854,
            "description": "Creates the view's interior content wrapper element",
            "itemtype": "method",
            "name": "interior",
            "return": {
                "description": "The interior content wrapper element",
                "type": "JQuery"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 864,
            "description": "Adds this view to a container",
            "itemtype": "method",
            "name": "insertInto",
            "params": [
                {
                    "name": "container",
                    "description": "The containing element",
                    "type": "JQuery"
                }
            ],
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 885,
            "description": "Executes when the user navigates to this view",
            "itemtype": "method",
            "name": "enter",
            "params": [
                {
                    "name": "container",
                    "description": "The parent element of all views",
                    "type": "JQuery"
                },
                {
                    "name": "exitingViews",
                    "description": "The views that are exiting as this one enters",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 908,
            "description": "Fired when there was an error during rendering process",
            "itemtype": "event",
            "name": "rendererror",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 916,
            "description": "Executes when the user navigates away from this view",
            "itemtype": "method",
            "name": "exit",
            "params": [
                {
                    "name": "container",
                    "description": "The parent element of all views",
                    "type": "JQuery"
                },
                {
                    "name": "enteringViews",
                    "description": "The views that are entering as this one exits",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 929,
            "description": "Fired when there was an error during rendering process",
            "itemtype": "event",
            "name": "rendererror",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 21,
            "description": "The element that contains all view layers",
            "itemtype": "property",
            "name": "el",
            "type": "JQuery",
            "default": "null",
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 27,
            "description": "A cache containing all views",
            "itemtype": "property",
            "name": "views",
            "type": "Lavaca.util.Cache",
            "default": "new Lavaca.util.Cache()",
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 33,
            "description": "A list containing all layers",
            "itemtype": "property",
            "name": "layers",
            "type": "Array",
            "default": "[]",
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 39,
            "description": "A list containing all views that are currently exiting",
            "itemtype": "property",
            "name": "exitingPageViews",
            "type": "Array",
            "default": "[]",
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 45,
            "description": "A list containing all views that are currently entering",
            "itemtype": "property",
            "name": "enteringPageViews",
            "type": "Array",
            "default": "[]",
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 52,
            "description": "When true, the view manager is prevented from loading views.",
            "itemtype": "property",
            "name": "locked",
            "type": "Boolean",
            "default": "false",
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 58,
            "description": "Sets the el property on the instance",
            "itemtype": "method",
            "name": "setEl",
            "params": [
                {
                    "name": "el",
                    "description": "A jQuery object of the element that contains all layers",
                    "type": "JQuery"
                }
            ],
            "return": {
                "description": "This View Manager instance",
                "type": "Lavaca.mvc.ViewManager"
            },
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 65,
            "description": "Sets the el property on the instance",
            "itemtype": "method",
            "name": "setEl",
            "params": [
                {
                    "name": "el",
                    "description": "A CSS selector matching the element that contains all layers",
                    "type": "String"
                }
            ],
            "return": {
                "description": "This View Manager instance",
                "type": "Lavaca.mvc.ViewManager"
            },
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 76,
            "description": "Loads a view",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "cacheKey",
                    "description": "The cache key associated with the view",
                    "type": "String"
                },
                {
                    "name": "TPageView",
                    "description": "The type of view to load (should derive from [[Lavaca.mvc.View]])",
                    "type": "Function"
                },
                {
                    "name": "model",
                    "description": "The views model",
                    "type": "Object"
                },
                {
                    "name": "layer",
                    "description": "The index of the layer on which the view will sit",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 86,
            "description": "Loads a view",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "cacheKey",
                    "description": "The cache key associated with the view",
                    "type": "String"
                },
                {
                    "name": "TPageView",
                    "description": "The type of view to load (should derive from [[Lavaca.mvc.View]])",
                    "type": "Function"
                },
                {
                    "name": "model",
                    "description": "The views model",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameters to be mapped to the view",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 153,
            "description": "Removes all views on a layer",
            "itemtype": "method",
            "name": "dismiss",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the layer to remove",
                    "type": "Number"
                }
            ],
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 159,
            "description": "Removes all views on a layer",
            "itemtype": "method",
            "name": "dismiss",
            "params": [
                {
                    "name": "el",
                    "description": "An element on the layer to remove (or the layer itself)",
                    "type": "JQuery"
                }
            ],
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 165,
            "description": "Removes all views on a layer",
            "itemtype": "method",
            "name": "dismiss",
            "params": [
                {
                    "name": "view",
                    "description": "The view on the layer to remove",
                    "type": "Lavaca.mvc.View"
                }
            ],
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 188,
            "description": "Removes all layers above a given index",
            "itemtype": "method",
            "name": "dismissLayersAbove",
            "params": [
                {
                    "name": "index",
                    "description": "The index above which to clear",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 195,
            "description": "Removes all layers above a given index",
            "itemtype": "method",
            "name": "dismissLayersAbove",
            "params": [
                {
                    "name": "index",
                    "description": "The index above which to clear",
                    "type": "Number"
                },
                {
                    "name": "exceptForView",
                    "description": "A view that should not be dismissed",
                    "type": "Lavaca.mvc.View"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 232,
            "description": "Empties the view cache",
            "itemtype": "method",
            "name": "flush",
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 253,
            "description": "Readies the view manager for garbage collection",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/net/Connectivity.js",
            "line": 32,
            "description": "Attempts to detect whether or not the browser is connected",
            "itemtype": "method",
            "name": "isOffline",
            "static": 1,
            "return": {
                "description": "True if the browser is offline; false if the browser is online\n   or if connection status cannot be determined",
                "type": "Boolean"
            },
            "class": "lavaca.net.Connectivity"
        },
        {
            "file": "src/net/Connectivity.js",
            "line": 49,
            "description": "Makes an AJAX request if the user is online. If the user is offline, the returned\npromise will be rejected with the string argument \"offline\"",
            "itemtype": "method",
            "name": "ajax",
            "static": 1,
            "params": [
                {
                    "name": "opts",
                    "description": "jQuery-style AJAX options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.net.Connectivity"
        },
        {
            "file": "src/net/Connectivity.js",
            "line": 83,
            "description": "Adds a callback to be executed whenever any Lavaca.net.Connectivity.ajax() call is\nblocked as a result of a lack of internet connection.",
            "itemtype": "method",
            "name": "registerOfflineAjaxHandler",
            "static": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                }
            ],
            "class": "lavaca.net.Connectivity"
        },
        {
            "file": "src/net/History.js",
            "line": 38,
            "description": "A list containing history states generated by the app (not used for HTML5 history)",
            "itemtype": "property",
            "name": "sequence",
            "type": "Array",
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 43,
            "description": "The current index in the history sequence (not used for HTML5 history)",
            "itemtype": "property",
            "name": "position",
            "type": "Number",
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 50,
            "description": "Auto-generated callback executed when a history event occurs",
            "itemtype": "property",
            "name": "onPopState",
            "type": "Function",
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 120,
            "description": "Retrieve the current history record",
            "itemtype": "method",
            "name": "current",
            "return": {
                "description": "The current history record",
                "type": "Object"
            },
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 129,
            "description": "Determines whether or not there are history states",
            "itemtype": "method",
            "name": "hasHistory",
            "return": {
                "description": "True when there is a history state",
                "type": "Boolean"
            },
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 138,
            "description": "Adds a record to the history",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "state",
                    "description": "A data object associated with the page state",
                    "type": "Object"
                },
                {
                    "name": "title",
                    "description": "The title of the page state",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The URL of the page state",
                    "type": "String"
                }
            ],
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 160,
            "description": "Replaces the current record in the history",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "state",
                    "description": "A data object associated with the page state",
                    "type": "Object"
                },
                {
                    "name": "title",
                    "description": "The title of the page state",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The URL of the page state",
                    "type": "String"
                }
            ],
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 180,
            "description": "Unbind the history object and ready it for garbage collection",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 197,
            "description": "Initialize a singleton history abstraction layer",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "return": {
                "description": "The history instance",
                "type": "Lavaca.mvc.History"
            },
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 204,
            "description": "Initialize a singleton history abstraction layer",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "useHash",
                    "description": "When true, use the location hash to manage history state instead of HTML5 history",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The history instance",
                "type": "Lavaca.mvc.History"
            },
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 221,
            "description": "Adds a record to the history",
            "itemtype": "method",
            "name": "push",
            "static": 1,
            "params": [
                {
                    "name": "state",
                    "description": "A data object associated with the page state",
                    "type": "Object"
                },
                {
                    "name": "title",
                    "description": "The title of the page state",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The URL of the page state",
                    "type": "String"
                }
            ],
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 233,
            "description": "Replaces the current record in the history",
            "itemtype": "method",
            "name": "replace",
            "static": 1,
            "params": [
                {
                    "name": "state",
                    "description": "A data object associated with the page state",
                    "type": "Object"
                },
                {
                    "name": "title",
                    "description": "The title of the page state",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The URL of the page state",
                    "type": "String"
                }
            ],
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 245,
            "description": "Goes to the previous history state",
            "itemtype": "method",
            "name": "back",
            "static": 1,
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 253,
            "description": "Goes to the next history state",
            "itemtype": "method",
            "name": "forward",
            "static": 1,
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 261,
            "description": "Unbind the history object and ready it for garbage collection",
            "itemtype": "method",
            "name": "dispose",
            "static": 1,
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 272,
            "description": "Binds an event handler to the singleton history",
            "itemtype": "method",
            "name": "on",
            "static": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to execute when the event occurs",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The history object (for chaining)",
                "type": "Lavaca.mvc.History"
            },
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 284,
            "description": "Unbinds an event handler from the singleton history",
            "itemtype": "method",
            "name": "off",
            "static": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to stop executing when the\n   event occurs",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The history object (for chaining)",
                "type": "Lavaca.mvc.History"
            },
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 297,
            "description": "Sets Histroy to hash mode",
            "itemtype": "method",
            "name": "overrideStandardsMode",
            "static": 1,
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 306,
            "description": "Stores the page transition animations so that if you route back, it will animate correctly",
            "itemtype": "property",
            "name": "animationBreadcrumb",
            "type": "Array",
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 312,
            "description": "Flag to notify when history back is being called",
            "itemtype": "property",
            "name": "isRoutingBack",
            "type": "Boolean",
            "class": "lavaca.net.History"
        },
        {
            "file": "src/storage/LocalStore.js",
            "line": 35,
            "description": "A list of keys found in the store",
            "field": "{Array} manifest",
            "class": "lavaca.storage.LocalStore"
        },
        {
            "file": "src/storage/LocalStore.js",
            "line": 41,
            "description": "Generates a storage key",
            "itemtype": "method",
            "name": "key",
            "params": [
                {
                    "name": "id",
                    "description": "The ID of the item for which to generate a key",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The key",
                "type": "String"
            },
            "class": "lavaca.storage.LocalStore"
        },
        {
            "file": "src/storage/LocalStore.js",
            "line": 51,
            "description": "Retrieves an object from storage, given its ID",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "id",
                    "description": "The ID of the stored object",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The stored object",
                "type": "Object"
            },
            "class": "lavaca.storage.LocalStore"
        },
        {
            "file": "src/storage/LocalStore.js",
            "line": 71,
            "description": "Stores an object locally",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "id",
                    "description": "The ID of the object to store",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to store",
                    "type": "Object"
                }
            ],
            "class": "lavaca.storage.LocalStore"
        },
        {
            "file": "src/storage/LocalStore.js",
            "line": 83,
            "description": "Removes an object from storage",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "id",
                    "description": "The ID of the object to remove from storage",
                    "type": "String"
                }
            ],
            "class": "lavaca.storage.LocalStore"
        },
        {
            "file": "src/storage/LocalStore.js",
            "line": 94,
            "description": "Retrieves all items in this store",
            "itemtype": "method",
            "name": "all",
            "return": {
                "description": "A list of stored objects",
                "type": "Array"
            },
            "class": "lavaca.storage.LocalStore"
        },
        {
            "file": "src/storage/Store.js",
            "line": 15,
            "description": "The ID of the store",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "class": "lavaca.storage.Store"
        },
        {
            "file": "src/storage/Store.js",
            "line": 21,
            "description": "Retrieves an object from storage, given its ID",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "id",
                    "description": "The ID of the stored object",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The stored object",
                "type": "Object"
            },
            "class": "lavaca.storage.Store"
        },
        {
            "file": "src/storage/Store.js",
            "line": 31,
            "description": "Stores an object locally",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "id",
                    "description": "The ID of the object to store",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to store",
                    "type": "Object"
                }
            ],
            "class": "lavaca.storage.Store"
        },
        {
            "file": "src/storage/Store.js",
            "line": 41,
            "description": "Removes an object from storage",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "id",
                    "description": "The ID of the object to remove from storage",
                    "type": "String"
                }
            ],
            "class": "lavaca.storage.Store"
        },
        {
            "file": "src/storage/Store.js",
            "line": 50,
            "description": "Retrieves all items in this store",
            "itemtype": "method",
            "name": "all",
            "return": {
                "description": "A list of stored objects",
                "type": "Array"
            },
            "class": "lavaca.storage.Store"
        },
        {
            "file": "src/ui/DustTemplate.js",
            "line": 32,
            "description": "Gets the basis for the template helper object",
            "itemtype": "method",
            "name": "prepareHelpers",
            "return": {
                "description": "A map of helper function names to functions",
                "type": "Object"
            },
            "class": "lavaca.ui.DustTemplate"
        },
        {
            "file": "src/ui/DustTemplate.js",
            "line": 45,
            "description": "Helper function, exposed in dust templates, that uses\n  [Lavaca.util.Translation] to get localized strings.\nAccessed as:\n\n<dl>\n\n<dt>{@msg key=\"code\"/}</dt>\n  <dd>code&mdash;The key under which the message is stored</dd>\n\n<dt>{@msg key=\"code\"}default{/msg}</dt>\n  <dd>code&mdash;The key under which the message is stored</dd>\n  <dd>default&mdash;The default markup to display if no translation\n      is found</dd>\n\n\n<dt>{@msg key=\"code\" locale=\"en_US\"/}</dt>\n  <dd>code&mdash;The key under which the message is stored</dd>\n  <dd>locale&mdash;The locale from which to get the message (\"en_US\")</dd>\n\n<dt>{@msg key=\"code\" p0=\"first\" p1=variable /}</dt>\n  <dd>code&mdash;The key under which the message is stored</dd>\n  <dd>p0, p1, &hellip; pN&mdash;String format parameters for the message\n      (See [[Lavaca.util.StringUtils]].format())</dd>\n\n</dl>",
            "itemtype": "method",
            "name": "helperMsg",
            "params": [
                {
                    "name": "chunk",
                    "description": "Dust chunk",
                    "type": "Object"
                },
                {
                    "name": "context",
                    "description": "Dust context",
                    "type": "Object"
                },
                {
                    "name": "bodies",
                    "description": "Dust bodies",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameters passed to the helper",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Rendered output",
                "type": "String"
            },
            "class": "lavaca.ui.DustTemplate"
        },
        {
            "file": "src/ui/DustTemplate.js",
            "line": 97,
            "description": "Helper function, exposed in dust templates, that uses\n  [[Lavaca.ui.Template]] to include other templates. Accessed as:\n\n<dl>\n\n<dt>{@include name=\"template-name\"/}</dt>\n  <dd>name&mdash;The name under which the template can be referenced</dd>\n\n</dl>\n\n<strong>Note:</strong> You should always use the include helper instead of\nthe dust.js partial syntax. The dust.js partial syntax may not work as expected.",
            "itemtype": "method",
            "name": "helperInclude",
            "params": [
                {
                    "name": "chunk",
                    "description": "Dust chunk",
                    "type": "Object"
                },
                {
                    "name": "context",
                    "description": "Dust context",
                    "type": "Object"
                },
                {
                    "name": "bodies",
                    "description": "Dust bodies",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameters passed to the helper",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Rendered output",
                "type": "String"
            },
            "class": "lavaca.ui.DustTemplate"
        },
        {
            "file": "src/ui/DustTemplate.js",
            "line": 133,
            "description": "Helper function, exposed in dust templates, that allows templates\n  to use data from [[Lavaca.util.Config]]. Accessed as:\n\n<dl>\n\n<dt>{@config key=\"config_value\"/}</dt>\n  <dd>key&mdash;The key to read from the config file for the default environment.</dd>\n\n<dt>{@config key=\"config_value\" environment=\"production\"/}</dt>\n  <dd>key&mdash;The key to read from the config file for the specified environment.</dd>\n\n<dt>{@config key=\"config_value\"}default{/config}</dt>\n  <dd>key&mdash;The key to read from the config file</dd>\n  <dd>default&mdash;The default markup to display if the key\n      is not found</dd>\n\n<dt>{@config key=\"config_value\" p0=\"first\" p1=variable /}</dt>\n  <dd>key&mdash;The key to read from the config file</dd>\n  <dd>p0, p1, &hellip; pN&mdash;String format parameters\n      (See [[Lavaca.util.StringUtils]].format())</dd>\n\n</dl>\n\n<dt>{@config only=\"local\"}&hellip;{:else}&hellip;{/config}</dt>\n  <dd>only&mdash;Only render the body content if the current config environment's name matches this key</dd>\n\n</dl>\n\n<dt>{@config not=\"production\"}&hellip;{:else}&hellip;{/config}</dt>\n  <dd>not&mdash;Only render the body content if the current config environment's name does NOT match this key</dd>\n\n</dl>",
            "itemtype": "method",
            "name": "helperConfig",
            "params": [
                {
                    "name": "chunk",
                    "description": "Dust chunk",
                    "type": "Object"
                },
                {
                    "name": "context",
                    "description": "Dust context",
                    "type": "Object"
                },
                {
                    "name": "bodies",
                    "description": "Dust bodies",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameters passed to the helper",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Rendered output",
                "type": "String"
            },
            "class": "lavaca.ui.DustTemplate"
        },
        {
            "file": "src/ui/DustTemplate.js",
            "line": 199,
            "description": "Compiles the template",
            "itemtype": "method",
            "name": "compile",
            "class": "lavaca.ui.DustTemplate"
        },
        {
            "file": "src/ui/DustTemplate.js",
            "line": 206,
            "description": "Renders the template to a string.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "model",
                    "description": "The data model to provide to the template",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.ui.DustTemplate"
        },
        {
            "file": "src/ui/DustTemplate.js",
            "line": 231,
            "description": "Makes this template ready for disposals",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.ui.DustTemplate"
        },
        {
            "file": "src/ui/Form.js",
            "line": 75,
            "description": "Whether input values should automatically be trimmed",
            "itemtype": "property",
            "name": "autoTrim",
            "default": "false",
            "type": "Boolean",
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 82,
            "description": "Whether the focus should automatically advance to the\nnext input when the input's value is equal to it's maxlength",
            "itemtype": "property",
            "name": "autoAdvance",
            "default": "false",
            "type": "Boolean",
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 90,
            "description": "The default validation rules for the form",
            "itemtype": "method",
            "name": "defaultRules",
            "return": {
                "description": "The form's default rules1",
                "type": "Object"
            },
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 106,
            "description": "Calls submit on the Form's element",
            "itemtype": "method",
            "name": "submit",
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 113,
            "description": "Event handler for when the form is submitted",
            "itemtype": "method",
            "name": "onSubmit",
            "params": [
                {
                    "name": "e",
                    "description": "The submit event",
                    "type": "Event"
                }
            ],
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 125,
            "description": "Event handler for when the user attempts to submit a valid form",
            "itemtype": "method",
            "name": "onSubmitSuccess",
            "params": [
                {
                    "name": "values",
                    "description": "Key-value map of the form's input names and values",
                    "type": "Object"
                }
            ],
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 134,
            "description": "Event handler for when the user attempts to submit an invalid form",
            "itemtype": "method",
            "name": "onSubmitError",
            "params": [
                {
                    "name": "invalidInputs",
                    "description": "A key-value map of all invalid inputs",
                    "type": "Object"
                }
            ],
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 143,
            "description": "Event handler for when an input on the form changes",
            "itemtype": "method",
            "name": "onChangeInput",
            "params": [
                {
                    "name": "e",
                    "description": "The change event",
                    "type": "Event"
                }
            ],
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 159,
            "description": "Event handler for when an attribute on the bound model changes",
            "itemtype": "method",
            "name": "onChangeModel",
            "params": [
                {
                    "name": "e",
                    "description": "The change event",
                    "type": "Event"
                }
            ],
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 170,
            "description": "Binds this form to a model, forcing the two to stay in sync",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "model",
                    "description": "The model being bound",
                    "type": "Lavaca.mvc.Model"
                }
            ],
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 182,
            "description": "Unbinds this form from its model",
            "itemtype": "method",
            "name": "unbind",
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 193,
            "description": "Retrieve an input from the form with a given name",
            "itemtype": "method",
            "name": "input",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the input",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The input",
                "type": "JQuery"
            },
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 203,
            "description": "Gets the value of an input on the form",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the input",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value of the input",
                "type": "String"
            },
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 210,
            "description": "Gets the value of an input on the form",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "input",
                    "description": "The input, textarea, or select",
                    "type": "JQuery"
                }
            ],
            "return": {
                "description": "The value of the input",
                "type": "String"
            },
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 243,
            "description": "Sets the value of an input on the form",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the input",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value of the input",
                    "type": "String"
                }
            ],
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 250,
            "description": "Sets the values of multiple inputs on the form",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "values",
                    "description": "A hash of input names and values",
                    "type": "Object"
                }
            ],
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 277,
            "description": "Adds a validation rule to the form",
            "itemtype": "method",
            "name": "addRule",
            "params": [
                {
                    "name": "selector",
                    "description": "A jQuery selector associated with the rule",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A function that tests the value of inputs matching the\n  selector in the form callback(value, input, form) and\n  return a string message if validation fails",
                    "type": "Function"
                },
                {
                    "name": "treatAsGroup",
                    "description": "(Optional) If true, the callback will be fired once\n  with an array of values and inputs, one for each matching element. If false or ommitted,\n  the callback will be fired once for each element that matches the selector.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 288,
            "description": "Adds multiple validation rules to this form. The keys of the object\nshould be the selectors and the object's values can either be a callback\nor an object with the properties 'callback' and 'treatAsGroup'.",
            "itemtype": "method",
            "name": "addRule",
            "params": [
                {
                    "name": "map",
                    "description": "A hash of selectors and callbacks to add as rules",
                    "type": "Object"
                }
            ],
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 309,
            "description": "Adds a formatter to the form",
            "itemtype": "method",
            "name": "addFormatter",
            "params": [
                {
                    "name": "selector",
                    "description": "A jQuery selector associated with the formatter",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A function that takes three arguments (value, input, form) and\n  returns a string which will be set as the value of the input.",
                    "type": "Function"
                },
                {
                    "name": "treatAsGroup",
                    "description": "(Optional) If true, the callback will be fired once\n  with an array of values and inputs, one for each matching element. If false or ommitted,\n  the callback will be fired once for each element that matches the selector.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 319,
            "description": "Adds multiple formatters to this form. The keys of the object\nshould be the selectors and the object's values can either be a callback\nor an object with the properties 'callback' and 'treatAsGroup'.",
            "itemtype": "method",
            "name": "addFormatter",
            "params": [
                {
                    "name": "map",
                    "description": "A hash of selectors and callbacks to add as formatters",
                    "type": "Object"
                }
            ],
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 340,
            "description": "Collects all input values on the form",
            "itemtype": "method",
            "name": "values",
            "return": {
                "description": "A hash of input names and their values",
                "type": "Object"
            },
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 361,
            "description": "Checks the entire form to see if it's in a valid state",
            "itemtype": "method",
            "name": "validate",
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 366,
            "description": "Checks the entire form to see if it's in a valid state",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "succcess",
                    "description": "A callback to execute when the form is valid",
                    "type": "Function"
                },
                {
                    "name": "error",
                    "description": "A callback to execute when the form is invalid",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 373,
            "description": "Checks the entire form to see if it's in a valid state",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "input",
                    "description": "An input to check",
                    "type": "JQuery"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 379,
            "description": "Checks the entire form to see if it's in a valid state",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "succcess",
                    "description": "A callback to execute when the input is valid",
                    "type": "Function"
                },
                {
                    "name": "error",
                    "description": "A callback to execute when the input is invalid",
                    "type": "Function"
                },
                {
                    "name": "input",
                    "description": "An input to check",
                    "type": "JQuery"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 445,
            "description": "Formats all inputs",
            "itemtype": "method",
            "name": "format",
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 449,
            "description": "Formats the specified inputs",
            "itemtype": "method",
            "name": "format",
            "params": [
                {
                    "name": "input",
                    "description": "The inputs to format",
                    "type": "JQuery"
                }
            ],
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 467,
            "description": "Automatically advances the focus to the\nnext input if autoAdvance is true and the\ncurrently focussed input's value is greater\nthan or equal to its maxlength",
            "itemtype": "method",
            "name": "autoAdvanceIfNecessary",
            "params": [
                {
                    "name": "input",
                    "description": "(Optional) The current input. This\n  parameter is just for speed optimization if the current input\n  is already known. If not passed, it will be determined automatically.",
                    "type": "JQuery",
                    "optional": true
                }
            ],
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 498,
            "description": "Ready the form for garbage collection",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/Form.js",
            "line": 507,
            "description": "Extends the form with new submit handlers",
            "itemtype": "method",
            "name": "withSubmit",
            "static": 1,
            "params": [
                {
                    "name": "success",
                    "description": "The success handler",
                    "type": "Function"
                },
                {
                    "name": "error",
                    "description": "The error handler",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A new [@Lavaca.ui.Form]-derived type",
                "type": "Function"
            },
            "class": "lavaca.ui.Form"
        },
        {
            "file": "src/ui/LoadingIndicator.js",
            "line": 15,
            "description": "Class name applied to the root",
            "itemtype": "property",
            "name": "className",
            "type": "String",
            "default": "'loading'",
            "class": "lavaca.ui.LoadingIndicator"
        },
        {
            "file": "src/ui/LoadingIndicator.js",
            "line": 21,
            "description": "Activates the loading indicator",
            "itemtype": "method",
            "name": "show",
            "class": "lavaca.ui.LoadingIndicator"
        },
        {
            "file": "src/ui/LoadingIndicator.js",
            "line": 28,
            "description": "Deactivates the loading indicator",
            "itemtype": "method",
            "name": "hide",
            "class": "lavaca.ui.LoadingIndicator"
        },
        {
            "file": "src/ui/LoadingIndicator.js",
            "line": 36,
            "description": "Creates a loading indicator and binds it to the document's AJAX events",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "class": "lavaca.ui.LoadingIndicator"
        },
        {
            "file": "src/ui/LoadingIndicator.js",
            "line": 41,
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "TLoadingIndicator",
                    "description": "The type of loading indicator to create (should derive from [[Lavaca.ui.LoadingIndicator]])",
                    "type": "Function"
                }
            ],
            "class": "lavaca.ui.LoadingIndicator"
        },
        {
            "file": "src/ui/Template.js",
            "line": 15,
            "description": "Renders the template to a string",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "model",
                    "description": "The data model to provide to the template",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.ui.Template"
        },
        {
            "file": "src/ui/Template.js",
            "line": 25,
            "description": "Parses server data to include in this lookup",
            "itemtype": "method",
            "name": "process",
            "params": [
                {
                    "name": "text",
                    "description": "The server data string",
                    "type": "String"
                }
            ],
            "class": "lavaca.ui.Template"
        },
        {
            "file": "src/ui/Template.js",
            "line": 35,
            "description": "Finds the template with a given name",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the template",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The template (or null if no such template exists)",
                "type": "Lavaca.ui.Template"
            },
            "class": "lavaca.ui.Template"
        },
        {
            "file": "src/ui/Template.js",
            "line": 46,
            "description": "Scans the document for all templates with registered types and\n  prepares template objects from them",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "class": "lavaca.ui.Template"
        },
        {
            "file": "src/ui/Template.js",
            "line": 52,
            "description": "Scans the document for all templates with registered types and\n   prepares template objects from them",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "scope",
                    "description": "The element to which to limit the scan",
                    "type": "JQuery"
                }
            ],
            "class": "lavaca.ui.Template"
        },
        {
            "file": "src/ui/Template.js",
            "line": 85,
            "description": "Disposes of all templates",
            "itemtype": "method",
            "name": "dispose",
            "static": 1,
            "class": "lavaca.ui.Template"
        },
        {
            "file": "src/ui/Template.js",
            "line": 93,
            "description": "Finds the named template and renders it to a string",
            "itemtype": "method",
            "name": "render",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the template",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "The data model to provide to the template",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.ui.Template"
        },
        {
            "file": "src/ui/Template.js",
            "line": 110,
            "description": "Registers a type of template to look for on intilization.",
            "itemtype": "method",
            "name": "register",
            "static": 1,
            "params": [
                {
                    "name": "mimeType",
                    "description": "The mime-type associated with the template",
                    "type": "String"
                },
                {
                    "name": "TTemplate",
                    "description": "The JavaScript type used for the template (should derive from [[Lavaca.ui.Template]])",
                    "type": "Function"
                }
            ],
            "class": "lavaca.ui.Template"
        },
        {
            "file": "src/ui/Template.js",
            "line": 117,
            "description": "Registers a type of template to look for on intilization.",
            "itemtype": "method",
            "name": "register",
            "static": 1,
            "params": [
                {
                    "name": "TTemplate",
                    "description": "The JavaScript type used for the template (should derive from [[Lavaca.ui.Template]])",
                    "type": "Function"
                }
            ],
            "class": "lavaca.ui.Template"
        },
        {
            "file": "src/ui/Widget.js",
            "line": 18,
            "description": "The DOM element that is the root of the widget",
            "itemtype": "property",
            "name": "el",
            "type": "JQuery",
            "default": "null",
            "class": "lavaca.ui.Widget"
        },
        {
            "file": "src/ui/Widget.js",
            "line": 28,
            "description": "The el's ID",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "default": "(Autogenerated)",
            "class": "lavaca.ui.Widget"
        },
        {
            "file": "src/util/ArrayUtils.js",
            "line": 9,
            "description": "Gets the first index of an item in an array",
            "itemtype": "method",
            "name": "indexOf",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "The array",
                    "type": "Array"
                },
                {
                    "name": "o",
                    "description": "The object to look for",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The first index of the object, or -1 if not found",
                "type": "Number"
            },
            "class": "lavaca.util.ArrayUtils"
        },
        {
            "file": "src/util/ArrayUtils.js",
            "line": 33,
            "description": "Determines whether an array contains an object",
            "itemtype": "method",
            "name": "contains",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "The array",
                    "type": "Array"
                },
                {
                    "name": "o",
                    "description": "The object to look for",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True when the array contains the object, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.util.ArrayUtils"
        },
        {
            "file": "src/util/ArrayUtils.js",
            "line": 46,
            "description": "Removes the first instance of an item from an array, if it exists",
            "itemtype": "method",
            "name": "remove",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "The array",
                    "type": "Array"
                },
                {
                    "name": "o",
                    "description": "The object to remove",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The former index of the item (or -1 if the item was not\n  in the array)",
                "type": "Number"
            },
            "class": "lavaca.util.ArrayUtils"
        },
        {
            "file": "src/util/ArrayUtils.js",
            "line": 64,
            "description": "Adds an item to the end of an array, if it was not already in the array",
            "itemtype": "method",
            "name": "pushIfNotExists",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "The array",
                    "type": "Array"
                },
                {
                    "name": "o",
                    "description": "The object to add to the array",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The index of the item in the array",
                "type": "Number"
            },
            "class": "lavaca.util.ArrayUtils"
        },
        {
            "file": "src/util/ArrayUtils.js",
            "line": 80,
            "description": "Determines if object is an array",
            "itemtype": "method",
            "name": "isArray",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "Any value of any type",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if a is a true array",
                "type": "Boolean"
            },
            "class": "lavaca.util.ArrayUtils"
        },
        {
            "file": "src/util/Cache.js",
            "line": 12,
            "description": "Retrieves an item from the cache",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "id",
                    "description": "The key under which the item is stored",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The stored item (or null if no item is stored)",
                "type": "Object"
            },
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Cache.js",
            "line": 19,
            "description": "Retrieves an item from the cache",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "id",
                    "description": "The key under which the item is stored",
                    "type": "String"
                },
                {
                    "name": "def",
                    "description": "A default value that will be added, if there is no item stored",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The stored item (or null if no item is stored and no default)",
                "type": "Object"
            },
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Cache.js",
            "line": 33,
            "description": "Assigns an item to a key in the cache",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "id",
                    "description": "The key under which the item will be stored",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The object to store in the cache",
                    "type": "Object"
                }
            ],
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Cache.js",
            "line": 43,
            "description": "Adds an item to the cache",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "value",
                    "description": "The object to store in the cache",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The auto-generated ID under which the value was stored",
                "type": "String"
            },
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Cache.js",
            "line": 55,
            "description": "Removes an item from the cache (if it exists)",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "id",
                    "description": "The key under which the item is stored",
                    "type": "String"
                }
            ],
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Cache.js",
            "line": 64,
            "description": "Executes a callback for each cached item. To stop iteration immediately,\nreturn false from the callback.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "callback",
                    "description": "A function to execute for each item, callback(key, item)",
                    "type": "Function"
                }
            ],
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Cache.js",
            "line": 70,
            "description": "Executes a callback for each cached item. To stop iteration immediately,\nreturn false from the callback.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "callback",
                    "description": "A function to execute for each item, callback(key, item)",
                    "type": "Function"
                },
                {
                    "name": "thisp",
                    "description": "The context of the callback",
                    "type": "Object"
                }
            ],
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Cache.js",
            "line": 88,
            "description": "Serializes the cache to a hash",
            "itemtype": "method",
            "name": "toObject",
            "return": {
                "description": "The resulting key-value hash",
                "type": "Object"
            },
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Cache.js",
            "line": 101,
            "description": "Serializes the cache to JSON",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "The JSON string",
                "type": "String"
            },
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Cache.js",
            "line": 110,
            "description": "Serializes the cache to an array",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "The resulting array with elements being index based and keys stored in an array on the 'ids' property",
                "type": "Object"
            },
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Cache.js",
            "line": 126,
            "description": "removes all items from the cache",
            "itemtype": "method",
            "name": "clear",
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Cache.js",
            "line": 136,
            "description": "returns number of items in cache",
            "itemtype": "method",
            "name": "count",
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Cache.js",
            "line": 148,
            "description": "Clears all items from the cache on dispose",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Config.js",
            "line": 23,
            "description": "Sets the application's default config",
            "itemtype": "method",
            "name": "setDefault",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the default config",
                    "type": "String"
                }
            ],
            "class": "lavaca.util.Config"
        },
        {
            "file": "src/util/Config.js",
            "line": 33,
            "description": "Gets the application's current config environment name",
            "itemtype": "method",
            "name": "currentEnvironment",
            "static": 1,
            "return": {
                "description": "The name of the current environment",
                "type": "String"
            },
            "class": "lavaca.util.Config"
        },
        {
            "file": "src/util/Config.js",
            "line": 43,
            "description": "Retrieves a value from the configuration",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "code",
                    "description": "The name of the parameter",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value of the parameter",
                "type": "Object"
            },
            "class": "lavaca.util.Config"
        },
        {
            "file": "src/util/Config.js",
            "line": 50,
            "description": "Retrieves a value from the configuration",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the config",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "The name of the parameter",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value of the parameter",
                "type": "Object"
            },
            "class": "lavaca.util.Config"
        },
        {
            "file": "src/util/Config.js",
            "line": 61,
            "description": "Scans the document for all translations and prepares them",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "class": "lavaca.util.Config"
        },
        {
            "file": "src/util/Config.js",
            "line": 66,
            "description": "Scans the document for all translations and prepares them",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "scope",
                    "description": "The element to which to limit the scan",
                    "type": "JQuery"
                }
            ],
            "class": "lavaca.util.Config"
        },
        {
            "file": "src/util/Config.js",
            "line": 75,
            "description": "Disposes of all translations",
            "itemtype": "method",
            "name": "dispose",
            "static": 1,
            "class": "lavaca.util.Config"
        },
        {
            "file": "src/util/DateUtils.js",
            "line": 41,
            "description": "The time of day abbreviation. You can supply [[Lavaca.util.Translation]] values using these names as keys to translate.",
            "itemtype": "property",
            "name": "timeOfDayDesignatorAbbr",
            "type": "Array",
            "static": 1,
            "class": "lavaca.util.DateUtils"
        },
        {
            "file": "src/util/DateUtils.js",
            "line": 51,
            "description": "The time of day. You can supply [[Lavaca.util.Translation]] values using these names as keys to translate.",
            "itemtype": "property",
            "name": "timeOfDayDesignator",
            "type": "Array",
            "static": 1,
            "default": "[\"AM\", \"PM\"]",
            "class": "lavaca.util.DateUtils"
        },
        {
            "file": "src/util/DateUtils.js",
            "line": 62,
            "description": "The abbreviated days of the week. You can supply [[Lavaca.util.Translation]] values using these names as keys to translate.",
            "itemtype": "property",
            "name": "daysOfWeekAbbr",
            "type": "Array",
            "static": 1,
            "default": "[\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]",
            "class": "lavaca.util.DateUtils"
        },
        {
            "file": "src/util/DateUtils.js",
            "line": 78,
            "description": "The days of the week. You can supply [[Lavaca.util.Translation]] values using these names as keys to translate.",
            "itemtype": "property",
            "name": "daysOfWeek",
            "type": "Array",
            "static": 1,
            "default": "[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]",
            "class": "lavaca.util.DateUtils"
        },
        {
            "file": "src/util/DateUtils.js",
            "line": 94,
            "description": "The abbreviated months. You can supply [[Lavaca.util.Translation]] values using these names as keys to translate.",
            "itemtype": "property",
            "name": "monthsAbbr",
            "type": "Array",
            "static": 1,
            "default": "[\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]",
            "class": "lavaca.util.DateUtils"
        },
        {
            "file": "src/util/DateUtils.js",
            "line": 115,
            "description": "The months. You can supply [[Lavaca.util.Translation]] values using these names as keys to translate.",
            "itemtype": "property",
            "name": "months",
            "type": "Array",
            "static": 1,
            "default": "[\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]",
            "class": "lavaca.util.DateUtils"
        },
        {
            "file": "src/util/DateUtils.js",
            "line": 136,
            "description": "Object containing the functions used by each date format code. Default format codes are:\n\n<dl>\n<dt>d</dt> <dd>Day of month (1 - 31)</dd>\n<dt>dd</dt> <dd>Padded day of month (01 - 31)</dd>\n<dt>ddd</dt> <dd>Abbreviated day of week (Sun - Sat)</dd>\n<dt>ddd</dt> <dd>Full day of week (Sunday - Saturday)</dd>\n<dt>f</dt> <dd>Tenth of a second</dd>\n<dt>ff</dt> <dd>Hundreth of a second</dd>\n<dt>fff</dt> <dd>Milliseconds</dd>\n<dt>h</dt> <dd>Twelve-hour clock hour (1 - 12)</dd>\n<dt>hh</dt> <dd>Padded twelve-hour clock hour (01 - 12)</dd>\n<dt>H</dt> <dd>Twenty-four hour clock hour (0 - 23)</dd>\n<dt>HH</dt> <dd>Padded twenty-four hour clock hour (00 - 23)</dd>\n<dt>m</dt> <dd>Minute (0 - 59)</dd>\n<dt>mm</dt> <dd>Padded minute (00 - 59)</dd>\n<dt>M</dt> <dd>Month (1 - 12)</dd>\n<dt>MM</dt> <dd>Padded month (01 - 12)</dd>\n<dt>MMM</dt> <dd>Abbreviated month (Jan - Dec)</dd>\n<dt>MMMM</dt> <dd>Full month (January - December)</dd>\n<dt>s</dt> <dd>Second (0 - 59)</dd>\n<dt>ss</dt> <dd>Padded second (00 - 59)</dd>\n<dt>t</dt> <dd>Abbreviated AM/PM designator (A or P)</dd>\n<dt>tt</dt> <dd>Full AM/PM designator (AM or PM)</dd>\n<dt>y</dt> <dd>Short year (0 - 99)</dd>\n<dt>yy</dt> <dd>Padded short year (00 - 99)</dd>\n<dt>yyy</dt> <dd>Full year padded to at least 3 digits (000+)</dd>\n<dt>yyyy</dt> <dd>Full year padded to at least 4 digits (0000+)</dd>\n<dt>z</dt> <dd>Hours offset from UTC (-12, 0, 12)</dd>\n<dt>zz</dt> <dd>Padded hours offset from UTC (-12, 00, 12)</dd>\n<dt>zzz</dt> <dd>Padded hours and minute offset from UTC (-12:00, 00:00, 12:00)</dd>\n</dl>\n\nTo add a custom format code, assign this property an object containing an <code>i</code> function (responsible for parsing)\nand an <code>o</code> function (responsible for stringifying). The <code>i</code> function\nshould assign to one of the following properties of its second argument: date, month, year,\nhour, minute, second, ms, or offset. Example: <code>Lavaca.util.DateUtils.fn.QQQ = {i: function(input, dateObj, mappedObj) { dateObj.date = parseInt(input, 10); }, o: function(date, utc) { return (utc ? date.getUTCDate() : date.getDate()).toString(); }};</code>",
            "itemtype": "property",
            "name": "fn",
            "type": "Object",
            "static": 1,
            "class": "lavaca.util.DateUtils"
        },
        {
            "file": "src/util/DateUtils.js",
            "line": 487,
            "itemtype": "method",
            "name": "parse",
            "static": "Converts a string to a date",
            "params": [
                {
                    "name": "s",
                    "description": "The date string",
                    "type": "String"
                },
                {
                    "name": "f",
                    "description": "The format of the date string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The parsed date",
                "type": "Date"
            },
            "class": "lavaca.util.DateUtils"
        },
        {
            "file": "src/util/DateUtils.js",
            "line": 535,
            "description": "Converts a date to a string",
            "itemtype": "method",
            "name": "stringify",
            "static": 1,
            "params": [
                {
                    "name": "d",
                    "description": "The date",
                    "type": "Date"
                },
                {
                    "name": "f",
                    "description": "The string format of the date",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The stringified date",
                "type": "String"
            },
            "class": "lavaca.util.DateUtils"
        },
        {
            "file": "src/util/DateUtils.js",
            "line": 543,
            "description": "Converts a date to a string",
            "itemtype": "method",
            "name": "stringify",
            "static": 1,
            "params": [
                {
                    "name": "d",
                    "description": "The date",
                    "type": "Date"
                },
                {
                    "name": "f",
                    "description": "The string format of the date",
                    "type": "String"
                },
                {
                    "name": "utc",
                    "description": "When true, use the UTC date to generate the string",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The stringified date",
                "type": "String"
            },
            "class": "lavaca.util.DateUtils"
        },
        {
            "file": "src/util/Disposable.js",
            "line": 36,
            "description": "Readies the object to be garbage collected",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.util.Disposable"
        },
        {
            "file": "src/util/Map.js",
            "line": 34,
            "description": "Whether or not the map has loaded",
            "itemtype": "property",
            "name": "hasLoaded",
            "type": "Boolean",
            "default": "false",
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/util/Map.js",
            "line": 40,
            "description": "The name of the map",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "null",
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/util/Map.js",
            "line": 46,
            "description": "The source URL for the map",
            "itemtype": "property",
            "name": "src",
            "type": "String",
            "default": "null",
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/util/Map.js",
            "line": 52,
            "description": "The raw string data for the map",
            "itemtype": "property",
            "name": "code",
            "type": "String",
            "default": "null",
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/util/Map.js",
            "line": 58,
            "description": "The cache in which this map stores data",
            "itemtype": "property",
            "name": "cache",
            "type": "Lavaca.util.Cache",
            "default": "new Lavaca.util.Cache()",
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/util/Map.js",
            "line": 65,
            "description": "Determines whether or not this is the desired lookup",
            "itemtype": "method",
            "name": "is",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the lookup",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if this is the lookup",
                "type": "Boolean"
            },
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/util/Map.js",
            "line": 75,
            "description": "Gets the value stored under a code",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "code",
                    "description": "The code",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value (or null)",
                "type": "Object"
            },
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/util/Map.js",
            "line": 93,
            "description": "Adds parameters to this map",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "data",
                    "description": "The parameters to add",
                    "type": "Object"
                }
            ],
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/util/Map.js",
            "line": 104,
            "description": "Processes server data to include in this lookup",
            "itemtype": "method",
            "name": "process",
            "params": [
                {
                    "name": "text",
                    "description": "The server data string",
                    "type": "String"
                }
            ],
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/util/Map.js",
            "line": 113,
            "description": "Adds JSON data to this map (synchronous)",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "url",
                    "description": "The URL of the data",
                    "type": "String"
                }
            ],
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/util/Map.js",
            "line": 130,
            "description": "Sets the application's default config",
            "itemtype": "method",
            "name": "setDefault",
            "static": 1,
            "params": [
                {
                    "name": "cache",
                    "description": "The map cache",
                    "type": "Lavaca.util.Cache"
                },
                {
                    "name": "name",
                    "description": "The name of the config",
                    "type": "String"
                }
            ],
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/util/Map.js",
            "line": 145,
            "description": "Finds the most appropriate value for a code",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "cache",
                    "description": "The maps cache",
                    "type": "Lavaca.util.Cache"
                },
                {
                    "name": "name",
                    "description": "The name of the map",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "The name of the parameter",
                    "type": "String"
                },
                {
                    "name": "defaultName",
                    "description": "The name of the default map",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value of the parameter",
                "type": "Object"
            },
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/util/Map.js",
            "line": 169,
            "description": "Scans the document for all maps and prepares them",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "cache",
                    "description": "The map cache",
                    "type": "Lavaca.util.Cache"
                },
                {
                    "name": "mimeType",
                    "description": "The MIME type of the scripts",
                    "type": "String"
                },
                {
                    "name": "construct",
                    "description": "A function that returns a new map, in\n  the form construct(name, src, code)",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "The element to which to limit the scan",
                    "type": "JQuery"
                }
            ],
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/util/Map.js",
            "line": 197,
            "description": "Disposes of all maps",
            "itemtype": "method",
            "name": "dispose",
            "static": 1,
            "params": [
                {
                    "name": "cache",
                    "description": "The map cache",
                    "type": "Lavaca.util.Cache"
                }
            ],
            "class": "lavaca.util.Map"
        },
        {
            "file": "src/util/Promise.js",
            "line": 14,
            "description": "What the \"this\" keyword resolves to in callbacks",
            "itemtype": "property",
            "name": "thisp",
            "type": "Object",
            "default": "null",
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/util/Promise.js",
            "line": 20,
            "description": "Pending handlers for the success event",
            "itemtype": "property",
            "name": "resolvedQueue",
            "type": "Array",
            "default": "[]",
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/util/Promise.js",
            "line": 26,
            "description": "Pending handlers for the error event",
            "itemtype": "property",
            "name": "rejectedQueue",
            "type": "Array",
            "default": "[]",
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/util/Promise.js",
            "line": 33,
            "description": "Flag indicating that the promise completed successfully",
            "itemtype": "property",
            "name": "succeeded",
            "type": "Boolean",
            "default": "false",
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/util/Promise.js",
            "line": 39,
            "description": "Flag indicating that the promise failed to complete",
            "itemtype": "property",
            "name": "failed",
            "type": "Boolean",
            "default": "false",
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/util/Promise.js",
            "line": 45,
            "description": "Queues a callback to be executed when the promise succeeds",
            "itemtype": "method",
            "name": "success",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This promise (for chaining)",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/util/Promise.js",
            "line": 62,
            "description": "Queues a callback to be executed when the promise fails",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This promise (for chaining)",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/util/Promise.js",
            "line": 79,
            "description": "Queues a callback to be executed when the promise is either rejected or resolved",
            "itemtype": "method",
            "name": "always",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This promise (for chaining)",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/util/Promise.js",
            "line": 89,
            "description": "Queues up callbacks after the promise is completed",
            "itemtype": "method",
            "name": "then",
            "params": [
                {
                    "name": "resolved",
                    "description": "A callback to execute when the operation succeeds",
                    "type": "Function"
                },
                {
                    "name": "rejected",
                    "description": "A callback to execute when the operation fails",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This promise (for chaining)",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/util/Promise.js",
            "line": 102,
            "description": "Resolves the promise successfully",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "value",
                    "description": "Values to pass to the queued success callbacks",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This promise (for chaining)",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/util/Promise.js",
            "line": 121,
            "description": "Resolves the promise as a failure",
            "itemtype": "method",
            "name": "reject",
            "params": [
                {
                    "name": "err",
                    "description": "Failure messages",
                    "type": "String"
                }
            ],
            "return": {
                "description": "This promise (for chaining)",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/util/Promise.js",
            "line": 140,
            "description": "Queues this promise to be resolved only after several other promises\n  have been successfully resolved, or immediately rejected when one\n  of those promises is rejected",
            "itemtype": "method",
            "name": "when",
            "params": [
                {
                    "name": "promise",
                    "description": "One or more other promises",
                    "type": "Lavaca.util.Promise"
                }
            ],
            "return": {
                "description": "This promise (for chaining)",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/util/Promise.js",
            "line": 172,
            "description": "Produces a callback that resolves the promise with any number of arguments",
            "itemtype": "method",
            "name": "resolver",
            "return": {
                "description": "The callback",
                "type": "Function"
            },
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/util/Promise.js",
            "line": 183,
            "description": "Produces a callback that rejects the promise with any number of arguments",
            "itemtype": "method",
            "name": "rejector",
            "return": {
                "description": "The callback",
                "type": "Function"
            },
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/util/Promise.js",
            "line": 196,
            "description": "Creates a promise to be resolved only after several other promises\n   have been successfully resolved, or immediately rejected when one\n   of those promises is rejected",
            "itemtype": "method",
            "name": "when",
            "static": 1,
            "params": [
                {
                    "name": "promise",
                    "description": "One or more other promises",
                    "type": "Lavaca.util.Promise"
                }
            ],
            "return": {
                "description": "The new promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/util/Promise.js",
            "line": 206,
            "description": "Creates a promise to be resolved only after several other promises\n  have been successfully resolved, or immediately rejected when one\n  of those promises is rejected",
            "itemtype": "method",
            "name": "when",
            "static": 1,
            "params": [
                {
                    "name": "thisp",
                    "description": "The execution context of the promise",
                    "type": "Object"
                },
                {
                    "name": "promise",
                    "description": "One or more other promises",
                    "type": "Lavaca.util.Promise"
                }
            ],
            "return": {
                "description": "The new promise",
                "type": "Lavaca.util.Promise"
            },
            "class": "lavaca.util.Promise"
        },
        {
            "file": "src/util/StringUtils.js",
            "line": 21,
            "description": "Substitutes arguments into a string",
            "itemtype": "method",
            "name": "format",
            "static": 1,
            "params": [
                {
                    "name": "s",
                    "description": "The format string. Substitutions should be in the form {0} to sub in\n  the first arg, {1} for the second, and so on",
                    "type": "String"
                },
                {
                    "name": "arg",
                    "description": "Arguments to be substituted in to the string",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The format string with the arguments substituted into it",
                "type": "String"
            },
            "class": "lavaca.util.StringUtils"
        },
        {
            "file": "src/util/StringUtils.js",
            "line": 30,
            "description": "Substitutes arguments into a string",
            "itemtype": "method",
            "name": "format",
            "static": 1,
            "params": [
                {
                    "name": "s",
                    "description": "The format string. Substitutions should be in the form {0} to sub in\n  the first arg, {1} for the second, and so on",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Arguments to be substituted in to the string",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The format string with the arguments substituted into it",
                "type": "String"
            },
            "class": "lavaca.util.StringUtils"
        },
        {
            "file": "src/util/StringUtils.js",
            "line": 39,
            "description": "Substitutes arguments into a string",
            "itemtype": "method",
            "name": "format",
            "static": 1,
            "params": [
                {
                    "name": "s",
                    "description": "The format string. Substitutions should be in the form {0} to sub in\n  the first arg, {1} for the second, and so on",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Arguments to be substituted in to the string",
                    "type": "Array"
                },
                {
                    "name": "fn",
                    "description": "A function to call on each argument, the result of which is substituted into the string",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The format string with the arguments substituted into it",
                "type": "String"
            },
            "class": "lavaca.util.StringUtils"
        },
        {
            "file": "src/util/StringUtils.js",
            "line": 66,
            "description": "Escapes a string for inclusion in HTML",
            "itemtype": "method",
            "name": "escapeHTML",
            "static": 1,
            "params": [
                {
                    "name": "s",
                    "description": "The string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The escaped string",
                "type": "String"
            },
            "class": "lavaca.util.StringUtils"
        },
        {
            "file": "src/util/Translation.js",
            "line": 32,
            "description": "The ISO 639-2 code for the translation's language",
            "itemtype": "property",
            "name": "language",
            "type": "String",
            "default": "null",
            "class": "lavaca.util.Translation"
        },
        {
            "file": "src/util/Translation.js",
            "line": 38,
            "description": "The ISO 3166-1 code for the translation's country",
            "itemtype": "property",
            "name": "country",
            "type": "String",
            "default": "''",
            "class": "lavaca.util.Translation"
        },
        {
            "file": "src/util/Translation.js",
            "line": 44,
            "description": "The locale of this translation (either lang or lang_COUNTRY)",
            "itemtype": "property",
            "name": "locale",
            "type": "String",
            "default": "null",
            "class": "lavaca.util.Translation"
        },
        {
            "file": "src/util/Translation.js",
            "line": 53,
            "description": "Determines whether or not this translation works for a locale",
            "itemtype": "method",
            "name": "is",
            "params": [
                {
                    "name": "language",
                    "description": "The locale's language",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if this translation applies",
                "type": "Boolean"
            },
            "class": "lavaca.util.Translation"
        },
        {
            "file": "src/util/Translation.js",
            "line": 59,
            "description": "Determines whether or not this translation works for a locale",
            "itemtype": "method",
            "name": "is",
            "params": [
                {
                    "name": "language",
                    "description": "The locale's language",
                    "type": "String"
                },
                {
                    "name": "country",
                    "description": "(Optional) The locale's country",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if this translation applies",
                "type": "Boolean"
            },
            "class": "lavaca.util.Translation"
        },
        {
            "file": "src/util/Translation.js",
            "line": 71,
            "description": "Sets the application's default locale",
            "itemtype": "method",
            "name": "setDefault",
            "static": 1,
            "params": [
                {
                    "name": "locale",
                    "description": "A locale string (ie, \"en\", \"en_US\", or \"es_MX\")",
                    "type": "String"
                }
            ],
            "class": "lavaca.util.Translation"
        },
        {
            "file": "src/util/Translation.js",
            "line": 82,
            "description": "Finds the most appropriate translation for a given locale",
            "itemtype": "method",
            "name": "forLocale",
            "static": 1,
            "params": [
                {
                    "name": "locale",
                    "description": "The locale",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The translation",
                "type": "Lavaca.util.Translation"
            },
            "class": "lavaca.util.Translation"
        },
        {
            "file": "src/util/Translation.js",
            "line": 96,
            "description": "Finds the most appropriate translation of a message for the default locale",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "code",
                    "description": "The code under which the message is stored",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The translation",
                "type": "Lavaca.util.Translation"
            },
            "class": "lavaca.util.Translation"
        },
        {
            "file": "src/util/Translation.js",
            "line": 103,
            "description": "Finds the most appropriate translation of a message for the default locale",
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "locale",
                    "description": "The locale",
                    "type": "String"
                },
                {
                    "name": "code",
                    "description": "The code under which the message is stored",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The translation",
                "type": "Lavaca.util.Translation"
            },
            "class": "lavaca.util.Translation"
        },
        {
            "file": "src/util/Translation.js",
            "line": 135,
            "description": "Scans the document for all translations and prepares them",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "locale",
                    "description": "The default locale",
                    "type": "String"
                }
            ],
            "class": "lavaca.util.Translation"
        },
        {
            "file": "src/util/Translation.js",
            "line": 141,
            "description": "Scans the document for all translations and prepares them",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "locale",
                    "description": "The default locale",
                    "type": "String"
                },
                {
                    "name": "scope",
                    "description": "The element to which to limit the scan",
                    "type": "JQuery"
                }
            ],
            "class": "lavaca.util.Translation"
        },
        {
            "file": "src/util/Translation.js",
            "line": 152,
            "description": "Disposes of all translations",
            "itemtype": "method",
            "name": "dispose",
            "static": 1,
            "class": "lavaca.util.Translation"
        },
        {
            "file": "src/util/extend.js",
            "line": 7,
            "description": "Establishes inheritance between types. After a type is extended, it receives its own static\nconvenience method, extend(TSub, overrides).",
            "itemtype": "method",
            "name": "extend",
            "static": 1,
            "class": "lavaca.util.extend"
        },
        {
            "file": "src/util/extend.js",
            "line": 14,
            "description": "Establishes inheritance between types. After a type is extended, it receives its own static\nconvenience method, extend(TSub, overrides).",
            "itemtype": "method",
            "name": "extend",
            "static": 1,
            "params": [
                {
                    "name": "TSub",
                    "description": "The child type which will inherit from superType",
                    "type": "Function"
                },
                {
                    "name": "overrides",
                    "description": "A hash of key-value pairs that will be added to the subType",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The subtype",
                "type": "Function"
            },
            "class": "lavaca.util.extend"
        },
        {
            "file": "src/util/extend.js",
            "line": 24,
            "description": "Establishes inheritance between types. After a type is extended, it receives its own static\nconvenience method, extend(TSub, overrides).",
            "itemtype": "method",
            "name": "extend",
            "static": 1,
            "params": [
                {
                    "name": "TSuper",
                    "description": "The base type to extend",
                    "type": "Function"
                },
                {
                    "name": "TSub",
                    "description": "The child type which will inherit from superType",
                    "type": "Function"
                },
                {
                    "name": "overrides",
                    "description": "A hash of key-value pairs that will be added to the subType",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The subtype",
                "type": "Function"
            },
            "class": "lavaca.util.extend"
        },
        {
            "file": "src/util/resolve.js",
            "line": 7,
            "description": "Looks up or creates an object, given its global path (ie, 'Lavaca.resolve' resolves to this function,\n'no.obj.exists' resolves to null)",
            "itemtype": "method",
            "name": "resolve",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The fully-qualified name of the object to look up",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The resolved object",
                "type": "Object"
            },
            "class": "lavaca.util.resolve"
        },
        {
            "file": "src/util/resolve.js",
            "line": 16,
            "description": "Looks up or creates an object, given its global path (ie, 'Lavaca.resolve' resolves to this function,\n'no.obj.exists' resolves to null)",
            "itemtype": "method",
            "name": "resolve",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The fully-qualified name of the object to look up",
                    "type": "String"
                },
                {
                    "name": "createIfNotExists",
                    "description": "When true, any part of the name that doesn't already exist will be created\nas an empty object",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The resolved object",
                "type": "Object"
            },
            "class": "lavaca.util.resolve"
        },
        {
            "file": "src/util/uuid.js",
            "line": 8,
            "description": "Produces a unique identifier",
            "itemtype": "method",
            "name": "uuid",
            "static": 1,
            "params": [
                {
                    "name": "namespace",
                    "description": "A string served the namespace of a uuid",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A number that is unique to this page",
                "type": "Number"
            },
            "class": "lavaca.util.uuid"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: projectdescription",
            "line": " src/components/dustjs-linkedin/test/dust_files/jsdump.js:1"
        },
        {
            "message": "unknown tag: version",
            "line": " src/components/dustjs-linkedin/test/dust_files/jsdump.js:1"
        },
        {
            "message": "unknown tag: link",
            "line": " src/components/dustjs-linkedin/test/dust_files/jsdump.js:1"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:50"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:122"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:122"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:132"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:132"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:142"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:142"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:152"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:152"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:163"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:175"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:185"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:400"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:438"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:723"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:734"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:751"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:758"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1537"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1589"
        },
        {
            "message": "unknown tag: projectdescription",
            "line": " src/components/dustjs-linkedin/vendor/jsdump.js:1"
        },
        {
            "message": "unknown tag: version",
            "line": " src/components/dustjs-linkedin/vendor/jsdump.js:1"
        },
        {
            "message": "unknown tag: link",
            "line": " src/components/dustjs-linkedin/vendor/jsdump.js:1"
        },
        {
            "message": "unknown tag: projectdescription",
            "line": " src/components/dustjs-linkedin-helpers/test/dust_files/jsdump.js:1"
        },
        {
            "message": "unknown tag: version",
            "line": " src/components/dustjs-linkedin-helpers/test/dust_files/jsdump.js:1"
        },
        {
            "message": "unknown tag: link",
            "line": " src/components/dustjs-linkedin-helpers/test/dust_files/jsdump.js:1"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:50"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:122"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:122"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:132"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:132"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:142"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:142"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:152"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:152"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:163"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:175"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:185"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:400"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:438"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:723"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:734"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:751"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:758"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1537"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1589"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:50"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:122"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:122"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:132"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:132"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:142"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:142"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:152"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:152"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:163"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:175"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:185"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:400"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:438"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:723"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:734"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:751"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:758"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1537"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1589"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/hammer.js:10"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/hammer.js:106"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/hammer.js:149"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/hammer.js:164"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/hammer.js:179"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/hammer.js:203"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/hammer.js:469"
        },
        {
            "message": "replacing incorrect tag: parm with param",
            "line": " src/components/hammerjs/dist/hammer.js:540"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/hammer.js:540"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/hammer.js:559"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/hammer.js:577"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/hammer.js:597"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/hammer.js:612"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/hammer.js:625"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/hammer.js:644"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/hammer.js:657"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/hammer.js:674"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/hammer.js:690"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/hammer.js:840"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/hammer.js:888"
        },
        {
            "message": "unknown tag: events",
            "line": " src/components/hammerjs/dist/hammer.js:1034"
        },
        {
            "message": "unknown tag: events",
            "line": " src/components/hammerjs/dist/hammer.js:1080"
        },
        {
            "message": "unknown tag: events",
            "line": " src/components/hammerjs/dist/hammer.js:1126"
        },
        {
            "message": "unknown tag: events",
            "line": " src/components/hammerjs/dist/hammer.js:1160"
        },
        {
            "message": "unknown tag: events",
            "line": " src/components/hammerjs/dist/hammer.js:1265"
        },
        {
            "message": "unknown tag: events",
            "line": " src/components/hammerjs/dist/hammer.js:1355"
        },
        {
            "message": "unknown tag: events",
            "line": " src/components/hammerjs/dist/hammer.js:1391"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:10"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:106"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:149"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:164"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:179"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:203"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:469"
        },
        {
            "message": "replacing incorrect tag: parm with param",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:540"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:540"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:559"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:577"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:597"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:612"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:625"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:644"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:657"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:674"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:690"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:840"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:888"
        },
        {
            "message": "unknown tag: events",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:1034"
        },
        {
            "message": "unknown tag: events",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:1080"
        },
        {
            "message": "unknown tag: events",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:1126"
        },
        {
            "message": "unknown tag: events",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:1160"
        },
        {
            "message": "unknown tag: events",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:1265"
        },
        {
            "message": "unknown tag: events",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:1355"
        },
        {
            "message": "unknown tag: events",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:1391"
        },
        {
            "message": "unknown tag: this",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:1472"
        },
        {
            "message": "unknown tag: this",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:1486"
        },
        {
            "message": "unknown tag: this",
            "line": " src/components/hammerjs/plugins/jquery.hammer.js:50"
        },
        {
            "message": "unknown tag: this",
            "line": " src/components/hammerjs/plugins/jquery.hammer.js:64"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/src/core.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/src/detection.js:102"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/src/detection.js:150"
        },
        {
            "message": "unknown tag: events",
            "line": " src/components/hammerjs/src/gestures.js:110"
        },
        {
            "message": "unknown tag: events",
            "line": " src/components/hammerjs/src/gestures.js:156"
        },
        {
            "message": "unknown tag: events",
            "line": " src/components/hammerjs/src/gestures.js:202"
        },
        {
            "message": "unknown tag: events",
            "line": " src/components/hammerjs/src/gestures.js:236"
        },
        {
            "message": "unknown tag: events",
            "line": " src/components/hammerjs/src/gestures.js:341"
        },
        {
            "message": "unknown tag: events",
            "line": " src/components/hammerjs/src/gestures.js:431"
        },
        {
            "message": "unknown tag: events",
            "line": " src/components/hammerjs/src/gestures.js:467"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/src/instance.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/src/instance.js:44"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/src/instance.js:59"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/src/instance.js:74"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/src/instance.js:98"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/src/pointerevent.js:8"
        },
        {
            "message": "replacing incorrect tag: parm with param",
            "line": " src/components/hammerjs/src/utils.js:2"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/src/utils.js:2"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/src/utils.js:21"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/src/utils.js:39"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/src/utils.js:59"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/src/utils.js:74"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/src/utils.js:87"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/src/utils.js:106"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/src/utils.js:119"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/src/utils.js:136"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/hammerjs/src/utils.js:152"
        },
        {
            "message": "unknown tag: projectdescription",
            "line": " src/components/hammerjs/tests/libs/qunit.js:1267"
        },
        {
            "message": "unknown tag: version",
            "line": " src/components/hammerjs/tests/libs/qunit.js:1267"
        },
        {
            "message": "unknown tag: link",
            "line": " src/components/hammerjs/tests/libs/qunit.js:1267"
        },
        {
            "message": "unknown tag: result",
            "line": " src/components/jquery/test/data/testinit.js:25"
        },
        {
            "message": "unknown tag: result",
            "line": " src/components/jquery/test/data/testinit.js:40"
        },
        {
            "message": "unknown tag: result",
            "line": " src/components/jquery/test/data/testinit.js:132"
        },
        {
            "message": "unknown tag: result",
            "line": " src/components/jquery/test/data/testinit.js:132"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/jquery/jquery.js:1157"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/jquery/jquery.js:1221"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/jquery/jquery.js:1308"
        },
        {
            "message": "unknown tag: constant",
            "line": " src/components/mout/src/number/MAX_INT.js:1"
        },
        {
            "message": "unknown tag: constant",
            "line": " src/components/mout/src/number/MAX_UINT.js:1"
        },
        {
            "message": "unknown tag: constant",
            "line": " src/components/mout/src/number/MIN_INT.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " src/components/require-dust/demo/lib/require.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/require-dust/demo/lib/require.js:175"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/require-dust/demo/lib/require.js:271"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/require-dust/demo/lib/require.js:390"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/require-dust/demo/lib/require.js:1219"
        },
        {
            "message": "unknown tag: license",
            "line": " src/components/requirejs/require.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/requirejs/require.js:157"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/requirejs/require.js:258"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/requirejs/require.js:400"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/components/requirejs/require.js:1189"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:134"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:134"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:134"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:134"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:134"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:134"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:134"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:155"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:155"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:155"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:155"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:155"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:155"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:155"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:155"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: super",
            "line": " src/mvc/Collection.js:57"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/mvc/Collection.js:183"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/mvc/Collection.js:234"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/mvc/Collection.js:241"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/mvc/Collection.js:286"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/mvc/Collection.js:293"
        },
        {
            "message": "unknown tag: sig",
            "line": " src/mvc/Collection.js:464"
        },
        {
            "message": "unknown tag: sig",
            "line": " src/mvc/Model.js:293"
        },
        {
            "message": "unknown tag: field",
            "line": " src/mvc/Model.js:641"
        },
        {
            "message": "unknown tag: field",
            "line": " src/mvc/Model.js:648"
        },
        {
            "message": "unknown tag: field",
            "line": " src/mvc/Router.js:18"
        },
        {
            "message": "unknown tag: field",
            "line": " src/mvc/Router.js:24"
        },
        {
            "message": "unknown tag: field",
            "line": " src/mvc/Router.js:32"
        },
        {
            "message": "unknown tag: field",
            "line": " src/mvc/Router.js:38"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/net/History.js:129"
        },
        {
            "message": "unknown tag: field",
            "line": " src/storage/LocalStore.js:35"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/util/Promise.js:102"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/util/Promise.js:121"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/util/Promise.js:140"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/util/Promise.js:196"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/util/Promise.js:206"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/util/StringUtils.js:21"
        },
        {
            "message": "Missing item type\njsDump\nCopyright (c) 2008 Ariel Flesler - aflesler(at)gmail(dot)com | http://flesler.blogspot.com\nLicensed under BSD (http://www.opensource.org/licenses/bsd-license.php)\nDate: 5/15/2008",
            "line": " src/components/dustjs-linkedin/test/dust_files/jsdump.js:1"
        },
        {
            "message": "Missing item type\nTop level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:3"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:10"
        },
        {
            "message": "Missing item type\nUse <code>jasmine.undefined</code> instead of <code>undefined</code>, since <code>undefined</code> is just\na plain old variable and may be redefined by somebody else.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:17"
        },
        {
            "message": "Missing item type\nShow diagnostic messages in the console if set to true",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:25"
        },
        {
            "message": "Missing item type\nDefault interval in milliseconds for event loop yields (e.g. to allow network activity or to refresh the screen with the HTML-based runner). Small values here may result in slow test running. Zero means no updates until all tests have completed.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:31"
        },
        {
            "message": "Missing item type\nDefault timeout interval in milliseconds for waitsFor() blocks.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:37"
        },
        {
            "message": "Missing item type\nAllows for bound functions to be compared.  Internal use only.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:50"
        },
        {
            "message": "Missing item type\nGetter for the Jasmine environment. Ensures one gets created",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:114"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:122"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:132"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:142"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:152"
        },
        {
            "message": "Missing item type\nPretty printer for expecations.  Takes any object and turns it into a human-readable string.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:163"
        },
        {
            "message": "Missing item type\nReturns true if the object is a DOM Node.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:175"
        },
        {
            "message": "Missing item type\nReturns a matchable 'generic' object of the class type.  For use in expecations of type when values don't matter.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:185"
        },
        {
            "message": "Missing item type\nJasmine Spies are test doubles that can act as stubs, spies, fakes or when used in an expecation, mocks.\n\nSpies should be created in test setup, before expectations.  They can then be checked, using the standard Jasmine\nexpectation syntax. Spies can be checked if they were called or not and what the calling params were.\n\nA Spy has the following fields: wasCalled, callCount, mostRecentCall, and argsForCall (see docs).\n\nSpies are torn down at the end of every spec.\n\nNote: Do <b>not</b> call new jasmine.Spy() directly - a spy must be created using spyOn, jasmine.createSpy or jasmine.createSpyObj.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:199"
        },
        {
            "message": "Missing item type\nThe name of the spy, if provided.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:244"
        },
        {
            "message": "Missing item type\nIs this Object a spy?",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:248"
        },
        {
            "message": "Missing item type\nThe actual function this spy stubs.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:252"
        },
        {
            "message": "Missing item type\nTracking of the most recent call to the spy.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:257"
        },
        {
            "message": "Missing item type\nHolds arguments for each call to the spy, indexed by call count",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:266"
        },
        {
            "message": "Missing item type\nTells a spy to call through to the actual implemenatation.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:280"
        },
        {
            "message": "Missing item type\nFor setting the return value of a spy.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:296"
        },
        {
            "message": "Missing item type\nFor throwing an exception when a spy is called.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:315"
        },
        {
            "message": "Missing item type\nCalls an alternate implementation when a spy is called.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:334"
        },
        {
            "message": "Missing item type\nResets all of a spy's the tracking variables so that it can be used again.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:354"
        },
        {
            "message": "Missing item type\nDetermines whether an object is a spy.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:400"
        },
        {
            "message": "Missing item type\nCreates a more complicated spy: an Object that has every property a function that is a spy.  Used for stubbing something\nlarge in one call.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:410"
        },
        {
            "message": "Missing item type\nAll parameters are pretty-printed and concatenated together, then written to the current spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:428"
        },
        {
            "message": "Missing item type\nFunction that installs a spy on an existing object's method name.  Used within a Spec to create a spy.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:438"
        },
        {
            "message": "Missing item type\nCreates a Jasmine spec that will be added to the current suite.\n\n// TODO: pending tests",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:458"
        },
        {
            "message": "Missing item type\nCreates a <em>disabled</em> Jasmine spec.\n\nA convenience method that allows existing specs to be disabled temporarily during development.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:476"
        },
        {
            "message": "Missing item type\nStarts a chain for a Jasmine expectation.\n\nIt is passed an Object that is the actual value and should chain to one of the many\njasmine.Matchers functions.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:489"
        },
        {
            "message": "Missing item type\nDefines part of a jasmine spec.  Used in cominbination with waits or waitsFor in asynchrnous specs.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:502"
        },
        {
            "message": "Missing item type\nWaits a fixed time period before moving to the next block.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:512"
        },
        {
            "message": "Missing item type\nWaits for the latchFunction to return true before proceeding to the next block.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:523"
        },
        {
            "message": "Missing item type\nA function that is called before each spec in a suite.\n\nUsed for spec setup, including validating assumptions.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:535"
        },
        {
            "message": "Missing item type\nA function that is called after each spec in a suite.\n\nUsed for restoring any state that is hijacked during spec execution.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:547"
        },
        {
            "message": "Missing item type\nDefines a suite of specifications.\n\nStores the description and all defined specs in the Jasmine environment as one suite of specs. Variables declared\nare accessible by calls to beforeEach, it, and afterEach. Describe blocks can be nested, allowing for specialization\nof setup in some tests.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:559"
        },
        {
            "message": "Missing item type\nDisables a suite of specifications.  Used to disable some suites in a file, or files, temporarily during development.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:579"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:618"
        },
        {
            "message": "Missing item type\nDeclare that a child class inherit it's prototype from the parent class.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:623"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:631"
        },
        {
            "message": "Missing item type\nEnvironment for Jasmine",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:685"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:723"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:734"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:751"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:758"
        },
        {
            "message": "Missing item type\nRegister a reporter to receive status updates from Jasmine.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:765"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:954"
        },
        {
            "message": "Missing item type\nBlocks are functions with executable code that make up a spec.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:985"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1007"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1109"
        },
        {
            "message": "Missing item type\ntoBe: compares the actual to the expected using ===",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1186"
        },
        {
            "message": "Missing item type\ntoNotBe: compares the actual to the expected using !==",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1194"
        },
        {
            "message": "Missing item type\ntoEqual: compares the actual to the expected using common sense equality. Handles Objects, Arrays, etc.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1203"
        },
        {
            "message": "Missing item type\ntoNotEqual: compares the actual to the expected using the ! of jasmine.Matchers.toEqual",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1212"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to the expected using a regular expression.  Constructs a RegExp, so takes\na pattern or a String.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1221"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to the expected using the boolean inverse of jasmine.Matchers.toMatch",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1231"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to jasmine.undefined.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1240"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to jasmine.undefined.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1247"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to null.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1254"
        },
        {
            "message": "Missing item type\nMatcher that boolean not-nots the actual.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1261"
        },
        {
            "message": "Missing item type\nMatcher that boolean nots the actual.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1269"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was called.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1277"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1299"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was not called.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1302"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was called with a set of parameters.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1326"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1355"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1358"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is an element in the actual Array.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1375"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is NOT an element in the actual Array.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1384"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is equal to the actual item\nup to a given level of decimal precision (default 2).",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1402"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected exception was thrown by the actual.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1419"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1480"
        },
        {
            "message": "Missing item type\nHolds results for a set of Jasmine spec. Allows for the results array to hold another jasmine.NestedResults",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1515"
        },
        {
            "message": "Missing item type\nThe total count of results",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1521"
        },
        {
            "message": "Missing item type\nNumber of passed results",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1525"
        },
        {
            "message": "Missing item type\nNumber of failed results",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1529"
        },
        {
            "message": "Missing item type\nWas this suite/spec skipped?",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1533"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1537"
        },
        {
            "message": "Missing item type\nRoll up the result counts.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1543"
        },
        {
            "message": "Missing item type\nAdds a log message.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1554"
        },
        {
            "message": "Missing item type\nGetter for the results: message & results.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1562"
        },
        {
            "message": "Missing item type\nAdds a result, tracking counts (total, passed, & failed)",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1569"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1589"
        },
        {
            "message": "Missing item type\nBase class for pretty printing for expectation results.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1595"
        },
        {
            "message": "Missing item type\nFormats a value in a nice, human-readable string.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1602"
        },
        {
            "message": "Missing item type\nRunner",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1817"
        },
        {
            "message": "Missing item type\nInternal representation of a Jasmine specification, or test.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1894"
        },
        {
            "message": "Missing item type\nAll parameters are pretty-printed and concatenated together, then written to the spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1933"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1956"
        },
        {
            "message": "Missing item type\nWaits a fixed time period before moving to the next block.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1969"
        },
        {
            "message": "Missing item type\nWaits for the latchFunction to return true before proceeding to the next block.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1981"
        },
        {
            "message": "Missing item type\nInternal representation of a Jasmine suite.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:2137"
        },
        {
            "message": "Missing item type\nA block which waits for some condition to become true, with timeout.",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:2234"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:2375"
        },
        {
            "message": "Missing item type\njsDump\nCopyright (c) 2008 Ariel Flesler - aflesler(at)gmail(dot)com | http://flesler.blogspot.com\nLicensed under BSD (http://www.opensource.org/licenses/bsd-license.php)\nDate: 5/15/2008",
            "line": " src/components/dustjs-linkedin/vendor/jsdump.js:1"
        },
        {
            "message": "Missing item type\nif helper",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.0.0.js:111"
        },
        {
            "message": "Missing item type\nmath helper",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.0.0.js:138"
        },
        {
            "message": "Missing item type\nselect/eq/lt/lte/gt/gte/default helper",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.0.0.js:202"
        },
        {
            "message": "Missing item type\ncontextDump helper",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.0.js:163"
        },
        {
            "message": "Missing item type\nif helper for complex evaluation complex logic expressions.\nNote : #1 if helper fails gracefully when there is no body block nor else block\n       #2 Undefined values and false values in the JSON need to be handled specially with .length check\n          for e.g @if cond=\" '{a}'.length && '{b}'.length\" is advised when there are chances of the a and b been\n          undefined or false in the context\n       #3 Use only when the default ? and ^ dust operators and the select fall short in addressing the given logic,\n          since eval executes in the global scope\n       #4 All dust references are default escaped as they are resolved, hence eval will block malicious scripts in the context\n          Be mindful of evaluating a expression that is passed through the unescape filter -> |s",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.0.js:191"
        },
        {
            "message": "Missing item type\nmath helper",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.0.js:234"
        },
        {
            "message": "Missing item type\nselect helperworks with one of the eq/gt/gte/lt/lte/default providing the functionality\nof branching conditions",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.0.js:306"
        },
        {
            "message": "Missing item type\neq helper compares the given key is same as the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.0.js:336"
        },
        {
            "message": "Missing item type\nne helper compares the given key is not the same as the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.0.js:354"
        },
        {
            "message": "Missing item type\nlt helper compares the given key is less than the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.0.js:373"
        },
        {
            "message": "Missing item type\nlte helper compares the given key is less or equal to the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.0.js:391"
        },
        {
            "message": "Missing item type\ngt helper compares the given key is greater than the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.0.js:411"
        },
        {
            "message": "Missing item type\ngte helper, compares the given key is greater than or equal to the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.0.js:431"
        },
        {
            "message": "Missing item type\nsize helper prints the size of the given key\nNote : size helper is self closing and does not support bodies",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.0.js:460"
        },
        {
            "message": "Missing item type\ncontextDump helper",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.1.js:159"
        },
        {
            "message": "Missing item type\nif helper for complex evaluation complex logic expressions.\nNote : #1 if helper fails gracefully when there is no body block nor else block\n       #2 Undefined values and false values in the JSON need to be handled specially with .length check\n          for e.g @if cond=\" '{a}'.length && '{b}'.length\" is advised when there are chances of the a and b been\n          undefined or false in the context\n       #3 Use only when the default ? and ^ dust operators and the select fall short in addressing the given logic,\n          since eval executes in the global scope\n       #4 All dust references are default escaped as they are resolved, hence eval will block malicious scripts in the context\n          Be mindful of evaluating a expression that is passed through the unescape filter -> |s",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.1.js:187"
        },
        {
            "message": "Missing item type\nmath helper",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.1.js:230"
        },
        {
            "message": "Missing item type\nselect helperworks with one of the eq/gt/gte/lt/lte/default providing the functionality\nof branching conditions",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.1.js:310"
        },
        {
            "message": "Missing item type\neq helper compares the given key is same as the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.1.js:340"
        },
        {
            "message": "Missing item type\nne helper compares the given key is not the same as the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.1.js:358"
        },
        {
            "message": "Missing item type\nlt helper compares the given key is less than the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.1.js:377"
        },
        {
            "message": "Missing item type\nlte helper compares the given key is less or equal to the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.1.js:395"
        },
        {
            "message": "Missing item type\ngt helper compares the given key is greater than the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.1.js:415"
        },
        {
            "message": "Missing item type\ngte helper, compares the given key is greater than or equal to the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.1.js:435"
        },
        {
            "message": "Missing item type\nsize helper prints the size of the given key\nNote : size helper is self closing and does not support bodies",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.1.js:464"
        },
        {
            "message": "Missing item type\ncontextDump helper",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.2.js:162"
        },
        {
            "message": "Missing item type\nif helper for complex evaluation complex logic expressions.\nNote : #1 if helper fails gracefully when there is no body block nor else block\n       #2 Undefined values and false values in the JSON need to be handled specially with .length check\n          for e.g @if cond=\" '{a}'.length && '{b}'.length\" is advised when there are chances of the a and b been\n          undefined or false in the context\n       #3 Use only when the default ? and ^ dust operators and the select fall short in addressing the given logic,\n          since eval executes in the global scope\n       #4 All dust references are default escaped as they are resolved, hence eval will block malicious scripts in the context\n          Be mindful of evaluating a expression that is passed through the unescape filter -> |s",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.2.js:190"
        },
        {
            "message": "Missing item type\nmath helper",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.2.js:233"
        },
        {
            "message": "Missing item type\nselect helper works with one of the eq/ne/gt/gte/lt/lte/default providing the functionality\nof branching conditions",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.2.js:313"
        },
        {
            "message": "Missing item type\neq helper compares the given key is same as the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.2.js:343"
        },
        {
            "message": "Missing item type\nne helper compares the given key is not the same as the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.2.js:361"
        },
        {
            "message": "Missing item type\nlt helper compares the given key is less than the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.2.js:380"
        },
        {
            "message": "Missing item type\nlte helper compares the given key is less or equal to the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.2.js:398"
        },
        {
            "message": "Missing item type\ngt helper compares the given key is greater than the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.2.js:418"
        },
        {
            "message": "Missing item type\ngte helper, compares the given key is greater than or equal to the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.2.js:438"
        },
        {
            "message": "Missing item type\nsize helper prints the size of the given key\nNote : size helper is self closing and does not support bodies",
            "line": " src/components/dustjs-linkedin-helpers/dist/dust-helpers-1.1.2.js:467"
        },
        {
            "message": "Missing item type\ncontextDump helper",
            "line": " src/components/dustjs-linkedin-helpers/lib/dust-helpers.js:162"
        },
        {
            "message": "Missing item type\nif helper for complex evaluation complex logic expressions.\nNote : #1 if helper fails gracefully when there is no body block nor else block\n       #2 Undefined values and false values in the JSON need to be handled specially with .length check\n          for e.g @if cond=\" '{a}'.length && '{b}'.length\" is advised when there are chances of the a and b been\n          undefined or false in the context\n       #3 Use only when the default ? and ^ dust operators and the select fall short in addressing the given logic,\n          since eval executes in the global scope\n       #4 All dust references are default escaped as they are resolved, hence eval will block malicious scripts in the context\n          Be mindful of evaluating a expression that is passed through the unescape filter -> |s",
            "line": " src/components/dustjs-linkedin-helpers/lib/dust-helpers.js:190"
        },
        {
            "message": "Missing item type\nmath helper",
            "line": " src/components/dustjs-linkedin-helpers/lib/dust-helpers.js:233"
        },
        {
            "message": "Missing item type\nselect helper works with one of the eq/ne/gt/gte/lt/lte/default providing the functionality\nof branching conditions",
            "line": " src/components/dustjs-linkedin-helpers/lib/dust-helpers.js:313"
        },
        {
            "message": "Missing item type\neq helper compares the given key is same as the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "line": " src/components/dustjs-linkedin-helpers/lib/dust-helpers.js:343"
        },
        {
            "message": "Missing item type\nne helper compares the given key is not the same as the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "line": " src/components/dustjs-linkedin-helpers/lib/dust-helpers.js:361"
        },
        {
            "message": "Missing item type\nlt helper compares the given key is less than the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "line": " src/components/dustjs-linkedin-helpers/lib/dust-helpers.js:380"
        },
        {
            "message": "Missing item type\nlte helper compares the given key is less or equal to the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "line": " src/components/dustjs-linkedin-helpers/lib/dust-helpers.js:398"
        },
        {
            "message": "Missing item type\ngt helper compares the given key is greater than the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "line": " src/components/dustjs-linkedin-helpers/lib/dust-helpers.js:418"
        },
        {
            "message": "Missing item type\ngte helper, compares the given key is greater than or equal to the expected value\nIt can be used standalone or in conjunction with select for multiple branching",
            "line": " src/components/dustjs-linkedin-helpers/lib/dust-helpers.js:438"
        },
        {
            "message": "Missing item type\nsize helper prints the size of the given key\nNote : size helper is self closing and does not support bodies",
            "line": " src/components/dustjs-linkedin-helpers/lib/dust-helpers.js:467"
        },
        {
            "message": "Missing item type\njsDump\nCopyright (c) 2008 Ariel Flesler - aflesler(at)gmail(dot)com | http://flesler.blogspot.com\nLicensed under BSD (http://www.opensource.org/licenses/bsd-license.php)\nDate: 5/15/2008",
            "line": " src/components/dustjs-linkedin-helpers/test/dust_files/jsdump.js:1"
        },
        {
            "message": "Missing item type\nTop level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:3"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:10"
        },
        {
            "message": "Missing item type\nUse <code>jasmine.undefined</code> instead of <code>undefined</code>, since <code>undefined</code> is just\na plain old variable and may be redefined by somebody else.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:17"
        },
        {
            "message": "Missing item type\nShow diagnostic messages in the console if set to true",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:25"
        },
        {
            "message": "Missing item type\nDefault interval in milliseconds for event loop yields (e.g. to allow network activity or to refresh the screen with the HTML-based runner). Small values here may result in slow test running. Zero means no updates until all tests have completed.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:31"
        },
        {
            "message": "Missing item type\nDefault timeout interval in milliseconds for waitsFor() blocks.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:37"
        },
        {
            "message": "Missing item type\nAllows for bound functions to be compared.  Internal use only.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:50"
        },
        {
            "message": "Missing item type\nGetter for the Jasmine environment. Ensures one gets created",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:114"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:122"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:132"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:142"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:152"
        },
        {
            "message": "Missing item type\nPretty printer for expecations.  Takes any object and turns it into a human-readable string.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:163"
        },
        {
            "message": "Missing item type\nReturns true if the object is a DOM Node.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:175"
        },
        {
            "message": "Missing item type\nReturns a matchable 'generic' object of the class type.  For use in expecations of type when values don't matter.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:185"
        },
        {
            "message": "Missing item type\nJasmine Spies are test doubles that can act as stubs, spies, fakes or when used in an expecation, mocks.\n\nSpies should be created in test setup, before expectations.  They can then be checked, using the standard Jasmine\nexpectation syntax. Spies can be checked if they were called or not and what the calling params were.\n\nA Spy has the following fields: wasCalled, callCount, mostRecentCall, and argsForCall (see docs).\n\nSpies are torn down at the end of every spec.\n\nNote: Do <b>not</b> call new jasmine.Spy() directly - a spy must be created using spyOn, jasmine.createSpy or jasmine.createSpyObj.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:199"
        },
        {
            "message": "Missing item type\nThe name of the spy, if provided.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:244"
        },
        {
            "message": "Missing item type\nIs this Object a spy?",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:248"
        },
        {
            "message": "Missing item type\nThe actual function this spy stubs.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:252"
        },
        {
            "message": "Missing item type\nTracking of the most recent call to the spy.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:257"
        },
        {
            "message": "Missing item type\nHolds arguments for each call to the spy, indexed by call count",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:266"
        },
        {
            "message": "Missing item type\nTells a spy to call through to the actual implemenatation.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:280"
        },
        {
            "message": "Missing item type\nFor setting the return value of a spy.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:296"
        },
        {
            "message": "Missing item type\nFor throwing an exception when a spy is called.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:315"
        },
        {
            "message": "Missing item type\nCalls an alternate implementation when a spy is called.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:334"
        },
        {
            "message": "Missing item type\nResets all of a spy's the tracking variables so that it can be used again.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:354"
        },
        {
            "message": "Missing item type\nDetermines whether an object is a spy.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:400"
        },
        {
            "message": "Missing item type\nCreates a more complicated spy: an Object that has every property a function that is a spy.  Used for stubbing something\nlarge in one call.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:410"
        },
        {
            "message": "Missing item type\nAll parameters are pretty-printed and concatenated together, then written to the current spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:428"
        },
        {
            "message": "Missing item type\nFunction that installs a spy on an existing object's method name.  Used within a Spec to create a spy.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:438"
        },
        {
            "message": "Missing item type\nCreates a Jasmine spec that will be added to the current suite.\n\n// TODO: pending tests",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:458"
        },
        {
            "message": "Missing item type\nCreates a <em>disabled</em> Jasmine spec.\n\nA convenience method that allows existing specs to be disabled temporarily during development.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:476"
        },
        {
            "message": "Missing item type\nStarts a chain for a Jasmine expectation.\n\nIt is passed an Object that is the actual value and should chain to one of the many\njasmine.Matchers functions.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:489"
        },
        {
            "message": "Missing item type\nDefines part of a jasmine spec.  Used in cominbination with waits or waitsFor in asynchrnous specs.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:502"
        },
        {
            "message": "Missing item type\nWaits a fixed time period before moving to the next block.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:512"
        },
        {
            "message": "Missing item type\nWaits for the latchFunction to return true before proceeding to the next block.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:523"
        },
        {
            "message": "Missing item type\nA function that is called before each spec in a suite.\n\nUsed for spec setup, including validating assumptions.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:535"
        },
        {
            "message": "Missing item type\nA function that is called after each spec in a suite.\n\nUsed for restoring any state that is hijacked during spec execution.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:547"
        },
        {
            "message": "Missing item type\nDefines a suite of specifications.\n\nStores the description and all defined specs in the Jasmine environment as one suite of specs. Variables declared\nare accessible by calls to beforeEach, it, and afterEach. Describe blocks can be nested, allowing for specialization\nof setup in some tests.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:559"
        },
        {
            "message": "Missing item type\nDisables a suite of specifications.  Used to disable some suites in a file, or files, temporarily during development.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:579"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:618"
        },
        {
            "message": "Missing item type\nDeclare that a child class inherit it's prototype from the parent class.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:623"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:631"
        },
        {
            "message": "Missing item type\nEnvironment for Jasmine",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:685"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:723"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:734"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:751"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:758"
        },
        {
            "message": "Missing item type\nRegister a reporter to receive status updates from Jasmine.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:765"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:954"
        },
        {
            "message": "Missing item type\nBlocks are functions with executable code that make up a spec.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:985"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1007"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1109"
        },
        {
            "message": "Missing item type\ntoBe: compares the actual to the expected using ===",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1186"
        },
        {
            "message": "Missing item type\ntoNotBe: compares the actual to the expected using !==",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1194"
        },
        {
            "message": "Missing item type\ntoEqual: compares the actual to the expected using common sense equality. Handles Objects, Arrays, etc.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1203"
        },
        {
            "message": "Missing item type\ntoNotEqual: compares the actual to the expected using the ! of jasmine.Matchers.toEqual",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1212"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to the expected using a regular expression.  Constructs a RegExp, so takes\na pattern or a String.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1221"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to the expected using the boolean inverse of jasmine.Matchers.toMatch",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1231"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to jasmine.undefined.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1240"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to jasmine.undefined.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1247"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to null.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1254"
        },
        {
            "message": "Missing item type\nMatcher that boolean not-nots the actual.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1261"
        },
        {
            "message": "Missing item type\nMatcher that boolean nots the actual.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1269"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was called.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1277"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1299"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was not called.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1302"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was called with a set of parameters.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1326"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1355"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1358"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is an element in the actual Array.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1375"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is NOT an element in the actual Array.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1384"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is equal to the actual item\nup to a given level of decimal precision (default 2).",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1402"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected exception was thrown by the actual.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1419"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1480"
        },
        {
            "message": "Missing item type\nHolds results for a set of Jasmine spec. Allows for the results array to hold another jasmine.NestedResults",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1515"
        },
        {
            "message": "Missing item type\nThe total count of results",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1521"
        },
        {
            "message": "Missing item type\nNumber of passed results",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1525"
        },
        {
            "message": "Missing item type\nNumber of failed results",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1529"
        },
        {
            "message": "Missing item type\nWas this suite/spec skipped?",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1533"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1537"
        },
        {
            "message": "Missing item type\nRoll up the result counts.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1543"
        },
        {
            "message": "Missing item type\nAdds a log message.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1554"
        },
        {
            "message": "Missing item type\nGetter for the results: message & results.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1562"
        },
        {
            "message": "Missing item type\nAdds a result, tracking counts (total, passed, & failed)",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1569"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1589"
        },
        {
            "message": "Missing item type\nBase class for pretty printing for expectation results.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1595"
        },
        {
            "message": "Missing item type\nFormats a value in a nice, human-readable string.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1602"
        },
        {
            "message": "Missing item type\nRunner",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1817"
        },
        {
            "message": "Missing item type\nInternal representation of a Jasmine specification, or test.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1894"
        },
        {
            "message": "Missing item type\nAll parameters are pretty-printed and concatenated together, then written to the spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1933"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1956"
        },
        {
            "message": "Missing item type\nWaits a fixed time period before moving to the next block.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1969"
        },
        {
            "message": "Missing item type\nWaits for the latchFunction to return true before proceeding to the next block.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:1981"
        },
        {
            "message": "Missing item type\nInternal representation of a Jasmine suite.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:2137"
        },
        {
            "message": "Missing item type\nA block which waits for some condition to become true, with timeout.",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:2234"
        },
        {
            "message": "Missing item type",
            "line": " src/components/dustjs-linkedin-helpers/test/jasmine-test/client/lib/jasmine-1.1.0/jasmine.js:2375"
        },
        {
            "message": "Missing item type\nTop level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:3"
        },
        {
            "message": "Missing item type",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:10"
        },
        {
            "message": "Missing item type\nUse <code>jasmine.undefined</code> instead of <code>undefined</code>, since <code>undefined</code> is just\na plain old variable and may be redefined by somebody else.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:17"
        },
        {
            "message": "Missing item type\nShow diagnostic messages in the console if set to true",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:25"
        },
        {
            "message": "Missing item type\nDefault interval in milliseconds for event loop yields (e.g. to allow network activity or to refresh the screen with the HTML-based runner). Small values here may result in slow test running. Zero means no updates until all tests have completed.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:31"
        },
        {
            "message": "Missing item type\nDefault timeout interval in milliseconds for waitsFor() blocks.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:37"
        },
        {
            "message": "Missing item type\nAllows for bound functions to be compared.  Internal use only.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:50"
        },
        {
            "message": "Missing item type\nGetter for the Jasmine environment. Ensures one gets created",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:114"
        },
        {
            "message": "Missing item type",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:122"
        },
        {
            "message": "Missing item type",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:132"
        },
        {
            "message": "Missing item type",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:142"
        },
        {
            "message": "Missing item type",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:152"
        },
        {
            "message": "Missing item type\nPretty printer for expecations.  Takes any object and turns it into a human-readable string.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:163"
        },
        {
            "message": "Missing item type\nReturns true if the object is a DOM Node.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:175"
        },
        {
            "message": "Missing item type\nReturns a matchable 'generic' object of the class type.  For use in expecations of type when values don't matter.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:185"
        },
        {
            "message": "Missing item type\nJasmine Spies are test doubles that can act as stubs, spies, fakes or when used in an expecation, mocks.\n\nSpies should be created in test setup, before expectations.  They can then be checked, using the standard Jasmine\nexpectation syntax. Spies can be checked if they were called or not and what the calling params were.\n\nA Spy has the following fields: wasCalled, callCount, mostRecentCall, and argsForCall (see docs).\n\nSpies are torn down at the end of every spec.\n\nNote: Do <b>not</b> call new jasmine.Spy() directly - a spy must be created using spyOn, jasmine.createSpy or jasmine.createSpyObj.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:199"
        },
        {
            "message": "Missing item type\nThe name of the spy, if provided.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:244"
        },
        {
            "message": "Missing item type\nIs this Object a spy?",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:248"
        },
        {
            "message": "Missing item type\nThe actual function this spy stubs.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:252"
        },
        {
            "message": "Missing item type\nTracking of the most recent call to the spy.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:257"
        },
        {
            "message": "Missing item type\nHolds arguments for each call to the spy, indexed by call count",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:266"
        },
        {
            "message": "Missing item type\nTells a spy to call through to the actual implemenatation.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:280"
        },
        {
            "message": "Missing item type\nFor setting the return value of a spy.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:296"
        },
        {
            "message": "Missing item type\nFor throwing an exception when a spy is called.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:315"
        },
        {
            "message": "Missing item type\nCalls an alternate implementation when a spy is called.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:334"
        },
        {
            "message": "Missing item type\nResets all of a spy's the tracking variables so that it can be used again.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:354"
        },
        {
            "message": "Missing item type\nDetermines whether an object is a spy.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:400"
        },
        {
            "message": "Missing item type\nCreates a more complicated spy: an Object that has every property a function that is a spy.  Used for stubbing something\nlarge in one call.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:410"
        },
        {
            "message": "Missing item type\nAll parameters are pretty-printed and concatenated together, then written to the current spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:428"
        },
        {
            "message": "Missing item type\nFunction that installs a spy on an existing object's method name.  Used within a Spec to create a spy.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:438"
        },
        {
            "message": "Missing item type\nCreates a Jasmine spec that will be added to the current suite.\n\n// TODO: pending tests",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:458"
        },
        {
            "message": "Missing item type\nCreates a <em>disabled</em> Jasmine spec.\n\nA convenience method that allows existing specs to be disabled temporarily during development.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:476"
        },
        {
            "message": "Missing item type\nStarts a chain for a Jasmine expectation.\n\nIt is passed an Object that is the actual value and should chain to one of the many\njasmine.Matchers functions.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:489"
        },
        {
            "message": "Missing item type\nDefines part of a jasmine spec.  Used in cominbination with waits or waitsFor in asynchrnous specs.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:502"
        },
        {
            "message": "Missing item type\nWaits a fixed time period before moving to the next block.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:512"
        },
        {
            "message": "Missing item type\nWaits for the latchFunction to return true before proceeding to the next block.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:523"
        },
        {
            "message": "Missing item type\nA function that is called before each spec in a suite.\n\nUsed for spec setup, including validating assumptions.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:535"
        },
        {
            "message": "Missing item type\nA function that is called after each spec in a suite.\n\nUsed for restoring any state that is hijacked during spec execution.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:547"
        },
        {
            "message": "Missing item type\nDefines a suite of specifications.\n\nStores the description and all defined specs in the Jasmine environment as one suite of specs. Variables declared\nare accessible by calls to beforeEach, it, and afterEach. Describe blocks can be nested, allowing for specialization\nof setup in some tests.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:559"
        },
        {
            "message": "Missing item type\nDisables a suite of specifications.  Used to disable some suites in a file, or files, temporarily during development.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:579"
        },
        {
            "message": "Missing item type",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:618"
        },
        {
            "message": "Missing item type\nDeclare that a child class inherit it's prototype from the parent class.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:623"
        },
        {
            "message": "Missing item type",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:631"
        },
        {
            "message": "Missing item type\nEnvironment for Jasmine",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:685"
        },
        {
            "message": "Missing item type",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:723"
        },
        {
            "message": "Missing item type",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:734"
        },
        {
            "message": "Missing item type",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:751"
        },
        {
            "message": "Missing item type",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:758"
        },
        {
            "message": "Missing item type\nRegister a reporter to receive status updates from Jasmine.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:765"
        },
        {
            "message": "Missing item type",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:954"
        },
        {
            "message": "Missing item type\nBlocks are functions with executable code that make up a spec.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:985"
        },
        {
            "message": "Missing item type",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1007"
        },
        {
            "message": "Missing item type",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1109"
        },
        {
            "message": "Missing item type\ntoBe: compares the actual to the expected using ===",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1186"
        },
        {
            "message": "Missing item type\ntoNotBe: compares the actual to the expected using !==",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1194"
        },
        {
            "message": "Missing item type\ntoEqual: compares the actual to the expected using common sense equality. Handles Objects, Arrays, etc.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1203"
        },
        {
            "message": "Missing item type\ntoNotEqual: compares the actual to the expected using the ! of jasmine.Matchers.toEqual",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1212"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to the expected using a regular expression.  Constructs a RegExp, so takes\na pattern or a String.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1221"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to the expected using the boolean inverse of jasmine.Matchers.toMatch",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1231"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to jasmine.undefined.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1240"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to jasmine.undefined.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1247"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to null.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1254"
        },
        {
            "message": "Missing item type\nMatcher that boolean not-nots the actual.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1261"
        },
        {
            "message": "Missing item type\nMatcher that boolean nots the actual.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1269"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was called.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1277"
        },
        {
            "message": "Missing item type",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1299"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was not called.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1302"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was called with a set of parameters.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1326"
        },
        {
            "message": "Missing item type",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1355"
        },
        {
            "message": "Missing item type",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1358"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is an element in the actual Array.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1375"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is NOT an element in the actual Array.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1384"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is equal to the actual item\nup to a given level of decimal precision (default 2).",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1402"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected exception was thrown by the actual.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1419"
        },
        {
            "message": "Missing item type",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1480"
        },
        {
            "message": "Missing item type\nHolds results for a set of Jasmine spec. Allows for the results array to hold another jasmine.NestedResults",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1515"
        },
        {
            "message": "Missing item type\nThe total count of results",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1521"
        },
        {
            "message": "Missing item type\nNumber of passed results",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1525"
        },
        {
            "message": "Missing item type\nNumber of failed results",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1529"
        },
        {
            "message": "Missing item type\nWas this suite/spec skipped?",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1533"
        },
        {
            "message": "Missing item type",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1537"
        },
        {
            "message": "Missing item type\nRoll up the result counts.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1543"
        },
        {
            "message": "Missing item type\nAdds a log message.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1554"
        },
        {
            "message": "Missing item type\nGetter for the results: message & results.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1562"
        },
        {
            "message": "Missing item type\nAdds a result, tracking counts (total, passed, & failed)",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1569"
        },
        {
            "message": "Missing item type",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1589"
        },
        {
            "message": "Missing item type\nBase class for pretty printing for expectation results.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1595"
        },
        {
            "message": "Missing item type\nFormats a value in a nice, human-readable string.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1602"
        },
        {
            "message": "Missing item type\nRunner",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1817"
        },
        {
            "message": "Missing item type\nInternal representation of a Jasmine specification, or test.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1894"
        },
        {
            "message": "Missing item type\nAll parameters are pretty-printed and concatenated together, then written to the spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1933"
        },
        {
            "message": "Missing item type",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1956"
        },
        {
            "message": "Missing item type\nWaits a fixed time period before moving to the next block.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1969"
        },
        {
            "message": "Missing item type\nWaits for the latchFunction to return true before proceeding to the next block.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:1981"
        },
        {
            "message": "Missing item type\nInternal representation of a Jasmine suite.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:2137"
        },
        {
            "message": "Missing item type\nA block which waits for some condition to become true, with timeout.",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:2234"
        },
        {
            "message": "Missing item type",
            "line": " src/components/es5-shim/tests/lib/jasmine.js:2375"
        },
        {
            "message": "Missing item type\nBrings an environment as close to ECMAScript 5 compliance\nas is possible with the facilities of erstwhile engines.\n\nAnnotated ES5: http://es5.github.com/ (specific links below)\nES5 Spec: http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf\nRequired reading: http://javascriptweblog.wordpress.com/2011/12/05/extending-javascript-natives/",
            "line": " src/components/es5-shim/es5-shim.js:18"
        },
        {
            "message": "Missing item type\nGet the substring of a string",
            "line": " src/components/es5-shim/es5-shim.js:1217"
        },
        {
            "message": "Missing item type\nHammer\nuse this to create instances",
            "line": " src/components/hammerjs/dist/hammer.js:10"
        },
        {
            "message": "Missing item type\nsetup events to detect gestures on the document",
            "line": " src/components/hammerjs/dist/hammer.js:80"
        },
        {
            "message": "Missing item type\ncreate new hammer instance\nall methods should return the instance itself, so it is chainable.",
            "line": " src/components/hammerjs/dist/hammer.js:106"
        },
        {
            "message": "Missing item type\nbind events to the instance",
            "line": " src/components/hammerjs/dist/hammer.js:149"
        },
        {
            "message": "Missing item type\nunbind events to the instance",
            "line": " src/components/hammerjs/dist/hammer.js:164"
        },
        {
            "message": "Missing item type\ntrigger gesture event",
            "line": " src/components/hammerjs/dist/hammer.js:179"
        },
        {
            "message": "Missing item type\nenable of disable hammer.js detection",
            "line": " src/components/hammerjs/dist/hammer.js:203"
        },
        {
            "message": "Missing item type\nthis holds the last move event,\nused to fix empty touchend issue\nsee the onTouch event for an explanation",
            "line": " src/components/hammerjs/dist/hammer.js:214"
        },
        {
            "message": "Missing item type\nwhen the mouse is hold down, this is true",
            "line": " src/components/hammerjs/dist/hammer.js:223"
        },
        {
            "message": "Missing item type\nwhen touch events have been fired, this is true",
            "line": " src/components/hammerjs/dist/hammer.js:230"
        },
        {
            "message": "Missing item type\nsimple addEventListener",
            "line": " src/components/hammerjs/dist/hammer.js:238"
        },
        {
            "message": "Missing item type\ntouch events with mouse fallback",
            "line": " src/components/hammerjs/dist/hammer.js:252"
        },
        {
            "message": "Missing item type\nwe have different events for each device/browser\ndetermine what we need and set them in the Hammer.EVENT_TYPES constant",
            "line": " src/components/hammerjs/dist/hammer.js:345"
        },
        {
            "message": "Missing item type\ncreate touchlist depending on the event",
            "line": " src/components/hammerjs/dist/hammer.js:379"
        },
        {
            "message": "Missing item type\ncollect event data for Hammer js",
            "line": " src/components/hammerjs/dist/hammer.js:405"
        },
        {
            "message": "Missing item type\nprevent the browser default actions\nmostly used to disable scrolling of the browser",
            "line": " src/components/hammerjs/dist/hammer.js:429"
        },
        {
            "message": "Missing item type\nstop bubbling the event up to its parents",
            "line": " src/components/hammerjs/dist/hammer.js:443"
        },
        {
            "message": "Missing item type\nimmediately stop gesture detection\nmight be useful after a swipe was detected",
            "line": " src/components/hammerjs/dist/hammer.js:450"
        },
        {
            "message": "Missing item type\nholds all pointers",
            "line": " src/components/hammerjs/dist/hammer.js:463"
        },
        {
            "message": "Missing item type\nget a list of pointers",
            "line": " src/components/hammerjs/dist/hammer.js:469"
        },
        {
            "message": "Missing item type\nupdate the position of a pointer",
            "line": " src/components/hammerjs/dist/hammer.js:484"
        },
        {
            "message": "Missing item type\ncheck if ev matches pointertype",
            "line": " src/components/hammerjs/dist/hammer.js:501"
        },
        {
            "message": "Missing item type\nget events",
            "line": " src/components/hammerjs/dist/hammer.js:519"
        },
        {
            "message": "Missing item type\nreset the list",
            "line": " src/components/hammerjs/dist/hammer.js:530"
        },
        {
            "message": "Missing item type\nextend method,\nalso used for cloning when dest is an empty object",
            "line": " src/components/hammerjs/dist/hammer.js:540"
        },
        {
            "message": "Missing item type\nfind if a node is in the given parent\nused for event delegation tricks",
            "line": " src/components/hammerjs/dist/hammer.js:559"
        },
        {
            "message": "Missing item type\nget the center of all the touches",
            "line": " src/components/hammerjs/dist/hammer.js:577"
        },
        {
            "message": "Missing item type\ncalculate the velocity between two points",
            "line": " src/components/hammerjs/dist/hammer.js:597"
        },
        {
            "message": "Missing item type\ncalculate the angle between two coordinates",
            "line": " src/components/hammerjs/dist/hammer.js:612"
        },
        {
            "message": "Missing item type\nangle to direction define",
            "line": " src/components/hammerjs/dist/hammer.js:625"
        },
        {
            "message": "Missing item type\ncalculate the distance between two touches",
            "line": " src/components/hammerjs/dist/hammer.js:644"
        },
        {
            "message": "Missing item type\ncalculate the scale factor between two touchLists (fingers)\nno scale is 1, and goes down to 0 when pinched together, and bigger when pinched out",
            "line": " src/components/hammerjs/dist/hammer.js:657"
        },
        {
            "message": "Missing item type\ncalculate the rotation degrees between two touchLists (fingers)",
            "line": " src/components/hammerjs/dist/hammer.js:674"
        },
        {
            "message": "Missing item type\nboolean if the direction is vertical",
            "line": " src/components/hammerjs/dist/hammer.js:690"
        },
        {
            "message": "Missing item type\nstop browser default behavior with css props",
            "line": " src/components/hammerjs/dist/hammer.js:700"
        },
        {
            "message": "Missing item type\nstart Hammer.gesture detection",
            "line": " src/components/hammerjs/dist/hammer.js:754"
        },
        {
            "message": "Missing item type\nHammer.gesture detection",
            "line": " src/components/hammerjs/dist/hammer.js:778"
        },
        {
            "message": "Missing item type\nclear the Hammer.gesture vars\nthis is called on endDetect, but can also be used when a final Hammer.gesture has been detected\nto stop other Hammer.gestures from being fired",
            "line": " src/components/hammerjs/dist/hammer.js:822"
        },
        {
            "message": "Missing item type\nextend eventData for Hammer.gestures",
            "line": " src/components/hammerjs/dist/hammer.js:840"
        },
        {
            "message": "Missing item type\nregister new gesture",
            "line": " src/components/hammerjs/dist/hammer.js:888"
        },
        {
            "message": "Missing item type\nCustom gestures\n==============================\n\nGesture object\n--------------------\nThe object structure of a gesture:\n\n{ name: 'mygesture',\n  index: 1337,\n  defaults: {\n    mygesture_option: true\n  }\n  handler: function(type, ev, inst) {\n    // trigger gesture event\n    inst.trigger(this.name, ev);\n  }\n}",
            "line": " src/components/hammerjs/dist/hammer.js:927"
        },
        {
            "message": "Missing item type\nHold\nTouch stays at the same place for x time",
            "line": " src/components/hammerjs/dist/hammer.js:1034"
        },
        {
            "message": "Missing item type\nTap/DoubleTap\nQuick touch at a place or double at the same place",
            "line": " src/components/hammerjs/dist/hammer.js:1080"
        },
        {
            "message": "Missing item type\nSwipe\ntriggers swipe events when the end velocity is above the threshold",
            "line": " src/components/hammerjs/dist/hammer.js:1126"
        },
        {
            "message": "Missing item type\nDrag\nMove with x fingers (default 1) around on the page. Blocking the scrolling when\nmoving left and right is a good practice. When all the drag events are blocking\nyou disable scrolling on that area.",
            "line": " src/components/hammerjs/dist/hammer.js:1160"
        },
        {
            "message": "Missing item type\nTransform\nUser want to scale or rotate with 2 fingers",
            "line": " src/components/hammerjs/dist/hammer.js:1265"
        },
        {
            "message": "Missing item type\nTouch\nCalled as first, tells the user has touched the screen",
            "line": " src/components/hammerjs/dist/hammer.js:1355"
        },
        {
            "message": "Missing item type\nRelease\nCalled as last, tells the user has released the screen",
            "line": " src/components/hammerjs/dist/hammer.js:1391"
        },
        {
            "message": "Missing item type\nHammer\nuse this to create instances",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:10"
        },
        {
            "message": "Missing item type\nsetup events to detect gestures on the document",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:80"
        },
        {
            "message": "Missing item type\ncreate new hammer instance\nall methods should return the instance itself, so it is chainable.",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:106"
        },
        {
            "message": "Missing item type\nbind events to the instance",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:149"
        },
        {
            "message": "Missing item type\nunbind events to the instance",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:164"
        },
        {
            "message": "Missing item type\ntrigger gesture event",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:179"
        },
        {
            "message": "Missing item type\nenable of disable hammer.js detection",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:203"
        },
        {
            "message": "Missing item type\nthis holds the last move event,\nused to fix empty touchend issue\nsee the onTouch event for an explanation",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:214"
        },
        {
            "message": "Missing item type\nwhen the mouse is hold down, this is true",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:223"
        },
        {
            "message": "Missing item type\nwhen touch events have been fired, this is true",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:230"
        },
        {
            "message": "Missing item type\nsimple addEventListener",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:238"
        },
        {
            "message": "Missing item type\ntouch events with mouse fallback",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:252"
        },
        {
            "message": "Missing item type\nwe have different events for each device/browser\ndetermine what we need and set them in the Hammer.EVENT_TYPES constant",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:345"
        },
        {
            "message": "Missing item type\ncreate touchlist depending on the event",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:379"
        },
        {
            "message": "Missing item type\ncollect event data for Hammer js",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:405"
        },
        {
            "message": "Missing item type\nprevent the browser default actions\nmostly used to disable scrolling of the browser",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:429"
        },
        {
            "message": "Missing item type\nstop bubbling the event up to its parents",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:443"
        },
        {
            "message": "Missing item type\nimmediately stop gesture detection\nmight be useful after a swipe was detected",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:450"
        },
        {
            "message": "Missing item type\nholds all pointers",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:463"
        },
        {
            "message": "Missing item type\nget a list of pointers",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:469"
        },
        {
            "message": "Missing item type\nupdate the position of a pointer",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:484"
        },
        {
            "message": "Missing item type\ncheck if ev matches pointertype",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:501"
        },
        {
            "message": "Missing item type\nget events",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:519"
        },
        {
            "message": "Missing item type\nreset the list",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:530"
        },
        {
            "message": "Missing item type\nextend method,\nalso used for cloning when dest is an empty object",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:540"
        },
        {
            "message": "Missing item type\nfind if a node is in the given parent\nused for event delegation tricks",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:559"
        },
        {
            "message": "Missing item type\nget the center of all the touches",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:577"
        },
        {
            "message": "Missing item type\ncalculate the velocity between two points",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:597"
        },
        {
            "message": "Missing item type\ncalculate the angle between two coordinates",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:612"
        },
        {
            "message": "Missing item type\nangle to direction define",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:625"
        },
        {
            "message": "Missing item type\ncalculate the distance between two touches",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:644"
        },
        {
            "message": "Missing item type\ncalculate the scale factor between two touchLists (fingers)\nno scale is 1, and goes down to 0 when pinched together, and bigger when pinched out",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:657"
        },
        {
            "message": "Missing item type\ncalculate the rotation degrees between two touchLists (fingers)",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:674"
        },
        {
            "message": "Missing item type\nboolean if the direction is vertical",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:690"
        },
        {
            "message": "Missing item type\nstop browser default behavior with css props",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:700"
        },
        {
            "message": "Missing item type\nstart Hammer.gesture detection",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:754"
        },
        {
            "message": "Missing item type\nHammer.gesture detection",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:778"
        },
        {
            "message": "Missing item type\nclear the Hammer.gesture vars\nthis is called on endDetect, but can also be used when a final Hammer.gesture has been detected\nto stop other Hammer.gestures from being fired",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:822"
        },
        {
            "message": "Missing item type\nextend eventData for Hammer.gestures",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:840"
        },
        {
            "message": "Missing item type\nregister new gesture",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:888"
        },
        {
            "message": "Missing item type\nCustom gestures\n==============================\n\nGesture object\n--------------------\nThe object structure of a gesture:\n\n{ name: 'mygesture',\n  index: 1337,\n  defaults: {\n    mygesture_option: true\n  }\n  handler: function(type, ev, inst) {\n    // trigger gesture event\n    inst.trigger(this.name, ev);\n  }\n}",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:927"
        },
        {
            "message": "Missing item type\nHold\nTouch stays at the same place for x time",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:1034"
        },
        {
            "message": "Missing item type\nTap/DoubleTap\nQuick touch at a place or double at the same place",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:1080"
        },
        {
            "message": "Missing item type\nSwipe\ntriggers swipe events when the end velocity is above the threshold",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:1126"
        },
        {
            "message": "Missing item type\nDrag\nMove with x fingers (default 1) around on the page. Blocking the scrolling when\nmoving left and right is a good practice. When all the drag events are blocking\nyou disable scrolling on that area.",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:1160"
        },
        {
            "message": "Missing item type\nTransform\nUser want to scale or rotate with 2 fingers",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:1265"
        },
        {
            "message": "Missing item type\nTouch\nCalled as first, tells the user has touched the screen",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:1355"
        },
        {
            "message": "Missing item type\nRelease\nCalled as last, tells the user has released the screen",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:1391"
        },
        {
            "message": "Missing item type\nbind dom events\nthis overwrites addEventListener",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:1431"
        },
        {
            "message": "Missing item type\nthe methods are called by the instance, but with the jquery plugin\nwe use the jquery event methods instead.",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:1472"
        },
        {
            "message": "Missing item type\ntrigger events\nthis is called by the gestures to trigger an event like 'tap'",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:1486"
        },
        {
            "message": "Missing item type\njQuery plugin\ncreate instance of Hammer and watch for gestures,\nand when called again you can change the options",
            "line": " src/components/hammerjs/dist/jquery.hammer.js:1507"
        },
        {
            "message": "Missing item type\nenable multitouch on the desktop by pressing the shiftkey\nthe other touch goes in the opposite direction so the center keeps at its place\nit's recommended to enable Hammer.debug.showTouches for this one",
            "line": " src/components/hammerjs/plugins/hammer.fakemultitouch.js:2"
        },
        {
            "message": "Missing item type\noverwrites Hammer.event.getTouchList.",
            "line": " src/components/hammerjs/plugins/hammer.fakemultitouch.js:15"
        },
        {
            "message": "Missing item type\nShowTouches gesture\nrequires jQuery\nshow all touch on the screen by placing elements at there pageX and pageY",
            "line": " src/components/hammerjs/plugins/hammer.showtouches.js:2"
        },
        {
            "message": "Missing item type\nremove unused touch elements",
            "line": " src/components/hammerjs/plugins/hammer.showtouches.js:18"
        },
        {
            "message": "Missing item type\nbind dom events\nthis overwrites addEventListener",
            "line": " src/components/hammerjs/plugins/jquery.hammer.js:9"
        },
        {
            "message": "Missing item type\nthe methods are called by the instance, but with the jquery plugin\nwe use the jquery event methods instead.",
            "line": " src/components/hammerjs/plugins/jquery.hammer.js:50"
        },
        {
            "message": "Missing item type\ntrigger events\nthis is called by the gestures to trigger an event like 'tap'",
            "line": " src/components/hammerjs/plugins/jquery.hammer.js:64"
        },
        {
            "message": "Missing item type\njQuery plugin\ncreate instance of Hammer and watch for gestures,\nand when called again you can change the options",
            "line": " src/components/hammerjs/plugins/jquery.hammer.js:85"
        },
        {
            "message": "Missing item type\nHammer\nuse this to create instances",
            "line": " src/components/hammerjs/src/core.js:1"
        },
        {
            "message": "Missing item type\nstart Hammer.gesture detection",
            "line": " src/components/hammerjs/src/detection.js:16"
        },
        {
            "message": "Missing item type\nHammer.gesture detection",
            "line": " src/components/hammerjs/src/detection.js:40"
        },
        {
            "message": "Missing item type\nclear the Hammer.gesture vars\nthis is called on endDetect, but can also be used when a final Hammer.gesture has been detected\nto stop other Hammer.gestures from being fired",
            "line": " src/components/hammerjs/src/detection.js:84"
        },
        {
            "message": "Missing item type\nextend eventData for Hammer.gestures",
            "line": " src/components/hammerjs/src/detection.js:102"
        },
        {
            "message": "Missing item type\nregister new gesture",
            "line": " src/components/hammerjs/src/detection.js:150"
        },
        {
            "message": "Missing item type\nthis holds the last move event,\nused to fix empty touchend issue\nsee the onTouch event for an explanation",
            "line": " src/components/hammerjs/src/event.js:1"
        },
        {
            "message": "Missing item type\nwhen the mouse is hold down, this is true",
            "line": " src/components/hammerjs/src/event.js:10"
        },
        {
            "message": "Missing item type\nwhen touch events have been fired, this is true",
            "line": " src/components/hammerjs/src/event.js:17"
        },
        {
            "message": "Missing item type\nsimple addEventListener",
            "line": " src/components/hammerjs/src/event.js:25"
        },
        {
            "message": "Missing item type\ntouch events with mouse fallback",
            "line": " src/components/hammerjs/src/event.js:39"
        },
        {
            "message": "Missing item type\nwe have different events for each device/browser\ndetermine what we need and set them in the Hammer.EVENT_TYPES constant",
            "line": " src/components/hammerjs/src/event.js:132"
        },
        {
            "message": "Missing item type\ncreate touchlist depending on the event",
            "line": " src/components/hammerjs/src/event.js:166"
        },
        {
            "message": "Missing item type\ncollect event data for Hammer js",
            "line": " src/components/hammerjs/src/event.js:192"
        },
        {
            "message": "Missing item type\nprevent the browser default actions\nmostly used to disable scrolling of the browser",
            "line": " src/components/hammerjs/src/event.js:216"
        },
        {
            "message": "Missing item type\nstop bubbling the event up to its parents",
            "line": " src/components/hammerjs/src/event.js:230"
        },
        {
            "message": "Missing item type\nimmediately stop gesture detection\nmight be useful after a swipe was detected",
            "line": " src/components/hammerjs/src/event.js:237"
        },
        {
            "message": "Missing item type\nCustom gestures\n==============================\n\nGesture object\n--------------------\nThe object structure of a gesture:\n\n{ name: 'mygesture',\n  index: 1337,\n  defaults: {\n    mygesture_option: true\n  }\n  handler: function(type, ev, inst) {\n    // trigger gesture event\n    inst.trigger(this.name, ev);\n  }\n}",
            "line": " src/components/hammerjs/src/gestures.js:3"
        },
        {
            "message": "Missing item type\nHold\nTouch stays at the same place for x time",
            "line": " src/components/hammerjs/src/gestures.js:110"
        },
        {
            "message": "Missing item type\nTap/DoubleTap\nQuick touch at a place or double at the same place",
            "line": " src/components/hammerjs/src/gestures.js:156"
        },
        {
            "message": "Missing item type\nSwipe\ntriggers swipe events when the end velocity is above the threshold",
            "line": " src/components/hammerjs/src/gestures.js:202"
        },
        {
            "message": "Missing item type\nDrag\nMove with x fingers (default 1) around on the page. Blocking the scrolling when\nmoving left and right is a good practice. When all the drag events are blocking\nyou disable scrolling on that area.",
            "line": " src/components/hammerjs/src/gestures.js:236"
        },
        {
            "message": "Missing item type\nTransform\nUser want to scale or rotate with 2 fingers",
            "line": " src/components/hammerjs/src/gestures.js:341"
        },
        {
            "message": "Missing item type\nTouch\nCalled as first, tells the user has touched the screen",
            "line": " src/components/hammerjs/src/gestures.js:431"
        },
        {
            "message": "Missing item type\nRelease\nCalled as last, tells the user has released the screen",
            "line": " src/components/hammerjs/src/gestures.js:467"
        },
        {
            "message": "Missing item type\ncreate new hammer instance\nall methods should return the instance itself, so it is chainable.",
            "line": " src/components/hammerjs/src/instance.js:1"
        },
        {
            "message": "Missing item type\nbind events to the instance",
            "line": " src/components/hammerjs/src/instance.js:44"
        },
        {
            "message": "Missing item type\nunbind events to the instance",
            "line": " src/components/hammerjs/src/instance.js:59"
        },
        {
            "message": "Missing item type\ntrigger gesture event",
            "line": " src/components/hammerjs/src/instance.js:74"
        },
        {
            "message": "Missing item type\nenable of disable hammer.js detection",
            "line": " src/components/hammerjs/src/instance.js:98"
        },
        {
            "message": "Missing item type\nholds all pointers",
            "line": " src/components/hammerjs/src/pointerevent.js:2"
        },
        {
            "message": "Missing item type\nget a list of pointers",
            "line": " src/components/hammerjs/src/pointerevent.js:8"
        },
        {
            "message": "Missing item type\nupdate the position of a pointer",
            "line": " src/components/hammerjs/src/pointerevent.js:23"
        },
        {
            "message": "Missing item type\ncheck if ev matches pointertype",
            "line": " src/components/hammerjs/src/pointerevent.js:40"
        },
        {
            "message": "Missing item type\nget events",
            "line": " src/components/hammerjs/src/pointerevent.js:58"
        },
        {
            "message": "Missing item type\nreset the list",
            "line": " src/components/hammerjs/src/pointerevent.js:69"
        },
        {
            "message": "Missing item type\nsetup events to detect gestures on the document",
            "line": " src/components/hammerjs/src/setup.js:4"
        },
        {
            "message": "Missing item type\nextend method,\nalso used for cloning when dest is an empty object",
            "line": " src/components/hammerjs/src/utils.js:2"
        },
        {
            "message": "Missing item type\nfind if a node is in the given parent\nused for event delegation tricks",
            "line": " src/components/hammerjs/src/utils.js:21"
        },
        {
            "message": "Missing item type\nget the center of all the touches",
            "line": " src/components/hammerjs/src/utils.js:39"
        },
        {
            "message": "Missing item type\ncalculate the velocity between two points",
            "line": " src/components/hammerjs/src/utils.js:59"
        },
        {
            "message": "Missing item type\ncalculate the angle between two coordinates",
            "line": " src/components/hammerjs/src/utils.js:74"
        },
        {
            "message": "Missing item type\nangle to direction define",
            "line": " src/components/hammerjs/src/utils.js:87"
        },
        {
            "message": "Missing item type\ncalculate the distance between two touches",
            "line": " src/components/hammerjs/src/utils.js:106"
        },
        {
            "message": "Missing item type\ncalculate the scale factor between two touchLists (fingers)\nno scale is 1, and goes down to 0 when pinched together, and bigger when pinched out",
            "line": " src/components/hammerjs/src/utils.js:119"
        },
        {
            "message": "Missing item type\ncalculate the rotation degrees between two touchLists (fingers)",
            "line": " src/components/hammerjs/src/utils.js:136"
        },
        {
            "message": "Missing item type\nboolean if the direction is vertical",
            "line": " src/components/hammerjs/src/utils.js:152"
        },
        {
            "message": "Missing item type\nstop browser default behavior with css props",
            "line": " src/components/hammerjs/src/utils.js:162"
        },
        {
            "message": "Missing item type\nQUnit v1.4.0 - A JavaScript Unit Testing Framework\n\nhttp://docs.jquery.com/QUnit\n\nCopyright (c) 2012 John Resig, Jörn Zaefferer\nDual licensed under the MIT (MIT-LICENSE.txt)\nor GPL (GPL-LICENSE.txt) licenses.",
            "line": " src/components/hammerjs/tests/libs/qunit.js:1"
        },
        {
            "message": "Missing item type\njsDump Copyright (c) 2008 Ariel Flesler - aflesler(at)gmail(dot)com |\nhttp://flesler.blogspot.com Licensed under BSD\n(http://www.opensource.org/licenses/bsd-license.php) Date: 5/15/2008",
            "line": " src/components/hammerjs/tests/libs/qunit.js:1267"
        },
        {
            "message": "Missing item type\ntest gestures",
            "line": " src/components/hammerjs/tests/gestures.js:30"
        },
        {
            "message": "Missing item type\ntest gestures",
            "line": " src/components/hammerjs/tests/gestures.js:65"
        },
        {
            "message": "Missing item type\ntest if event data contains wright values",
            "line": " src/components/hammerjs/tests/gestures.js:97"
        },
        {
            "message": "Missing item type\nextend objects with new params",
            "line": " src/components/hammerjs/tests/utils.js:1"
        },
        {
            "message": "Missing item type\ncloning with the extend util\ntest clone references",
            "line": " src/components/hammerjs/tests/utils.js:16"
        },
        {
            "message": "Missing item type\nSet up a mock AMD define function for testing AMD registration.",
            "line": " src/components/jquery/test/data/testinit.js:16"
        },
        {
            "message": "Missing item type\nReturns an array of elements with the given IDs",
            "line": " src/components/jquery/test/data/testinit.js:25"
        },
        {
            "message": "Missing item type\nAsserts that a select matches the given IDs",
            "line": " src/components/jquery/test/data/testinit.js:40"
        },
        {
            "message": "Missing item type\nAdd random number to url to stop caching",
            "line": " src/components/jquery/test/data/testinit.js:132"
        },
        {
            "message": "Missing item type\nAllow the test suite to run with other libs or jQuery's.",
            "line": " src/components/jquery/test/data/testrunner.js:1"
        },
        {
            "message": "Missing item type\nQUnit hooks",
            "line": " src/components/jquery/test/data/testrunner.js:167"
        },
        {
            "message": "Missing item type",
            "line": " src/components/jquery/test/data/testrunner.js:197"
        },
        {
            "message": "Missing item type\nEnsures that tests have cleaned up properly after themselves. Should be passed as the\nteardown function on all modules' lifecycle object.",
            "line": " src/components/jquery/test/data/testrunner.js:257"
        },
        {
            "message": "Missing item type\nQUnit configuration",
            "line": " src/components/jquery/test/data/testrunner.js:355"
        },
        {
            "message": "Missing item type\nLoad the TestSwarm listener if swarmURL is in the address.",
            "line": " src/components/jquery/test/data/testrunner.js:365"
        },
        {
            "message": "Missing item type",
            "line": " src/components/jquery/test/unit/core.js:986"
        },
        {
            "message": "Missing item type\nThis test page is for selector tests that require jQuery in order to do the selection",
            "line": " src/components/jquery/test/unit/selector.js:3"
        },
        {
            "message": "Missing item type\nReturns an array of elements with the given IDs\nq & t are added here for the iFrame's context",
            "line": " src/components/jquery/test/unit/selector.js:79"
        },
        {
            "message": "Missing item type\nAsserts that a select matches the given IDs",
            "line": " src/components/jquery/test/unit/selector.js:93"
        },
        {
            "message": "Missing item type",
            "line": " src/components/jquery/test/unit/serialize.js:90"
        },
        {
            "message": "Missing item type\nsizzle-jquery.js -> sizzle between \"EXPOSE\" blocks,\n\t\t\treplace define & window.Sizzle assignment\n\n// EXPOSE\n\t\t\tif ( typeof define === \"function\" && define.amd ) {\n\t\t\t\tdefine(function() { return Sizzle; });\n\t\t\t} else {\n\t\t\t\twindow.Sizzle = Sizzle;\n\t\t\t}\n\t\t\t// EXPOSE\nBecomes...\nSizzle.attr = jQuery.attr;\n\t\t\tjQuery.find = Sizzle;\n\t\t\tjQuery.expr = Sizzle.selectors;\n\t\t\tjQuery.expr[\":\"] = jQuery.expr.pseudos;\n\t\t\tjQuery.unique = Sizzle.uniqueSort;\n\t\t\tjQuery.text = Sizzle.getText;\n\t\t\tjQuery.isXMLDoc = Sizzle.isXML;\n\t\t\tjQuery.contains = Sizzle.contains;",
            "line": " src/components/jquery/Gruntfile.js:220"
        },
        {
            "message": "Missing item type\nCreate key-value caches of limited size",
            "line": " src/components/jquery/jquery.js:1157"
        },
        {
            "message": "Missing item type\nMark a function for special use by Sizzle",
            "line": " src/components/jquery/jquery.js:1177"
        },
        {
            "message": "Missing item type\nSupport testing using an element",
            "line": " src/components/jquery/jquery.js:1186"
        },
        {
            "message": "Missing item type\nAdds the same handler for all of the specified attrs",
            "line": " src/components/jquery/jquery.js:1207"
        },
        {
            "message": "Missing item type\nChecks document order of two siblings",
            "line": " src/components/jquery/jquery.js:1221"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for input types",
            "line": " src/components/jquery/jquery.js:1250"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for buttons",
            "line": " src/components/jquery/jquery.js:1261"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for positionals",
            "line": " src/components/jquery/jquery.js:1272"
        },
        {
            "message": "Missing item type\nDetect xml",
            "line": " src/components/jquery/jquery.js:1294"
        },
        {
            "message": "Missing item type\nSets document-related variables once based on the current document",
            "line": " src/components/jquery/jquery.js:1308"
        },
        {
            "message": "Missing item type\nDocument sorting and removing duplicates",
            "line": " src/components/jquery/jquery.js:1718"
        },
        {
            "message": "Missing item type\nUtility function for retrieving the text value of an array of DOM nodes",
            "line": " src/components/jquery/jquery.js:1747"
        },
        {
            "message": "Missing item type\nAppends an array to the end of another.\nThe first array will be modified.",
            "line": " src/components/mout/src/array/append.js:3"
        },
        {
            "message": "Missing item type\nMaps the items in the array and concatenates the result arrays.",
            "line": " src/components/mout/src/array/collect.js:3"
        },
        {
            "message": "Missing item type\nCombines an array with all the items of another.\nDoes not allow duplicates and is case and type sensitive.",
            "line": " src/components/mout/src/array/combine.js:3"
        },
        {
            "message": "Missing item type\nRemove all null/undefined items from array.",
            "line": " src/components/mout/src/array/compact.js:3"
        },
        {
            "message": "Missing item type\nIf array contains values.",
            "line": " src/components/mout/src/array/contains.js:3"
        },
        {
            "message": "Missing item type\nReturn a new Array with elements that aren't present in the other Arrays.",
            "line": " src/components/mout/src/array/difference.js:4"
        },
        {
            "message": "Missing item type\nArray every",
            "line": " src/components/mout/src/array/every.js:3"
        },
        {
            "message": "Missing item type\nArray filter",
            "line": " src/components/mout/src/array/filter.js:3"
        },
        {
            "message": "Missing item type\nReturns first item that matches criteria",
            "line": " src/components/mout/src/array/find.js:3"
        },
        {
            "message": "Missing item type\nReturns the index of the first item that matches criteria",
            "line": " src/components/mout/src/array/findIndex.js:3"
        },
        {
            "message": "Missing item type\nRecursively flattens an array.\nA new array containing all the elements is returned.\nIf `shallow` is true, it will only flatten one level.",
            "line": " src/components/mout/src/array/flatten.js:29"
        },
        {
            "message": "Missing item type\nArray forEach",
            "line": " src/components/mout/src/array/forEach.js:3"
        },
        {
            "message": "Missing item type\nArray.indexOf",
            "line": " src/components/mout/src/array/indexOf.js:3"
        },
        {
            "message": "Missing item type\nInsert item into array if not already present.",
            "line": " src/components/mout/src/array/insert.js:3"
        },
        {
            "message": "Missing item type\nReturn a new Array with elements common to all Arrays.\n- based on underscore.js implementation",
            "line": " src/components/mout/src/array/intersection.js:4"
        },
        {
            "message": "Missing item type\nCall `methodName` on each item of the array passing custom arguments if\nneeded.",
            "line": " src/components/mout/src/array/invoke.js:3"
        },
        {
            "message": "Missing item type\nJoins strings with the specified separator inserted between each value.\nNull values and empty strings will be excluded.",
            "line": " src/components/mout/src/array/join.js:7"
        },
        {
            "message": "Missing item type\nArray lastIndexOf",
            "line": " src/components/mout/src/array/lastIndexOf.js:3"
        },
        {
            "message": "Missing item type\nArray map",
            "line": " src/components/mout/src/array/map.js:3"
        },
        {
            "message": "Missing item type\nReturn maximum value inside array",
            "line": " src/components/mout/src/array/max.js:3"
        },
        {
            "message": "Missing item type\nReturn minimum value inside array",
            "line": " src/components/mout/src/array/min.js:3"
        },
        {
            "message": "Missing item type\nRemove random item(s) from the Array and return it.\nReturns an Array of items if [nItems] is provided or a single item if\nit isn't specified.",
            "line": " src/components/mout/src/array/pick.js:3"
        },
        {
            "message": "Missing item type\nExtract a list of property values.",
            "line": " src/components/mout/src/array/pluck.js:3"
        },
        {
            "message": "Missing item type\nReturns an Array of numbers inside range.",
            "line": " src/components/mout/src/array/range.js:3"
        },
        {
            "message": "Missing item type\nArray reduce",
            "line": " src/components/mout/src/array/reduce.js:3"
        },
        {
            "message": "Missing item type\nArray reduceRight",
            "line": " src/components/mout/src/array/reduceRight.js:3"
        },
        {
            "message": "Missing item type\nArray reject",
            "line": " src/components/mout/src/array/reject.js:3"
        },
        {
            "message": "Missing item type\nRemove a single item from the array.\n(it won't remove duplicates, just a single item)",
            "line": " src/components/mout/src/array/remove.js:3"
        },
        {
            "message": "Missing item type\nRemove all instances of an item from array.",
            "line": " src/components/mout/src/array/removeAll.js:3"
        },
        {
            "message": "Missing item type\nShuffle array items.",
            "line": " src/components/mout/src/array/shuffle.js:3"
        },
        {
            "message": "Missing item type\nArray some",
            "line": " src/components/mout/src/array/some.js:3"
        },
        {
            "message": "Missing item type\nMerge sort (http://en.wikipedia.org/wiki/Merge_sort)",
            "line": " src/components/mout/src/array/sort.js:3"
        },
        {
            "message": "Missing item type\nSplit array into a fixed number of segments.",
            "line": " src/components/mout/src/array/split.js:3"
        },
        {
            "message": "Missing item type\nCreates an object that holds a lookup for the objects in the array.",
            "line": " src/components/mout/src/array/toLookup.js:3"
        },
        {
            "message": "Missing item type\nConcat multiple arrays and remove duplicates",
            "line": " src/components/mout/src/array/union.js:3"
        },
        {
            "message": "Missing item type",
            "line": " src/components/mout/src/array/unique.js:3"
        },
        {
            "message": "Missing item type\nExclusive OR. Returns items that are present in a single array.\n- like ptyhon's `symmetric_difference`",
            "line": " src/components/mout/src/array/xor.js:4"
        },
        {
            "message": "Missing item type\nMerges together the values of each of the arrays with the values at the\ncorresponding position.",
            "line": " src/components/mout/src/array/zip.js:7"
        },
        {
            "message": "Missing item type",
            "line": " src/components/mout/src/collection/contains.js:3"
        },
        {
            "message": "Missing item type",
            "line": " src/components/mout/src/collection/every.js:3"
        },
        {
            "message": "Missing item type\nfilter collection values, returns array.",
            "line": " src/components/mout/src/collection/filter.js:3"
        },
        {
            "message": "Missing item type\nFind value that returns true on iterator check.",
            "line": " src/components/mout/src/collection/find.js:3"
        },
        {
            "message": "Missing item type",
            "line": " src/components/mout/src/collection/forEach.js:3"
        },
        {
            "message": "Missing item type\ninternal method used to create other collection modules.",
            "line": " src/components/mout/src/collection/make_.js:3"
        },
        {
            "message": "Missing item type\nMap collection values, returns Array.",
            "line": " src/components/mout/src/collection/map.js:3"
        },
        {
            "message": "Missing item type\nGet maximum value inside collection",
            "line": " src/components/mout/src/collection/max.js:3"
        },
        {
            "message": "Missing item type\nGet minimum value inside collection.",
            "line": " src/components/mout/src/collection/min.js:3"
        },
        {
            "message": "Missing item type\nExtract a list of property values.",
            "line": " src/components/mout/src/collection/pluck.js:3"
        },
        {
            "message": "Missing item type",
            "line": " src/components/mout/src/collection/reduce.js:3"
        },
        {
            "message": "Missing item type\nInverse or collection/filter",
            "line": " src/components/mout/src/collection/reject.js:3"
        },
        {
            "message": "Missing item type\nGet collection size",
            "line": " src/components/mout/src/collection/size.js:3"
        },
        {
            "message": "Missing item type",
            "line": " src/components/mout/src/collection/some.js:3"
        },
        {
            "message": "Missing item type\nreturn the day of the year (1..366)",
            "line": " src/components/mout/src/date/dayOfTheYear.js:3"
        },
        {
            "message": "Missing item type\ncalculate the difference between dates (range)",
            "line": " src/components/mout/src/date/diff.js:3"
        },
        {
            "message": "Missing item type\nchecks if it's a leap year",
            "line": " src/components/mout/src/date/isLeapYear.js:3"
        },
        {
            "message": "Missing item type\nCheck if date is \"same\" with optional period",
            "line": " src/components/mout/src/date/isSame.js:3"
        },
        {
            "message": "Missing item type\nParse an ISO8601 formatted date string, and return a Date object.",
            "line": " src/components/mout/src/date/parseIso.js:131"
        },
        {
            "message": "Missing item type\nget a new Date object representing start of period",
            "line": " src/components/mout/src/date/startOf.js:3"
        },
        {
            "message": "Missing item type\nformat date based on strftime format",
            "line": " src/components/mout/src/date/strftime.js:15"
        },
        {
            "message": "Missing item type\nAbbreviated time zone name or similar information.",
            "line": " src/components/mout/src/date/timezoneAbbr.js:3"
        },
        {
            "message": "Missing item type\ntime zone as hour and minute offset from UTC (e.g. +0900)",
            "line": " src/components/mout/src/date/timezoneOffset.js:3"
        },
        {
            "message": "Missing item type\nreturns the total amount of days in the month (considering leap years)",
            "line": " src/components/mout/src/date/totalDaysInMonth.js:5"
        },
        {
            "message": "Missing item type\nreturn the amount of days in the year following the gregorian calendar\nand leap years",
            "line": " src/components/mout/src/date/totalDaysInYear.js:3"
        },
        {
            "message": "Missing item type\nReturn the week of the year based on given firstDayOfWeek",
            "line": " src/components/mout/src/date/weekOfTheYear.js:3"
        },
        {
            "message": "Missing item type\nReturn a function that will execute in the given context, optionally adding any additional supplied parameters to the beginning of the arguments collection.",
            "line": " src/components/mout/src/function/bind.js:7"
        },
        {
            "message": "Missing item type\nReturns a function that composes multiple functions, passing results to\neach other.",
            "line": " src/components/mout/src/function/compose.js:3"
        },
        {
            "message": "Missing item type\nDebounce callback execution",
            "line": " src/components/mout/src/function/debounce.js:3"
        },
        {
            "message": "Missing item type\nReturns a function that call a method on the passed object",
            "line": " src/components/mout/src/function/func.js:3"
        },
        {
            "message": "Missing item type\nConverts argument into a valid iterator.\nUsed internally on most array/object/collection methods that receives a\ncallback/iterator providing a shortcut syntax.",
            "line": " src/components/mout/src/function/makeIterator_.js:3"
        },
        {
            "message": "Missing item type\nCreates a partially applied function.",
            "line": " src/components/mout/src/function/partial.js:7"
        },
        {
            "message": "Missing item type\nReturns a function that gets a property of the passed object",
            "line": " src/components/mout/src/function/prop.js:3"
        },
        {
            "message": "Missing item type\nReturns a function that will execute a list of functions in sequence\npassing the same arguments to each one. (useful for batch processing\nitems during a forEach loop)",
            "line": " src/components/mout/src/function/series.js:3"
        },
        {
            "message": "Missing item type",
            "line": " src/components/mout/src/function/throttle.js:3"
        },
        {
            "message": "Missing item type\nDelays the call of a function within a given context.",
            "line": " src/components/mout/src/function/timeout.js:7"
        },
        {
            "message": "Missing item type\nIterates over a callback a set amount of times",
            "line": " src/components/mout/src/function/times.js:3"
        },
        {
            "message": "Missing item type\nClone native types.",
            "line": " src/components/mout/src/lang/clone.js:3"
        },
        {
            "message": "Missing item type\nCreate Object using prototypal inheritance and setting custom properties.\n- Mix between Douglas Crockford Prototypal Inheritance <http://javascript.crockford.com/prototypal.html> and the EcmaScript 5 `Object.create()` method.",
            "line": " src/components/mout/src/lang/createObject.js:3"
        },
        {
            "message": "Missing item type\nDo fn.apply on a constructor.",
            "line": " src/components/mout/src/lang/ctorApply.js:5"
        },
        {
            "message": "Missing item type\nRecursively clone native types.",
            "line": " src/components/mout/src/lang/deepClone.js:3"
        },
        {
            "message": "Missing item type\nReturn first non void argument",
            "line": " src/components/mout/src/lang/defaults.js:3"
        },
        {
            "message": "Missing item type\nInherit prototype from another Object.\n- inspired by Nicholas Zackas <http://nczonline.net> Solution",
            "line": " src/components/mout/src/lang/inheritPrototype.js:3"
        },
        {
            "message": "Missing item type\nCheck if both arguments are egal.",
            "line": " src/components/mout/src/lang/is.js:3"
        },
        {
            "message": "Missing item type",
            "line": " src/components/mout/src/lang/isArguments.js:3"
        },
        {
            "message": "Missing item type",
            "line": " src/components/mout/src/lang/isArray.js:2"
        },
        {
            "message": "Missing item type",
            "line": " src/components/mout/src/lang/isBoolean.js:2"
        },
        {
            "message": "Missing item type",
            "line": " src/components/mout/src/lang/isDate.js:2"
        },
        {
            "message": "Missing item type\nCheck if value is finite",
            "line": " src/components/mout/src/lang/isFinite.js:5"
        },
        {
            "message": "Missing item type",
            "line": " src/components/mout/src/lang/isFunction.js:2"
        },
        {
            "message": "Missing item type\nCheck if value is an integer",
            "line": " src/components/mout/src/lang/isInteger.js:3"
        },
        {
            "message": "Missing item type\nCheck if value is from a specific \"kind\".",
            "line": " src/components/mout/src/lang/isKind.js:2"
        },
        {
            "message": "Missing item type\nCheck if value is NaN for realz",
            "line": " src/components/mout/src/lang/isNaN.js:3"
        },
        {
            "message": "Missing item type",
            "line": " src/components/mout/src/lang/isNull.js:2"
        },
        {
            "message": "Missing item type",
            "line": " src/components/mout/src/lang/isNumber.js:2"
        },
        {
            "message": "Missing item type",
            "line": " src/components/mout/src/lang/isObject.js:2"
        },
        {
            "message": "Missing item type\nChecks if the value is created by the `Object` constructor.",
            "line": " src/components/mout/src/lang/isPlainObject.js:3"
        },
        {
            "message": "Missing item type",
            "line": " src/components/mout/src/lang/isRegExp.js:2"
        },
        {
            "message": "Missing item type",
            "line": " src/components/mout/src/lang/isString.js:2"
        },
        {
            "message": "Missing item type",
            "line": " src/components/mout/src/lang/isUndefined.js:4"
        },
        {
            "message": "Missing item type\nCheck if both values are not identical/egal",
            "line": " src/components/mout/src/lang/isnt.js:3"
        },
        {
            "message": "Missing item type\nGets the \"kind\" of value. (e.g. \"String\", \"Number\", etc)",
            "line": " src/components/mout/src/lang/kindOf.js:7"
        },
        {
            "message": "Missing item type\nConvert array-like object into array",
            "line": " src/components/mout/src/lang/toArray.js:5"
        },
        {
            "message": "Missing item type\ncovert value into number if numeric",
            "line": " src/components/mout/src/lang/toNumber.js:3"
        },
        {
            "message": "Missing item type\nTypecast a value to a String, using an empty string value for null or\nundefined.",
            "line": " src/components/mout/src/lang/toString.js:3"
        },
        {
            "message": "Missing item type\nRound value up with a custom radix.",
            "line": " src/components/mout/src/math/ceil.js:2"
        },
        {
            "message": "Missing item type\nClamps value inside range.",
            "line": " src/components/mout/src/math/clamp.js:2"
        },
        {
            "message": "Missing item type\nCount number of full steps.",
            "line": " src/components/mout/src/math/countSteps.js:2"
        },
        {
            "message": "Missing item type\nFloor value to full steps.",
            "line": " src/components/mout/src/math/floor.js:2"
        },
        {
            "message": "Missing item type\nChecks if value is inside the range.",
            "line": " src/components/mout/src/math/inRange.js:2"
        },
        {
            "message": "Missing item type\nCheck if value is close to target.",
            "line": " src/components/mout/src/math/isNear.js:2"
        },
        {
            "message": "Missing item type\nLinear interpolation.\nIMPORTANT:will return `Infinity` if numbers overflow Number.MAX_VALUE",
            "line": " src/components/mout/src/math/lerp.js:2"
        },
        {
            "message": "Missing item type\nLoops value inside range.",
            "line": " src/components/mout/src/math/loop.js:2"
        },
        {
            "message": "Missing item type\nMaps a number from one scale to another.",
            "line": " src/components/mout/src/math/map.js:2"
        },
        {
            "message": "Missing item type\nGets normalized ratio of value inside range.",
            "line": " src/components/mout/src/math/norm.js:2"
        },
        {
            "message": "Missing item type\nRound number to a specific radix",
            "line": " src/components/mout/src/math/round.js:2"
        },
        {
            "message": "Missing item type",
            "line": " src/components/mout/src/number/MAX_INT.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src/components/mout/src/number/MAX_UINT.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src/components/mout/src/number/MIN_INT.js:1"
        },
        {
            "message": "Missing item type\nAbbreviate number if bigger than 1000. (eg: 2.5K, 17.5M, 3.4B, ...)",
            "line": " src/components/mout/src/number/abbreviate.js:9"
        },
        {
            "message": "Missing item type\nConverts number into currency format",
            "line": " src/components/mout/src/number/currencyFormat.js:3"
        },
        {
            "message": "Missing item type\nEnforce a specific amount of decimal digits and also fix floating\npoint rounding issues.",
            "line": " src/components/mout/src/number/enforcePrecision.js:2"
        },
        {
            "message": "Missing item type\nAdd padding zeros if n.length < minLength.",
            "line": " src/components/mout/src/number/pad.js:3"
        },
        {
            "message": "Missing item type\nBitwise circular shift left\nhttp://en.wikipedia.org/wiki/Circular_shift",
            "line": " src/components/mout/src/number/rol.js:2"
        },
        {
            "message": "Missing item type\nBitwise circular shift right\nhttp://en.wikipedia.org/wiki/Circular_shift",
            "line": " src/components/mout/src/number/ror.js:2"
        },
        {
            "message": "Missing item type\nGet sign of the value.",
            "line": " src/components/mout/src/number/sign.js:3"
        },
        {
            "message": "Missing item type\n\"Convert\" value into an 32-bit integer.\nWorks like `Math.floor` if val > 0 and `Math.ceil` if val < 0.\nIMPORTANT: val will wrap at 2^31 and -2^31.\nPerf tests: http://jsperf.com/vs-vs-parseint-bitwise-operators/7",
            "line": " src/components/mout/src/number/toInt.js:3"
        },
        {
            "message": "Missing item type\n\"Convert\" value into a 32-bit unsigned integer.\nIMPORTANT: Value will wrap at 2^32.",
            "line": " src/components/mout/src/number/toUInt.js:3"
        },
        {
            "message": "Missing item type\n\"Convert\" value into an 31-bit unsigned integer (since 1 bit is used for sign).\nIMPORTANT: value wil wrap at 2^31, if negative will return 0.",
            "line": " src/components/mout/src/number/toUInt31.js:3"
        },
        {
            "message": "Missing item type\nBinds methods of the object to be run in it's own context.",
            "line": " src/components/mout/src/object/bindAll.js:3"
        },
        {
            "message": "Missing item type\nCheck if object contains value",
            "line": " src/components/mout/src/object/contains.js:3"
        },
        {
            "message": "Missing item type\nRecursively checks for same properties and values.",
            "line": " src/components/mout/src/object/deepEquals.js:7"
        },
        {
            "message": "Missing item type\nDeeply copy missing properties in the target from the defaults.",
            "line": " src/components/mout/src/object/deepFillIn.js:3"
        },
        {
            "message": "Missing item type\nRecursively check if the objects match.",
            "line": " src/components/mout/src/object/deepMatches.js:37"
        },
        {
            "message": "Missing item type\nMixes objects into the target object, recursively mixing existing child\nobjects.",
            "line": " src/components/mout/src/object/deepMixIn.js:3"
        },
        {
            "message": "Missing item type\nChecks if two objects have the same keys and values.",
            "line": " src/components/mout/src/object/equals.js:19"
        },
        {
            "message": "Missing item type\nObject every",
            "line": " src/components/mout/src/object/every.js:3"
        },
        {
            "message": "Missing item type\nCopy missing properties in the obj from the defaults.",
            "line": " src/components/mout/src/object/fillIn.js:3"
        },
        {
            "message": "Missing item type\nCreates a new object with all the properties where the callback returns\ntrue.",
            "line": " src/components/mout/src/object/filter.js:3"
        },
        {
            "message": "Missing item type\nReturns first item that matches criteria",
            "line": " src/components/mout/src/object/find.js:3"
        },
        {
            "message": "Missing item type\nSimilar to Array/forEach but works over object properties and fixes Don't\nEnum bug on IE.\nbased on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation",
            "line": " src/components/mout/src/object/forIn.js:24"
        },
        {
            "message": "Missing item type\nSimilar to Array/forEach but works over object properties and fixes Don't\nEnum bug on IE.\nbased on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation",
            "line": " src/components/mout/src/object/forOwn.js:3"
        },
        {
            "message": "Missing item type\nreturn a list of all enumerable properties that have function values",
            "line": " src/components/mout/src/object/functions.js:3"
        },
        {
            "message": "Missing item type\nget \"nested\" object property",
            "line": " src/components/mout/src/object/get.js:3"
        },
        {
            "message": "Missing item type\nCheck if object has nested property.",
            "line": " src/components/mout/src/object/has.js:5"
        },
        {
            "message": "Missing item type\nSafer Object.hasOwnProperty",
            "line": " src/components/mout/src/object/hasOwn.js:3"
        },
        {
            "message": "Missing item type\nGet object keys",
            "line": " src/components/mout/src/object/keys.js:3"
        },
        {
            "message": "Missing item type\nCreates a new object where all the values are the result of calling\n`callback`.",
            "line": " src/components/mout/src/object/map.js:3"
        },
        {
            "message": "Missing item type\nchecks if a object contains all given properties/values",
            "line": " src/components/mout/src/object/matches.js:3"
        },
        {
            "message": "Missing item type\nReturns maximum value inside object.",
            "line": " src/components/mout/src/object/max.js:3"
        },
        {
            "message": "Missing item type\nDeep merge objects.",
            "line": " src/components/mout/src/object/merge.js:3"
        },
        {
            "message": "Missing item type\nReturns minimum value inside object.",
            "line": " src/components/mout/src/object/min.js:3"
        },
        {
            "message": "Missing item type\nCombine properties from all the objects into first one.\n- This method affects target object in place, if you want to create a new Object pass an empty object as first param.",
            "line": " src/components/mout/src/object/mixIn.js:3"
        },
        {
            "message": "Missing item type\nCreate nested object if non-existent",
            "line": " src/components/mout/src/object/namespace.js:3"
        },
        {
            "message": "Missing item type\nReturn a copy of the object, filtered to only have values for the whitelisted keys.",
            "line": " src/components/mout/src/object/pick.js:3"
        },
        {
            "message": "Missing item type\nExtract a list of property values.",
            "line": " src/components/mout/src/object/pluck.js:3"
        },
        {
            "message": "Missing item type\nObject reduce",
            "line": " src/components/mout/src/object/reduce.js:3"
        },
        {
            "message": "Missing item type\nObject reject",
            "line": " src/components/mout/src/object/reject.js:3"
        },
        {
            "message": "Missing item type\nset \"nested\" object property",
            "line": " src/components/mout/src/object/set.js:3"
        },
        {
            "message": "Missing item type\nGet object size",
            "line": " src/components/mout/src/object/size.js:3"
        },
        {
            "message": "Missing item type\nObject some",
            "line": " src/components/mout/src/object/some.js:3"
        },
        {
            "message": "Missing item type\nUnset object property.",
            "line": " src/components/mout/src/object/unset.js:3"
        },
        {
            "message": "Missing item type\nGet object values",
            "line": " src/components/mout/src/object/values.js:3"
        },
        {
            "message": "Missing item type\nChecks if query string contains parameter.",
            "line": " src/components/mout/src/queryString/contains.js:3"
        },
        {
            "message": "Missing item type\nDecode query string into an object of keys => vals.",
            "line": " src/components/mout/src/queryString/decode.js:3"
        },
        {
            "message": "Missing item type\nEncode object into a query string.",
            "line": " src/components/mout/src/queryString/encode.js:3"
        },
        {
            "message": "Missing item type\nGet query parameter value.",
            "line": " src/components/mout/src/queryString/getParam.js:3"
        },
        {
            "message": "Missing item type\nGets full query as string with all special chars decoded.",
            "line": " src/components/mout/src/queryString/getQuery.js:3"
        },
        {
            "message": "Missing item type\nGet query string, parses and decodes it.",
            "line": " src/components/mout/src/queryString/parse.js:3"
        },
        {
            "message": "Missing item type\nSet query string parameter value",
            "line": " src/components/mout/src/queryString/setParam.js:3"
        },
        {
            "message": "Missing item type\nReturns a random element from the supplied arguments\nor from the array (if single argument is an array).",
            "line": " src/components/mout/src/random/choice.js:3"
        },
        {
            "message": "Missing item type\nReturns pseudo-random guid (UUID v4)\nIMPORTANT: it's not totally \"safe\" since randHex/choice uses Math.random\nby default and sequences can be predicted in some cases. See the\n\"random/random\" documentation for more info about it and how to replace\nthe default PRNG.",
            "line": " src/components/mout/src/random/guid.js:3"
        },
        {
            "message": "Missing item type\nReturns random number inside range",
            "line": " src/components/mout/src/random/rand.js:3"
        },
        {
            "message": "Missing item type\nReturns random bit (0 or 1)",
            "line": " src/components/mout/src/random/randBit.js:3"
        },
        {
            "message": "Missing item type\nReturns a random hexadecimal string",
            "line": " src/components/mout/src/random/randHex.js:5"
        },
        {
            "message": "Missing item type\nGets random integer inside range or snap to min/max values.",
            "line": " src/components/mout/src/random/randInt.js:3"
        },
        {
            "message": "Missing item type\nReturns random sign (-1 or 1)",
            "line": " src/components/mout/src/random/randSign.js:3"
        },
        {
            "message": "Missing item type\nJust a wrapper to Math.random. No methods inside mout/random should call\nMath.random() directly so we can inject the pseudo-random number\ngenerator if needed (ie. in case we need a seeded random or a better\nalgorithm than the native one)",
            "line": " src/components/mout/src/random/random.js:3"
        },
        {
            "message": "Missing item type\nContains all Unicode white-spaces. Taken from\nhttp://en.wikipedia.org/wiki/Whitespace_character.",
            "line": " src/components/mout/src/string/WHITE_SPACES.js:2"
        },
        {
            "message": "Missing item type\nConvert string to camelCase text.",
            "line": " src/components/mout/src/string/camelCase.js:2"
        },
        {
            "message": "Missing item type\nSearches for a given substring",
            "line": " src/components/mout/src/string/contains.js:3"
        },
        {
            "message": "Missing item type\nTruncate string at full words.",
            "line": " src/components/mout/src/string/crop.js:2"
        },
        {
            "message": "Missing item type\nChecks if string ends with specified suffix.",
            "line": " src/components/mout/src/string/endsWith.js:2"
        },
        {
            "message": "Missing item type\nEscapes a string for insertion into HTML.",
            "line": " src/components/mout/src/string/escapeHtml.js:3"
        },
        {
            "message": "Missing item type\nEscape RegExp string chars.",
            "line": " src/components/mout/src/string/escapeRegExp.js:5"
        },
        {
            "message": "Missing item type\nEscape string into unicode sequences",
            "line": " src/components/mout/src/string/escapeUnicode.js:3"
        },
        {
            "message": "Missing item type\nReplaces spaces with hyphens, split camelCase text, remove non-word chars, remove accents and convert to lower case.",
            "line": " src/components/mout/src/string/hyphenate.js:2"
        },
        {
            "message": "Missing item type\nInserts a string at a given index.",
            "line": " src/components/mout/src/string/insert.js:3"
        },
        {
            "message": "Missing item type\nString interpolation",
            "line": " src/components/mout/src/string/interpolate.js:5"
        },
        {
            "message": "Missing item type\n\"Safer\" String.toLowerCase()",
            "line": " src/components/mout/src/string/lowerCase.js:2"
        },
        {
            "message": "Missing item type\nPad string with `char` if its' length is smaller than `minLen`",
            "line": " src/components/mout/src/string/lpad.js:3"
        },
        {
            "message": "Missing item type\nRemove chars from beginning of string.",
            "line": " src/components/mout/src/string/ltrim.js:2"
        },
        {
            "message": "Missing item type\nGroup arguments as path segments, if any of the args is `null` or an\nempty string it will be ignored from resulting path.",
            "line": " src/components/mout/src/string/makePath.js:3"
        },
        {
            "message": "Missing item type\nConvert line-breaks from DOS/MAC to a single standard (UNIX by default)",
            "line": " src/components/mout/src/string/normalizeLineBreaks.js:3"
        },
        {
            "message": "Missing item type\ncamelCase + UPPERCASE first char",
            "line": " src/components/mout/src/string/pascalCase.js:2"
        },
        {
            "message": "Missing item type\nUPPERCASE first char of each word.",
            "line": " src/components/mout/src/string/properCase.js:2"
        },
        {
            "message": "Missing item type\nRemove non-printable ASCII chars",
            "line": " src/components/mout/src/string/removeNonASCII.js:2"
        },
        {
            "message": "Missing item type\nRemove non-word chars.",
            "line": " src/components/mout/src/string/removeNonWord.js:2"
        },
        {
            "message": "Missing item type\nRepeat string n times",
            "line": " src/components/mout/src/string/repeat.js:3"
        },
        {
            "message": "Missing item type\nReplace string(s) with the replacement(s) in the source.",
            "line": " src/components/mout/src/string/replace.js:3"
        },
        {
            "message": "Missing item type\nReplaces all accented chars with regular ones",
            "line": " src/components/mout/src/string/replaceAccents.js:2"
        },
        {
            "message": "Missing item type\nPad string with `char` if its' length is smaller than `minLen`",
            "line": " src/components/mout/src/string/rpad.js:3"
        },
        {
            "message": "Missing item type\nRemove chars from end of string.",
            "line": " src/components/mout/src/string/rtrim.js:2"
        },
        {
            "message": "Missing item type\nUPPERCASE first char of each sentence and lowercase other chars.",
            "line": " src/components/mout/src/string/sentenceCase.js:2"
        },
        {
            "message": "Missing item type\nConvert to lower case, remove accents, remove non-word chars and\nreplace spaces with the specified delimeter.\nDoes not split camelCase text.",
            "line": " src/components/mout/src/string/slugify.js:2"
        },
        {
            "message": "Missing item type\nChecks if string starts with specified prefix.",
            "line": " src/components/mout/src/string/startsWith.js:2"
        },
        {
            "message": "Missing item type\nRemove HTML tags from string.",
            "line": " src/components/mout/src/string/stripHtmlTags.js:2"
        },
        {
            "message": "Missing item type\nRemove white-spaces from beginning and end of string.",
            "line": " src/components/mout/src/string/trim.js:2"
        },
        {
            "message": "Missing item type\nLimit number of chars.",
            "line": " src/components/mout/src/string/truncate.js:2"
        },
        {
            "message": "Missing item type\nParses string and convert it into a native value.",
            "line": " src/components/mout/src/string/typecast.js:5"
        },
        {
            "message": "Missing item type\nAdd space between camelCase text.",
            "line": " src/components/mout/src/string/unCamelCase.js:5"
        },
        {
            "message": "Missing item type\nReplaces spaces with underscores, split camelCase text, remove non-word chars, remove accents and convert to lower case.",
            "line": " src/components/mout/src/string/underscore.js:2"
        },
        {
            "message": "Missing item type\nUnescapes HTML special chars",
            "line": " src/components/mout/src/string/unescapeHtml.js:3"
        },
        {
            "message": "Missing item type\nUnescape unicode char sequences",
            "line": " src/components/mout/src/string/unescapeUnicode.js:3"
        },
        {
            "message": "Missing item type\nReplaces hyphens with spaces. (only hyphens between word chars)",
            "line": " src/components/mout/src/string/unhyphenate.js:2"
        },
        {
            "message": "Missing item type\n\"Safer\" String.toUpperCase()",
            "line": " src/components/mout/src/string/upperCase.js:2"
        },
        {
            "message": "Missing item type\nconvert time into another unit",
            "line": " src/components/mout/src/time/convert.js:3"
        },
        {
            "message": "Missing item type\nGet current time in miliseconds",
            "line": " src/components/mout/src/time/now.js:3"
        },
        {
            "message": "Missing item type\nParse timestamp into an object.",
            "line": " src/components/mout/src/time/parseMs.js:3"
        },
        {
            "message": "Missing item type\nFormat timestamp into a time string.",
            "line": " src/components/mout/src/time/toTimeString.js:7"
        },
        {
            "message": "Missing item type\nmout v0.7.1 | http://moutjs.com | MIT license",
            "line": " src/components/mout/src/index.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src/components/require-dust/demo/lib/require.js:1"
        },
        {
            "message": "Missing item type\nHelper function for iterating over an array. If the func returns\na true value, it will break out of the loop.",
            "line": " src/components/require-dust/demo/lib/require.js:48"
        },
        {
            "message": "Missing item type\nHelper function for iterating over an array backwards. If the func\nreturns a true value, it will break out of the loop.",
            "line": " src/components/require-dust/demo/lib/require.js:63"
        },
        {
            "message": "Missing item type\nCycles over properties in an object and calls a function for each\nproperty value. If the function returns a truthy value, then the\niteration is stopped.",
            "line": " src/components/require-dust/demo/lib/require.js:82"
        },
        {
            "message": "Missing item type\nSimple function to mix in properties from source into target,\nbut only if target does not already have a property of the same name.\nThis is not robust in IE for transferring methods that match\nObject.prototype names, but the uses of mixin here seem unlikely to\ntrigger a problem related to that.",
            "line": " src/components/require-dust/demo/lib/require.js:98"
        },
        {
            "message": "Missing item type\nConstructs an error with a pointer to an URL with more information.",
            "line": " src/components/require-dust/demo/lib/require.js:175"
        },
        {
            "message": "Missing item type\nTrims the . and .. from an array of path segments.\nIt will keep a leading path segment if a .. will become\nthe first path segment, to help with module name lookups,\nwhich act like paths, but can be remapped. But the end result,\nall paths that use this function should look normalized.\nNOTE: this method MODIFIES the input array.",
            "line": " src/components/require-dust/demo/lib/require.js:238"
        },
        {
            "message": "Missing item type\nGiven a relative module name, like ./something, normalize it to\na real name that can be mapped to a path.",
            "line": " src/components/require-dust/demo/lib/require.js:271"
        },
        {
            "message": "Missing item type\nCreates a module mapping that includes plugin prefix, module\nname, and path. If parentModuleMap is provided it will\nalso normalize the name via require.normalize()",
            "line": " src/components/require-dust/demo/lib/require.js:390"
        },
        {
            "message": "Missing item type\nInternal method to transfer globalQueue items to this context's\ndefQueue.",
            "line": " src/components/require-dust/demo/lib/require.js:530"
        },
        {
            "message": "Missing item type\nHelper function that creates a require function object to give to\nmodules that ask for it as a dependency. It needs to be specific\nper module because of the implication of path mappings that may\nneed to be relative to the module name.",
            "line": " src/components/require-dust/demo/lib/require.js:546"
        },
        {
            "message": "Missing item type\nChecks is the module is ready to define itself, and if so,\ndefine it. If the silent argument is true, then it will just\ndefine, but not notify listeners, and not ask for a context-wide\ncheck of all loaded modules. That is useful for cycle breaking.",
            "line": " src/components/require-dust/demo/lib/require.js:943"
        },
        {
            "message": "Missing item type\nGiven an event from a script node, get the requirejs info from it,\nand then removes the event listeners on the node.",
            "line": " src/components/require-dust/demo/lib/require.js:1219"
        },
        {
            "message": "Missing item type\nSet a configuration for the context.",
            "line": " src/components/require-dust/demo/lib/require.js:1252"
        },
        {
            "message": "Missing item type\nCalled to enable a module if it is still in the registry\nawaiting enablement. parent module is passed in for context,\nused by the optimizer.",
            "line": " src/components/require-dust/demo/lib/require.js:1462"
        },
        {
            "message": "Missing item type\nInternal method used by environment adapters to complete a load event.\nA load event could be a script load or just a load pass from a synchronous\nload call.",
            "line": " src/components/require-dust/demo/lib/require.js:1474"
        },
        {
            "message": "Missing item type\nConverts a module name + .extension into an URL path.\n*Requires* the use of a module name. It does not support using\nplain URLs like nameToUrl.",
            "line": " src/components/require-dust/demo/lib/require.js:1532"
        },
        {
            "message": "Missing item type\nConverts a module name to a file path. Supports cases where\nmoduleName may actually be just an URL.",
            "line": " src/components/require-dust/demo/lib/require.js:1549"
        },
        {
            "message": "Missing item type\nExecutes a module callack function. Broken out as a separate function\nsolely to allow the build system to sequence the files in the built\nlayer in the right sequence.",
            "line": " src/components/require-dust/demo/lib/require.js:1619"
        },
        {
            "message": "Missing item type\ncallback for script loads, used to check status of loading.",
            "line": " src/components/require-dust/demo/lib/require.js:1630"
        },
        {
            "message": "Missing item type\nCallback for script errors.",
            "line": " src/components/require-dust/demo/lib/require.js:1652"
        },
        {
            "message": "Missing item type\nMain entry point.\n\nIf the only argument to require is a string, then the module that\nis represented by that string is fetched for the appropriate context.\n\nIf the first argument is an array, then it will be treated as an array\nof dependency string names to fetch. An optional function callback can\nbe specified to execute when all of those dependencies are available.\n\nMake a local req variable to help Caja compliance (it assumes things\non a require that are not standardized), and to give a short\nname for minification/local scope use.",
            "line": " src/components/require-dust/demo/lib/require.js:1664"
        },
        {
            "message": "Missing item type\nSupport require.config() to make it easier to cooperate with other\nAMD loaders on globally agreed names.",
            "line": " src/components/require-dust/demo/lib/require.js:1714"
        },
        {
            "message": "Missing item type\nExport require as a global, but only if it does not already exist.",
            "line": " src/components/require-dust/demo/lib/require.js:1722"
        },
        {
            "message": "Missing item type\nAny errors that require explicitly generates will be passed to this\nfunction. Intercept/override it if you want custom error handling.",
            "line": " src/components/require-dust/demo/lib/require.js:1757"
        },
        {
            "message": "Missing item type\nDoes the request to load a module for the browser case.\nMake this a separate function to allow other environments\nto override it.",
            "line": " src/components/require-dust/demo/lib/require.js:1766"
        },
        {
            "message": "Missing item type\nThe function that handles definitions of modules. Differs from\nrequire() in that a string for the module should be the first argument,\nand the function to execute after dependencies are loaded should\nreturn a value to define the module corresponding to the first argument's\nname.",
            "line": " src/components/require-dust/demo/lib/require.js:1909"
        },
        {
            "message": "Missing item type\nExecutes the text. Normally just uses eval, but can be modified\nto use a better, environment-specific call. Only used for transpiling\nloader plugins, not for plain JS modules.",
            "line": " src/components/require-dust/demo/lib/require.js:1982"
        },
        {
            "message": "Missing item type\nAMD implementation for dust.js\nThis is based on require-cs code.\nsee: http://github.com/jrburke/require-cs for details",
            "line": " src/components/require-dust/require-dust.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src/components/requirejs/require.js:1"
        },
        {
            "message": "Missing item type\nHelper function for iterating over an array. If the func returns\na true value, it will break out of the loop.",
            "line": " src/components/requirejs/require.js:49"
        },
        {
            "message": "Missing item type\nHelper function for iterating over an array backwards. If the func\nreturns a true value, it will break out of the loop.",
            "line": " src/components/requirejs/require.js:64"
        },
        {
            "message": "Missing item type\nCycles over properties in an object and calls a function for each\nproperty value. If the function returns a truthy value, then the\niteration is stopped.",
            "line": " src/components/requirejs/require.js:87"
        },
        {
            "message": "Missing item type\nSimple function to mix in properties from source into target,\nbut only if target does not already have a property of the same name.",
            "line": " src/components/requirejs/require.js:103"
        },
        {
            "message": "Missing item type\nConstructs an error with a pointer to an URL with more information.",
            "line": " src/components/requirejs/require.js:157"
        },
        {
            "message": "Missing item type\nTrims the . and .. from an array of path segments.\nIt will keep a leading path segment if a .. will become\nthe first path segment, to help with module name lookups,\nwhich act like paths, but can be remapped. But the end result,\nall paths that use this function should look normalized.\nNOTE: this method MODIFIES the input array.",
            "line": " src/components/requirejs/require.js:225"
        },
        {
            "message": "Missing item type\nGiven a relative module name, like ./something, normalize it to\na real name that can be mapped to a path.",
            "line": " src/components/requirejs/require.js:258"
        },
        {
            "message": "Missing item type\nCreates a module mapping that includes plugin prefix, module\nname, and path. If parentModuleMap is provided it will\nalso normalize the name via require.normalize()",
            "line": " src/components/requirejs/require.js:400"
        },
        {
            "message": "Missing item type\nInternal method to transfer globalQueue items to this context's\ndefQueue.",
            "line": " src/components/requirejs/require.js:542"
        },
        {
            "message": "Missing item type\nChecks if the module is ready to define itself, and if so,\ndefine it.",
            "line": " src/components/requirejs/require.js:824"
        },
        {
            "message": "Missing item type\nGiven an event from a script node, get the requirejs info from it,\nand then removes the event listeners on the node.",
            "line": " src/components/requirejs/require.js:1189"
        },
        {
            "message": "Missing item type\nSet a configuration for the context.",
            "line": " src/components/requirejs/require.js:1242"
        },
        {
            "message": "Missing item type\nConverts a module name + .extension into an URL path.\n*Requires* the use of a module name. It does not support using\nplain URLs like nameToUrl.",
            "line": " src/components/requirejs/require.js:1429"
        },
        {
            "message": "Missing item type\nCalled to enable a module if it is still in the registry\nawaiting enablement. A second arg, parent, the parent module,\nis passed in for context, when this method is overridden by\nthe optimizer. Not shown here to keep code compact.",
            "line": " src/components/requirejs/require.js:1502"
        },
        {
            "message": "Missing item type\nInternal method used by environment adapters to complete a load event.\nA load event could be a script load or just a load pass from a synchronous\nload call.",
            "line": " src/components/requirejs/require.js:1515"
        },
        {
            "message": "Missing item type\nConverts a module name to a file path. Supports cases where\nmoduleName may actually be just an URL.\nNote that it **does not** call normalize on the moduleName,\nit is assumed to have already been normalized. This is an\ninternal API, not a public one. Use toUrl for the public API.",
            "line": " src/components/requirejs/require.js:1571"
        },
        {
            "message": "Missing item type\nExecutes a module callback function. Broken out as a separate function\nsolely to allow the build system to sequence the files in the built\nlayer in the right sequence.",
            "line": " src/components/requirejs/require.js:1642"
        },
        {
            "message": "Missing item type\ncallback for script loads, used to check status of loading.",
            "line": " src/components/requirejs/require.js:1653"
        },
        {
            "message": "Missing item type\nCallback for script errors.",
            "line": " src/components/requirejs/require.js:1675"
        },
        {
            "message": "Missing item type\nMain entry point.\n\nIf the only argument to require is a string, then the module that\nis represented by that string is fetched for the appropriate context.\n\nIf the first argument is an array, then it will be treated as an array\nof dependency string names to fetch. An optional function callback can\nbe specified to execute when all of those dependencies are available.\n\nMake a local req variable to help Caja compliance (it assumes things\non a require that are not standardized), and to give a short\nname for minification/local scope use.",
            "line": " src/components/requirejs/require.js:1690"
        },
        {
            "message": "Missing item type\nSupport require.config() to make it easier to cooperate with other\nAMD loaders on globally agreed names.",
            "line": " src/components/requirejs/require.js:1740"
        },
        {
            "message": "Missing item type\nExecute something after the current tick\nof the event loop. Override for other envs\nthat have a better solution than setTimeout.",
            "line": " src/components/requirejs/require.js:1748"
        },
        {
            "message": "Missing item type\nExport require as a global, but only if it does not already exist.",
            "line": " src/components/requirejs/require.js:1758"
        },
        {
            "message": "Missing item type\nAny errors that require explicitly generates will be passed to this\nfunction. Intercept/override it if you want custom error handling.",
            "line": " src/components/requirejs/require.js:1805"
        },
        {
            "message": "Missing item type\nCreates the node for the load command. Only used in browser envs.",
            "line": " src/components/requirejs/require.js:1812"
        },
        {
            "message": "Missing item type\nDoes the request to load a module for the browser case.\nMake this a separate function to allow other environments\nto override it.",
            "line": " src/components/requirejs/require.js:1825"
        },
        {
            "message": "Missing item type\nThe function that handles definitions of modules. Differs from\nrequire() in that a string for the module should be the first argument,\nand the function to execute after dependencies are loaded should\nreturn a value to define the module corresponding to the first argument's\nname.",
            "line": " src/components/requirejs/require.js:1981"
        },
        {
            "message": "Missing item type\nExecutes the text. Normally just uses eval, but can be modified\nto use a better, environment-specific call. Only used for transpiling\nloader plugins, not for plain JS modules.",
            "line": " src/components/requirejs/require.js:2055"
        },
        {
            "message": "Missing item type\nCreates an application",
            "line": " src/mvc/Application.js:49"
        },
        {
            "message": "Missing item type",
            "line": " src/mvc/Model.js:641"
        },
        {
            "message": "Missing item type",
            "line": " src/mvc/Model.js:648"
        },
        {
            "message": "Missing item type",
            "line": " src/mvc/Router.js:18"
        },
        {
            "message": "Missing item type",
            "line": " src/mvc/Router.js:24"
        },
        {
            "message": "Missing item type",
            "line": " src/mvc/Router.js:32"
        },
        {
            "message": "Missing item type",
            "line": " src/mvc/Router.js:38"
        },
        {
            "message": "Missing item type\nA list of keys found in the store",
            "line": " src/storage/LocalStore.js:35"
        }
    ]
}