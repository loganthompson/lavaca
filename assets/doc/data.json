{
    "project": {
        "name": "lavaca",
        "description": "A curated collection of tools built for mobile.",
        "version": "2.3.2",
        "url": "https://github.com/mutualmobile/lavaca"
    },
    "files": {
        "src/env/Device.js": {
            "name": "src/env/Device.js",
            "modules": {},
            "classes": {
                "lavaca.env.Device": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/events/EventDispatcher.js": {
            "name": "src/events/EventDispatcher.js",
            "modules": {},
            "classes": {
                "lavaca.events.EventDispatcher": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/fx/Animation.js": {
            "name": "src/fx/Animation.js",
            "modules": {},
            "classes": {
                "lavaca.fx.Animation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/fx/Spring.js": {
            "name": "src/fx/Spring.js",
            "modules": {},
            "classes": {
                "lavaca.fx.Spring": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/fx/Transform.js": {
            "name": "src/fx/Transform.js",
            "modules": {},
            "classes": {
                "lavaca.fx.Transform": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/fx/Transition.js": {
            "name": "src/fx/Transition.js",
            "modules": {},
            "classes": {
                "lavaca.fx.Transition": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/mvc/Application.js": {
            "name": "src/mvc/Application.js",
            "modules": {},
            "classes": {
                "lavaca.mvc.Application": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/mvc/Collection.js": {
            "name": "src/mvc/Collection.js",
            "modules": {},
            "classes": {
                "lavaca.mvc.ItemEvent": 1,
                "lavaca.mvc.Collection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/mvc/Controller.js": {
            "name": "src/mvc/Controller.js",
            "modules": {},
            "classes": {
                "lavaca.mvc.Controller": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/mvc/Model.js": {
            "name": "src/mvc/Model.js",
            "modules": {},
            "classes": {
                "lavaca.mvc.AttributeEvent": 1,
                "lavaca.mvc.Model": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/mvc/Route.js": {
            "name": "src/mvc/Route.js",
            "modules": {},
            "classes": {
                "lavaca.mvc.Route": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/mvc/Router.js": {
            "name": "src/mvc/Router.js",
            "modules": {},
            "classes": {
                "lavaca.mvc.Router": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/mvc/View.js": {
            "name": "src/mvc/View.js",
            "modules": {},
            "classes": {
                "lavaca.mvc.View": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/mvc/ViewManager.js": {
            "name": "src/mvc/ViewManager.js",
            "modules": {},
            "classes": {
                "lavaca.mvc.ViewManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/net/Connectivity.js": {
            "name": "src/net/Connectivity.js",
            "modules": {},
            "classes": {
                "lavaca.net.Connectivity": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/net/History.js": {
            "name": "src/net/History.js",
            "modules": {},
            "classes": {
                "lavaca.net.History": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ui/LoadingIndicator.js": {
            "name": "src/ui/LoadingIndicator.js",
            "modules": {},
            "classes": {
                "lavaca.ui.LoadingIndicator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ui/Widget.js": {
            "name": "src/ui/Widget.js",
            "modules": {},
            "classes": {
                "lavaca.ui.Widget": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/util/Cache.js": {
            "name": "src/util/Cache.js",
            "modules": {},
            "classes": {
                "lavaca.util.Cache": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/util/Disposable.js": {
            "name": "src/util/Disposable.js",
            "modules": {},
            "classes": {
                "lavaca.util.Disposable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/util/extend.js": {
            "name": "src/util/extend.js",
            "modules": {},
            "classes": {
                "lavaca.util.extend": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/util/uuid.js": {
            "name": "src/util/uuid.js",
            "modules": {},
            "classes": {
                "lavaca.util.uuid": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "lavaca.env.Device": {
            "name": "lavaca.env.Device",
            "shortname": "lavaca.env.Device",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/env/Device.js",
            "line": 5,
            "description": "Static utility type for working with Cordova (aka PhoneGap) and other non-standard native functionality"
        },
        "lavaca.events.EventDispatcher": {
            "name": "lavaca.events.EventDispatcher",
            "shortname": "lavaca.events.EventDispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/events/EventDispatcher.js",
            "line": 6,
            "description": "Basic event dispatcher type",
            "extends": "lavaca.util.Disposable",
            "is_constructor": 1
        },
        "lavaca.fx.Animation": {
            "name": "lavaca.fx.Animation",
            "shortname": "lavaca.fx.Animation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/fx/Animation.js",
            "line": 34,
            "description": "Static utility type for working with CSS keyframe animations"
        },
        "lavaca.fx.Spring": {
            "name": "lavaca.fx.Spring",
            "shortname": "lavaca.fx.Spring",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/fx/Spring.js",
            "line": 3,
            "description": "Static utility type for creating a CSS keyframe animation with a spring effect"
        },
        "lavaca.fx.Transform": {
            "name": "lavaca.fx.Transform",
            "shortname": "lavaca.fx.Transform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/fx/Transform.js",
            "line": 87,
            "description": "Static utility type for working with CSS transforms"
        },
        "lavaca.fx.Transition": {
            "name": "lavaca.fx.Transition",
            "shortname": "lavaca.fx.Transition",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/fx/Transition.js",
            "line": 31,
            "description": "Static utility type for working with CSS transitions"
        },
        "lavaca.mvc.Application": {
            "name": "lavaca.mvc.Application",
            "shortname": "lavaca.mvc.Application",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/mvc/Application.js",
            "line": 39,
            "description": "Base application type",
            "extends": "lavaca.events.EventDispatcher"
        },
        "lavaca.mvc.ItemEvent": {
            "name": "lavaca.mvc.ItemEvent",
            "shortname": "lavaca.mvc.ItemEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/mvc/Collection.js",
            "line": 35,
            "description": "Event type used when a model in a collection has an event",
            "extends": "lavaca.events.EventDispatcher",
            "itemtype": "property",
            "type": "Lavaca.mvc.Collection",
            "default": "null\nThe index of the event-causing model before the event"
        },
        "lavaca.mvc.Collection": {
            "name": "lavaca.mvc.Collection",
            "shortname": "lavaca.mvc.Collection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/mvc/Collection.js",
            "line": 58,
            "super": "Model\nBasic model collection type",
            "itemtype": "event",
            "is_constructor": 1,
            "params": [
                {
                    "name": "models",
                    "description": "A list of models to add to the collection",
                    "type": "Array"
                },
                {
                    "name": "map",
                    "description": "A parameter hash to apply to the collection",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "lavaca.mvc.Controller": {
            "name": "lavaca.mvc.Controller",
            "shortname": "lavaca.mvc.Controller",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/mvc/Controller.js",
            "line": 8,
            "description": "Base type for controllers",
            "extends": "lavaca.util.Disposable",
            "is_constructor": 1,
            "params": [
                {
                    "name": "other",
                    "description": "Another controller from which to take context information",
                    "type": "Lavaca.mvc.Controller"
                },
                {
                    "name": "router",
                    "description": "The application's router",
                    "type": "Lavaca.mvc.Router",
                    "optional": true
                },
                {
                    "name": "viewManager",
                    "description": "The application's view manager",
                    "type": "Lavaca.mvc.ViewManager",
                    "optional": true
                }
            ]
        },
        "lavaca.mvc.AttributeEvent": {
            "name": "lavaca.mvc.AttributeEvent",
            "shortname": "lavaca.mvc.AttributeEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/mvc/Model.js",
            "line": 65,
            "description": "Event type used when an attribute is modified",
            "extends": "Event"
        },
        "lavaca.mvc.Model": {
            "name": "lavaca.mvc.Model",
            "shortname": "lavaca.mvc.Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/mvc/Model.js",
            "line": 91,
            "description": "Basic model type",
            "extends": "lavaca.events.EventDispatcher\n\nPlace the events where they are triggered in the code, see the yuidoc syntax reference and view.js for rendersuccess trigger",
            "itemtype": "event",
            "is_constructor": 1,
            "params": [
                {
                    "name": "map",
                    "description": "A parameter hash to apply to the model",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "lavaca.mvc.Route": {
            "name": "lavaca.mvc.Route",
            "shortname": "lavaca.mvc.Route",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/mvc/Route.js",
            "line": 62,
            "extends": "lavaca.util.Disposable\nA relationship between a URL pattern and a controller action",
            "is_constructor": 1,
            "params": [
                {
                    "name": "pattern",
                    "description": "The route URL pattern\n  Route URL patterns should be in the form /path/{foo}/path/{*bar}.\n  The path variables, along with query string parameters, will be passed\n  to the controller action as a params object. In this case, when passed\n  the URL /path/something/path/1/2/3?abc=def, the params object would be\n  {foo: 'something', bar: [1, 2, 3], abc: 'def'}.",
                    "type": "String"
                },
                {
                    "name": "TController",
                    "description": "The type of controller that performs the action\n  (Should derive from [[Lavaca.mvc.Controller]])",
                    "type": "Function"
                },
                {
                    "name": "action",
                    "description": "The name of the controller method to call",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Key-value pairs that will be merged into the params\n  object that is passed to the controller action",
                    "type": "Object"
                }
            ]
        },
        "lavaca.mvc.Router": {
            "name": "lavaca.mvc.Router",
            "shortname": "lavaca.mvc.Router",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/mvc/Router.js",
            "line": 7,
            "extends": "lavaca.util.Disposable\nURL manager",
            "is_constructor": 1,
            "params": [
                {
                    "name": "viewManager",
                    "description": "The view manager",
                    "type": "Lavaca.mvc.ViewManager"
                }
            ]
        },
        "lavaca.mvc.View": {
            "name": "lavaca.mvc.View",
            "shortname": "lavaca.mvc.View",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/mvc/View.js",
            "line": 16,
            "description": "Base View Class",
            "extends": "lavaca.events.EventDispatcher",
            "is_constructor": 1,
            "params": [
                {
                    "name": "el",
                    "description": "the selector or Object for the element to attach to the view",
                    "type": "Object | String"
                },
                {
                    "name": "model",
                    "description": "the model for the view",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "parentView",
                    "description": "the parent view for the view",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "el",
                    "description": "the selector or Object for the element to attach to the view",
                    "type": "Object | String"
                },
                {
                    "name": "model",
                    "description": "the model for the view",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "layer",
                    "description": "The layer on which the view sits (only applicable to views used as a PageView)",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "lavaca.mvc.ViewManager": {
            "name": "lavaca.mvc.ViewManager",
            "shortname": "lavaca.mvc.ViewManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/mvc/ViewManager.js",
            "line": 11,
            "description": "Manager responsible for drawing views",
            "extends": "lavaca.util.Disposable",
            "is_constructor": 1,
            "params": [
                {
                    "name": "el",
                    "description": "The element that contains all layers",
                    "type": "JQuery"
                }
            ]
        },
        "lavaca.net.Connectivity": {
            "name": "lavaca.net.Connectivity",
            "shortname": "lavaca.net.Connectivity",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/net/Connectivity.js",
            "line": 6,
            "description": "A utility type for working under different network connectivity situations."
        },
        "lavaca.net.History": {
            "name": "lavaca.net.History",
            "shortname": "lavaca.net.History",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/net/History.js",
            "line": 27,
            "description": "HTML5 history abstraction layer",
            "extends": "lavaca.events.EventDispatcher",
            "itemtype": "event",
            "is_constructor": 1
        },
        "lavaca.ui.LoadingIndicator": {
            "name": "lavaca.ui.LoadingIndicator",
            "shortname": "lavaca.ui.LoadingIndicator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/ui/LoadingIndicator.js",
            "line": 6,
            "description": "Type that shows/hides a loading indicator",
            "extends": "lavaca.ui.Widget",
            "is_constructor": 1,
            "params": [
                {
                    "name": "el",
                    "description": "The DOM element that is the root of the widget",
                    "type": "JQuery"
                }
            ]
        },
        "lavaca.ui.Widget": {
            "name": "lavaca.ui.Widget",
            "shortname": "lavaca.ui.Widget",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/ui/Widget.js",
            "line": 7,
            "description": "Base type for all UI elements",
            "extends": "lavaca.events.EventDispatcher",
            "is_constructor": 1,
            "params": [
                {
                    "name": "el",
                    "description": "The DOM element that is the root of the widget",
                    "type": "JQuery"
                }
            ]
        },
        "lavaca.util.Cache": {
            "name": "lavaca.util.Cache",
            "shortname": "lavaca.util.Cache",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/util/Cache.js",
            "line": 6,
            "description": "Object for storing data",
            "extends": "lavaca.util.Disposable"
        },
        "lavaca.util.Disposable": {
            "name": "lavaca.util.Disposable",
            "shortname": "lavaca.util.Disposable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/util/Disposable.js",
            "line": 29,
            "description": "Abstract type for types that need to ready themselves for GC",
            "is_constructor": 1
        },
        "lavaca.util.extend": {
            "name": "lavaca.util.extend",
            "shortname": "lavaca.util.extend",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/util/extend.js",
            "line": 2,
            "description": "Establishes inheritance between types. After a type is extended, it receives its own static\nconvenience method, extend(TSub, overrides)."
        },
        "lavaca.util.uuid": {
            "name": "lavaca.util.uuid",
            "shortname": "lavaca.util.uuid",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/util/uuid.js",
            "line": 4,
            "description": "Produces a app specific unique identifier"
        }
    },
    "classitems": [
        {
            "file": "src/env/Device.js",
            "line": 12,
            "description": "Indicates whether or not the app is being run through Cordova",
            "itemtype": "method",
            "name": "isCordova",
            "static": 1,
            "return": {
                "description": "True if app is being run through Cordova",
                "type": "Boolean"
            },
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/env/Device.js",
            "line": 23,
            "description": "Executes a callback when the device is ready to be used",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The handler to execute when the device is ready",
                    "type": "Function"
                }
            ],
            "class": "lavaca.env.Device"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 14,
            "description": "When true, do not fire events",
            "itemtype": "property",
            "name": "suppressEvents",
            "type": "Boolean",
            "default": "false",
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 22,
            "description": "Bind an event handler to this object",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to execute when the event occurs",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 30,
            "description": "Bind an event handler to this object",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to execute when the event occurs",
                    "type": "Function"
                },
                {
                    "name": "thisp",
                    "description": "The context of the handler",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 45,
            "description": "Unbinds all event handler from this object",
            "itemtype": "method",
            "name": "off",
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 51,
            "description": "Unbinds all event handlers for an event",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 58,
            "description": "Unbinds a specific event handler",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function handling the event",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 66,
            "description": "Unbinds a specific event handler",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function handling the event",
                    "type": "Function"
                },
                {
                    "name": "thisp",
                    "description": "The context of the handler",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 98,
            "description": "Dispatches an event",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event to dispatch",
                    "type": "String"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 105,
            "description": "Dispactches an event with additional parameters",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event to dispatch",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Additional data points to add to the event",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 127,
            "description": "Creates an event object",
            "itemtype": "method",
            "name": "createEvent",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event to create",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The event object",
                "type": "Object"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 134,
            "description": "Creates an event object with additional params",
            "itemtype": "method",
            "name": "createEvent",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event to create",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Additional data points to add to the event",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The event object",
                "type": "Object"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/events/EventDispatcher.js",
            "line": 151,
            "description": "Checks if two callbacks are the same",
            "itemtype": "method",
            "name": "_checkIfSameCallback (private)",
            "params": [
                {
                    "name": "a",
                    "description": "first function",
                    "type": "Function"
                },
                {
                    "name": "b",
                    "description": "function to compare a to",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "returns true or false",
                "type": "Boolean"
            },
            "class": "lavaca.events.EventDispatcher"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 39,
            "description": "Whether or not animations are supported by the browser",
            "itemtype": "method",
            "name": "isSupported",
            "static": 1,
            "return": {
                "description": "True if CSS keyframe animations are supported",
                "type": "Boolean"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 50,
            "description": "Gets the name of the animation end event",
            "itemtype": "method",
            "name": "animationEndEvent",
            "static": 1,
            "return": {
                "description": "The name of the event",
                "type": "String"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 61,
            "description": "Converts a list of keyframes to a CSS animation",
            "itemtype": "method",
            "name": "keyframesToCSS",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the keyframe animation",
                    "type": "String"
                },
                {
                    "name": "keyframes",
                    "description": "A list of timestamped keyframes in the form {'0%': {color: 'red'}, '100%': 'color: blue'}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The CSS keyframe animation declaration",
                "type": "String"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 97,
            "description": "Generates a keyframe animation",
            "itemtype": "method",
            "name": "generateKeyframes",
            "static": 1,
            "params": [
                {
                    "name": "keyframes",
                    "description": "A list of timestamped keyframes in the form {'0%': {color: 'red'}, '100%': 'color: blue'}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The name fo the animation",
                "type": "String"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 105,
            "description": "Generates a keyframe animation",
            "itemtype": "method",
            "name": "generateKeyframes",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the animation",
                    "type": "String"
                },
                {
                    "name": "keyframes",
                    "description": "A list of timestamped keyframes in the form {'0%': {color: 'red'}, '100%': 'color: blue'}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The name fo the animation",
                "type": "String"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 123,
            "description": "Gets the name of the animation CSS property",
            "itemtype": "method",
            "name": "cssProperty",
            "static": 1,
            "return": {
                "description": "The name of the CSS property",
                "type": "String"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 134,
            "description": "Applies a keyframe animation to an element",
            "itemtype": "method",
            "name": "$.fn.keyframe",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the animation",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options for the animation",
                    "type": "Object"
                }
            ],
            "opt": "{Function} complete  A function to execute when the animation has completed",
            "default": "null",
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 155,
            "description": "Applies a keyframe animation to an element",
            "itemtype": "method",
            "name": "$.fn.keyframe",
            "params": [
                {
                    "name": "keyframes",
                    "description": "A list of timestamped keyframes in the form {'0%': {color: 'red'}, '100%': 'color: blue'}",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "Options for the animation",
                    "type": "Object"
                }
            ],
            "opt": "{Function} complete  A function to execute when the animation has completed",
            "default": "null",
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 178,
            "description": "Applies a keyframe animation to an element",
            "itemtype": "method",
            "name": "$.fn.keyframe",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the animation",
                    "type": "String"
                },
                {
                    "name": "duration",
                    "description": "The number of milliseconds that the animation lasts",
                    "type": "Number"
                },
                {
                    "name": "easing",
                    "description": "The name of a CSS easing function",
                    "type": "String"
                },
                {
                    "name": "delay",
                    "description": "The number of milliseconds before the animation should start",
                    "type": "Number"
                },
                {
                    "name": "iterations",
                    "description": "Either the number of iterations to play the animation or 'infinite'",
                    "type": "Object"
                },
                {
                    "name": "direction",
                    "description": "The name of a CSS animation direction",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A function to execute when the animation has completed",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 192,
            "description": "Applies a keyframe animation to an element",
            "itemtype": "method",
            "name": "$.fn.keyframe",
            "params": [
                {
                    "name": "keyframes",
                    "description": "A list of timestamped keyframes in the form {'0%': {color: 'red'}, '100%': 'color: blue'}",
                    "type": "Object"
                },
                {
                    "name": "duration",
                    "description": "The number of milliseconds that the animation lasts",
                    "type": "Number"
                },
                {
                    "name": "easing",
                    "description": "The name of a CSS easing function",
                    "type": "String"
                },
                {
                    "name": "delay",
                    "description": "The number of milliseconds before the animation should start",
                    "type": "Number"
                },
                {
                    "name": "iterations",
                    "description": "Either the number of iterations to play the animation or 'infinite'",
                    "type": "Object"
                },
                {
                    "name": "direction",
                    "description": "The name of a CSS animation direction",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A function to execute when the animation has completed",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 244,
            "description": "Binds an animation end handler to an element.",
            "itemtype": "method",
            "name": "$.fn.animationEnd",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback for when the animation ends",
                    "type": "Function"
                },
                {
                    "name": "delegate",
                    "description": "Selector for the descendant elements to which the handler will be bound",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback for when the animation ends",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 267,
            "description": "Binds an animation end handler to an element's next animation end event",
            "itemtype": "method",
            "name": "$.fn.nextAnimationEnd",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback for when the animation ends",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Animation.js",
            "line": 274,
            "description": "Binds an animation end handler to an element's next animation end event",
            "itemtype": "method",
            "name": "$.fn.nextAnimationEnd",
            "params": [
                {
                    "name": "delegate",
                    "description": "Selector for the descendant elements to which the handler will be bound",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback for when the animation ends",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Animation"
        },
        {
            "file": "src/fx/Spring.js",
            "line": 412,
            "description": "Applies a spring keyframe animation to an element",
            "itemtype": "method",
            "name": "$.fn.spring",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the animation",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "springOptions",
                    "description": "Options for the spring",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "tension",
                            "description": "Positive integer representing the tension on the spring. Default is 50",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "friction",
                            "description": "Positive integer representing the friction of the spring. Default is 2",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "initialState",
                            "description": "Initial transform values. If element has previously been transformed with a spring, the initialState values will be merged into the result of the previous transformation.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "scale",
                                    "description": "Unitless number N that will be represented in CSS as scale3d(n,n,n)",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "scale",
                                    "description": "Object with `x`, `y`, and `z` properties as numbers that will be represented in CSS as scale3d(x,y,z).  If any properties are not specified, they default to 1.",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "translate",
                                    "description": "Number N that will be represented in CSS as translate3d(Npx,Npx,Npx)",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "translate",
                                    "description": "Object with `x`, `y`, and `z` properties as numbers that will be represented in CSS as translate3d(xpx,ypx,zpx).  If any properties are not specified, they default to 0.",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "rotate",
                                    "description": "Number N that will be represented in CSS as rotateZ(Ndeg)",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "rotate",
                                    "description": "Object with `x`, `y`, and `z` properties as numbers that will be represented in CSS as rotateX(xdeg) rotateY(ydeg) rotateZ(zdeg).  If any properties are not specified, they default to 0.",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "skew",
                                    "description": "Number N that will be represented in CSS as skewX(Ndeg) skewY(Ndeg)",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "skew",
                                    "description": "Object with `x` and `y` properties as numbers that will be represented in CSS as skewX(xdeg) skewY(ydeg).  If any properties are not specified, they default to 0.",
                                    "type": "Object",
                                    "optional": true
                                },
                                {
                                    "name": "perspective",
                                    "description": "Unitless number N that will be represented in CSS as perspective(Npx)",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "differences",
                            "description": "Differences between initial and final transform values. Same format as `initialState`",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "resultState",
                            "description": "Final transform values. Same format as `initialState`. If `differences` are also specified, `resultState` will be ignored",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "keyframeOptions",
                    "description": "Options for the animation",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "duration",
                            "description": "The number of milliseconds that the animation lasts",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "easing",
                            "description": "The name of a CSS easing function",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "delay",
                            "description": "The number of milliseconds before the animation should start",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "iterations",
                            "description": "Either the number of iterations to play the animation or 'infinite'",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "direction",
                            "description": "The name of a CSS animation direction",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "fillMode",
                            "description": "The name of a CSS animation fill-mode",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "complete",
                            "description": "A function to execute when the animation has completed",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "default": "null",
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Spring"
        },
        {
            "file": "src/fx/Transform.js",
            "line": 92,
            "description": "Whether or not transforms are supported by the browser",
            "itemtype": "method",
            "name": "isSupported",
            "static": 1,
            "return": {
                "description": "True when transforms are supported",
                "type": "Boolean"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/fx/Transform.js",
            "line": 103,
            "description": "Whether or not 3D transforms are supported by the browser",
            "itemtype": "method",
            "name": "is3dSupported",
            "static": 1,
            "return": {
                "description": "True when 3D transforms are supported",
                "type": "Boolean"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/fx/Transform.js",
            "line": 114,
            "description": "Converts a transform hash into a CSS string",
            "itemtype": "method",
            "name": "toCSS",
            "static": 1,
            "params": [
                {
                    "name": "opts",
                    "description": "A hash of CSS transform values, with properties in\n     the form {translateX: 1, translateY: 1} or {translate: {x: 1, y: 1}}",
                    "type": "Object"
                }
            ],
            "opt": "{String} perspective  A string containing the perspective transform values",
            "return": {
                "description": "The generated CSS string",
                "type": "String"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/fx/Transform.js",
            "line": 157,
            "description": "Gets the name of the transform CSS property",
            "itemtype": "method",
            "name": "cssProperty",
            "static": 1,
            "return": {
                "description": "The name of the CSS property",
                "type": "String"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/fx/Transform.js",
            "line": 168,
            "description": "Transforms an element",
            "itemtype": "method",
            "name": "$.fn.transform",
            "params": [
                {
                    "name": "value",
                    "description": "The CSS transform string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/fx/Transform.js",
            "line": 175,
            "description": "Transforms an element",
            "itemtype": "method",
            "name": "$.fn.transform",
            "params": [
                {
                    "name": "opt",
                    "description": "A hash of CSS transform values, with properties in\n     the form {translateX: 1, translateY: 1} or {translate: {x: 1, y: 1}}",
                    "type": "Object"
                }
            ],
            "opt": "{String} perspective  A string containing the perspective transform values",
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/fx/Transform.js",
            "line": 204,
            "description": "Transforms an element",
            "itemtype": "method",
            "name": "$.fn.transform",
            "params": [
                {
                    "name": "value",
                    "description": "The CSS transform string",
                    "type": "String"
                },
                {
                    "name": "origin",
                    "description": "The CSS transform origin",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/fx/Transform.js",
            "line": 212,
            "description": "Transforms an element",
            "itemtype": "method",
            "name": "$.fn.transform",
            "params": [
                {
                    "name": "opt",
                    "description": "A hash of CSS transform values, with properties in\n     the form {translateX: 1, translateY: 1} or {translate: {x: 1, y: 1}}",
                    "type": "Object"
                },
                {
                    "name": "origin",
                    "description": "The CSS transform origin",
                    "type": "String"
                }
            ],
            "opt": "{String} perspective  A string containing the perspective transform values",
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/fx/Transform.js",
            "line": 242,
            "description": "Transforms an element",
            "itemtype": "method",
            "name": "$.fn.transform",
            "params": [
                {
                    "name": "value",
                    "description": "The CSS transform string",
                    "type": "String"
                },
                {
                    "name": "origin",
                    "description": "The CSS transform origin, in the form {x: N, y: N},\n     where N is a decimal percentage between -1 and 1 or N is a pixel value > 1 or < -1.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/fx/Transform.js",
            "line": 251,
            "description": "Transforms an element",
            "itemtype": "method",
            "name": "$.fn.transform",
            "params": [
                {
                    "name": "opt",
                    "description": "A hash of CSS transform values, with properties in\n     the form {translateX: 1, translateY: 1} or {translate: {x: 1, y: 1}}",
                    "type": "Object"
                },
                {
                    "name": "origin",
                    "description": "The CSS transform origin, in the form {x: N, y: N},\n     where N is a decimal percentage between -1 and 1 or N is a pixel value > 1 or < -1.",
                    "type": "Object"
                }
            ],
            "opt": "{String} perspective  A string containing the perspective transform values",
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transform"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 36,
            "description": "Whether or not transitions are supported by the browser",
            "itemtype": "method",
            "name": "isSupported",
            "static": 1,
            "return": {
                "description": "True when CSS transitions are supported",
                "type": "Boolean"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 47,
            "description": "Generates a CSS transition property string from several values",
            "itemtype": "method",
            "name": "toCSS",
            "static": 1,
            "params": [
                {
                    "name": "props",
                    "description": "A hash in which the keys are the names of the CSS properties",
                    "type": "Object"
                },
                {
                    "name": "duration",
                    "description": "The amount of time in milliseconds that the transition lasts",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The generated CSS string",
                "type": "String"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 56,
            "description": "Generates a CSS transition property string from several values",
            "itemtype": "method",
            "name": "toCSS",
            "static": 1,
            "params": [
                {
                    "name": "props",
                    "description": "An array of CSS property names",
                    "type": "Array"
                },
                {
                    "name": "duration",
                    "description": "The amount of time in milliseconds that the transition lasts",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The generated CSS string",
                "type": "String"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 65,
            "description": "Generates a CSS transition property string from several values",
            "itemtype": "method",
            "name": "toCSS",
            "static": 1,
            "params": [
                {
                    "name": "props",
                    "description": "A hash in which the keys are the names of the CSS properties",
                    "type": "Object"
                },
                {
                    "name": "duration",
                    "description": "The amount of time in milliseconds that the transition lasts",
                    "type": "Number"
                },
                {
                    "name": "easing",
                    "description": "The interpolation for the transition",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The generated CSS string",
                "type": "String"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 75,
            "description": "Generates a CSS transition property string from several values",
            "itemtype": "method",
            "name": "toCSS",
            "static": 1,
            "params": [
                {
                    "name": "props",
                    "description": "An array of CSS property names",
                    "type": "Array"
                },
                {
                    "name": "duration",
                    "description": "The amount of time in milliseconds that the transition lasts",
                    "type": "Number"
                },
                {
                    "name": "easing",
                    "description": "The interpolation for the transition",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The generated CSS string",
                "type": "String"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 99,
            "description": "Gets the name of the transition CSS property",
            "itemtype": "method",
            "name": "cssProperty",
            "static": 1,
            "return": {
                "description": "The name of the CSS property",
                "type": "String"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 110,
            "description": "Gets the name of the transition end event",
            "itemtype": "method",
            "name": "transitionEndEvent",
            "static": 1,
            "return": {
                "description": "The name of the event",
                "type": "String"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 121,
            "description": "Causes an element to undergo a transition",
            "itemtype": "method",
            "name": "$.fn.transition",
            "params": [
                {
                    "name": "props",
                    "description": "The CSS property values at the end of the transition",
                    "type": "Object"
                },
                {
                    "name": "duration",
                    "description": "The amount of time in milliseconds that the transition lasts",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 129,
            "description": "Causes an element to undergo a transition",
            "itemtype": "method",
            "name": "$.fn.transition",
            "params": [
                {
                    "name": "props",
                    "description": "The CSS property values at the end of the transition",
                    "type": "Object"
                },
                {
                    "name": "duration",
                    "description": "The amount of time in milliseconds that the transition lasts",
                    "type": "Number"
                },
                {
                    "name": "easing",
                    "description": "The interpolation for the transition",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 138,
            "description": "Causes an element to undergo a transition",
            "itemtype": "method",
            "name": "$.fn.transition",
            "params": [
                {
                    "name": "props",
                    "description": "The CSS property values at the end of the transition",
                    "type": "Object"
                },
                {
                    "name": "duration",
                    "description": "The amount of time in milliseconds that the transition lasts",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "A function to execute when the transition completes",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 147,
            "description": "Causes an element to undergo a transition",
            "itemtype": "method",
            "name": "$.fn.transition",
            "params": [
                {
                    "name": "props",
                    "description": "The CSS property values at the end of the transition",
                    "type": "Object"
                },
                {
                    "name": "duration",
                    "description": "The amount of time in milliseconds that the transition lasts",
                    "type": "Number"
                },
                {
                    "name": "easing",
                    "description": "The interpolation for the transition",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "A function to execute when the transition completes",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 180,
            "description": "Binds a transition end handler to an element.",
            "itemtype": "method",
            "name": "$.fn.transitionEnd",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback for when the transition ends",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 187,
            "description": "Binds a transition end handler to an element.",
            "itemtype": "method",
            "name": "$.fn.transitionEnd",
            "params": [
                {
                    "name": "delegate",
                    "description": "Selector for the descendant elements to which the handlers will be bound",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback for when the transition ends",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 203,
            "description": "Binds a transition end handler to an element's next transition end event.",
            "itemtype": "method",
            "name": "$.fn.nextTransitionEnd",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback for when the transition ends",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/fx/Transition.js",
            "line": 210,
            "description": "Binds a transition end handler to an element's next transition end event.",
            "itemtype": "method",
            "name": "$.fn.nextTransitionEnd",
            "params": [
                {
                    "name": "delegate",
                    "description": "Selector for the descendant elements to which the handlers will be bound",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback for when the transition ends",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The jQuery object, for chaining",
                "type": "JQuery"
            },
            "class": "lavaca.fx.Transition"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 45,
            "description": "Creates an application",
            "is_constructor": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "A callback to execute when the application is initialized but not yet ready",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 59,
            "description": "The default URL that the app will navigate to",
            "itemtype": "property",
            "name": "initRoute",
            "default": "'/'",
            "type": "String",
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 68,
            "description": "The default state object to supply the initial route",
            "itemtype": "property",
            "name": "initState",
            "default": "null",
            "type": "{Object}",
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 76,
            "description": "The default params object to supply the initial route",
            "itemtype": "property",
            "name": "initParams",
            "default": "null",
            "type": "{Object}",
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 85,
            "description": "The selector used to identify the DOM element that will contain views",
            "itemtype": "property",
            "name": "viewRootSelector",
            "default": "#view-root",
            "type": "{String}",
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 94,
            "description": "Handler for when the user attempts to navigate to an invalid route",
            "itemtype": "method",
            "name": "onInvalidRoute",
            "params": [
                {
                    "name": "err",
                    "description": "The routing error",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 107,
            "description": "Handler for when the user taps on a <A> element",
            "itemtype": "method",
            "name": "onTapLink",
            "params": [
                {
                    "name": "e",
                    "description": "The event object",
                    "type": "Event"
                }
            ],
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 160,
            "description": "Initializes the application",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "args",
                    "description": "Data of any type from a resolved promise returned by Application.beforeInit(). Defaults to null.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise that resolves when the application is ready for use",
                "type": "Promise"
            },
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 169,
            "description": "View manager used to transition between UI states",
            "itemtype": "property",
            "name": "viewManager",
            "default": "null",
            "type": "{Lavaca.mvc.ViewManager}",
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 177,
            "description": "Router used to manage application traffic and URLs",
            "itemtype": "property",
            "name": "router",
            "default": "null",
            "type": "{Lavaca.mvc.Router}",
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 205,
            "description": "Binds a global link handler",
            "itemtype": "method",
            "name": "bindLinkHandler",
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 221,
            "description": "Gets initial route based on query string returned by server 302 redirect",
            "itemtype": "property",
            "name": "initialStandardRoute",
            "default": "null",
            "type": "{String}",
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Application.js",
            "line": 231,
            "description": "Handles asynchronous requests that need to happen before Application.init() is called in the constructor",
            "itemtype": "method",
            "name": "beforeInit",
            "type": "String",
            "return": {
                "description": "A promise",
                "type": "Promise"
            },
            "class": "lavaca.mvc.Application"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 86,
            "description": "The type of model object to use for items in this collection",
            "itemtype": "property",
            "name": "TModel",
            "default": "[[Lavaca.mvc.Model]]",
            "type": "Function",
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 95,
            "description": "The name of the property containing the collection's items when using toObject()",
            "itemtype": "property",
            "name": "itemsProperty",
            "default": "'items'",
            "type": "String",
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 103,
            "description": "Whether to allow duplicated IDs in collection items. If false, a later added item will overwrite the one with same ID.",
            "itemtype": "property",
            "name": "allowDuplicatedIds",
            "default": "false",
            "type": "Boolean",
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 111,
            "description": "Removes and disposes of all models in the collection",
            "itemtype": "method",
            "name": "clear",
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 121,
            "description": "clears only the models in the collection",
            "itemtype": "method",
            "name": "clearModels",
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 138,
            "description": "Readies data to be an item in the collection",
            "itemtype": "method",
            "name": "prepare",
            "params": [
                {
                    "name": "data",
                    "description": "The model or object to be added",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The model derived from the data",
                "type": "Lavaca.mvc.Model"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 159,
            "description": "Determines whether or not an attribute can be assigned",
            "itemtype": "method",
            "name": "canSet",
            "params": [
                {
                    "name": "attribute",
                    "description": "The name of the attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if you can assign to the attribute",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 169,
            "description": "Inserts one or more items into the collection at the specified index",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "insertIndex",
                    "description": "index at which items will be inserted",
                    "type": "Number"
                },
                {
                    "name": "newItems",
                    "description": "Array of objects or Models to insert",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "false if no items were able to be added, true otherwise.",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 177,
            "description": "Inserts one or more items into the collection at the specified index",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "insertIndex",
                    "description": "index at which items will be inserted",
                    "type": "Number"
                },
                {
                    "name": "items",
                    "description": "One or more objects or Models to insert",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "false if no items were able to be added, true otherwise.",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 228,
            "description": "Adds one or more items to the collection. Items with IDs matching an item already in this collection will replace instead of add.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "item",
                    "description": "One or more items to add to the collection",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if an item was added, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 235,
            "description": "Adds one or more items to the collection. Items with IDs matching an item already in this collection will replace instead of add.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "items",
                    "description": "An array of items to add to the collection",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "True if an item was added, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 249,
            "description": "Moves an item",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "model",
                    "description": "The model to move",
                    "type": "Lavaca.mvc.Model"
                },
                {
                    "name": "newIndex",
                    "description": "The new index at which the model should be placed",
                    "type": "Number"
                }
            ],
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 257,
            "description": "Moves an item",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "oldIndex",
                    "description": "The current index of the model",
                    "type": "Number"
                },
                {
                    "name": "newIndex",
                    "description": "The new index at which the model should be placed",
                    "type": "Number"
                }
            ],
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 280,
            "description": "Removes an item from the collection",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the model to remove",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if an item was removed, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 287,
            "description": "Removes an item from the collection",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "item",
                    "description": "The models to remove from the collection",
                    "type": "Lavaca.mvc.Model"
                }
            ],
            "return": {
                "description": "True if an item was removed, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 294,
            "description": "Removes an item from the collection",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "item",
                    "description": "One object containing attributes matching any models to remove",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if at least one item was removed, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 301,
            "description": "Removes an item from the collection",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "item",
                    "description": "N number of object arguments containing attributes matching any models to remove",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An array of booleans indicating if at least one item was removed by matching each argument",
                "type": "Array"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 308,
            "description": "Removes an item from the collection",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "items",
                    "description": "An array of objects containing attributes matching any models to remove",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array of booleans indicating if at least one item was removed by matching each element in the array",
                "type": "Array"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 314,
            "description": "Removes an item from the collection",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "test",
                    "description": "A function to check each model in the collection in the form\n    test(index, model). If the test function returns true, the model will be removed",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "True if at least one item was removed, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 376,
            "description": "Compiles a list of items matching an attribute hash",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "The",
                    "description": "attributes to test against each model",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A list of this collection's models that matched the attributes",
                "type": "Array"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 383,
            "description": "Compiles a list of items matching an attribute hash",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "attributes",
                    "description": "The attributes to test against each model",
                    "type": "Object"
                },
                {
                    "name": "maxResults",
                    "description": "The maximum number of results to return",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A list of this collection's models that matched the attributes",
                "type": "Array"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 391,
            "description": "Compiles a list of items matching an attribute hash",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "test",
                    "description": "A function to check each model in the collection in the form\n    test(index, model). If the test function returns true, the model will be included\n    in the result",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A list of this collection's models that passed the test",
                "type": "Array"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 401,
            "description": "Compiles a list of items matching an attribute hash",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "test",
                    "description": "A function to check each model in the collection in the form\n    test(index, model). If the test function returns true, the model will be included\n    in the result",
                    "type": "Function"
                },
                {
                    "name": "maxResults",
                    "description": "The maximum number of results to return",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A list of this collection's models that passed the test",
                "type": "Array"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 438,
            "description": "Finds the first item matching an attribute hash",
            "itemtype": "method",
            "name": "first",
            "params": [
                {
                    "name": "attributes",
                    "description": "The attributes to test against each model",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The first model that matched the attributes (or null)",
                "type": "Lavaca.mvc.Model"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 445,
            "description": "Finds the first item that passed a functional test",
            "itemtype": "method",
            "name": "first",
            "params": [
                {
                    "name": "test",
                    "description": "A function to check each model in the collection in the form\n    test(index, model). If the test function returns true, the model will be included\n    as the result",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The first model that passed the test (or null)",
                "type": "Lavaca.mvc.Model"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 457,
            "description": "Finds the index of the first item matching an attribute hash",
            "itemtype": "method",
            "name": "indexOf",
            "sig": "Finds the index of the first item matching an attribute hash",
            "params": [
                {
                    "name": "attributes",
                    "description": "The attributes to test against each model",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Index of the matching model, or -1 if no match is found",
                "type": "Number"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 466,
            "description": "Finds the index of the first item that passed a functional test",
            "itemtype": "method",
            "name": "indexOf",
            "params": [
                {
                    "name": "test",
                    "description": "A function to check each model in the collection in the form\n    test(index, model). If the test function returns true, the model will be included\n    as the result",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Index of the matching model, or -1 if no match is found",
                "type": "Number"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 478,
            "description": "Gets the item at a specific index",
            "itemtype": "method",
            "name": "itemAt",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the item",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The model at that index",
                "type": "Lavaca.mvc.Model"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 488,
            "description": "Gets the number of items in the collection",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "The number of items in the collection",
                "type": "Number"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 497,
            "description": "Executes a callback for each model in the collection. To stop iteration immediately,\nreturn false from the callback.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "callback",
                    "description": "A function to execute for each item, callback(index, model)",
                    "type": "Function"
                }
            ],
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 504,
            "description": "Executes a callback for each model in the collection. To stop iteration immediately,\nreturn false from the callback.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "callback",
                    "description": "A function to execute for each item, callback(index, model)",
                    "type": "Function"
                },
                {
                    "name": "thisp",
                    "description": "The context of the callback",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 522,
            "description": "Sorts the models in the collection using the specified attribute, in ascending order.",
            "itemtype": "method",
            "name": "sort",
            "params": [
                {
                    "name": "attribute",
                    "description": "Attribute to sort by",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The updated collection (for chaining)",
                "type": "Lavaca.mvc.Collection"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 529,
            "description": "Sorts the models in the collection using the specified attribute, in either ascending or descending order.",
            "itemtype": "method",
            "name": "sort",
            "params": [
                {
                    "name": "attribute",
                    "description": "Attribute to sort by",
                    "type": "String"
                },
                {
                    "name": "descending",
                    "description": "Use descending sort. Defaults to false",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The updated collection (for chaining)",
                "type": "Lavaca.mvc.Collection"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 538,
            "description": "Sorts the models in the collection according to the specified compare function.",
            "itemtype": "method",
            "name": "sort",
            "params": [
                {
                    "name": "compareFunction",
                    "description": "A function that compares two models. It should work\n    in the same manner as the default Array.sort method in javascript.  i.e. the function\n    should have a signature of function(modelA, modelB) and should return a negative integer\n    if modelA should come before modelB, a positive integer if modelB should come before modelA\n    and integer 0 if modelA and modelB are equivalent.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The updated collection (for chaining)",
                "type": "Lavaca.mvc.Collection"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 569,
            "description": "Reverses the order of the models in the collection",
            "itemtype": "method",
            "name": "reverse",
            "return": {
                "description": "The updated collection (for chaining)",
                "type": "Lavaca.mvc.Collection"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 593,
            "description": "Handler invoked when an item in the collection has an event. Triggers an [[Lavaca.mvc.ItemEvent]].",
            "itemtype": "method",
            "name": "onItemEvent",
            "params": [
                {
                    "name": "e",
                    "description": "The item event",
                    "type": "Lavaca.mvc.ModelEvent"
                }
            ],
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 614,
            "description": "Converts this model to a key-value hash",
            "itemtype": "method",
            "name": "toObject",
            "params": [
                {
                    "name": "idOnly",
                    "description": "When true, only include item IDs for pre-existing items",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The key-value hash",
                "type": "Object"
            },
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Collection.js",
            "line": 632,
            "description": "Processes the data received from an object and apply it to self and the child models.",
            "itemtype": "method",
            "name": "deepApply",
            "params": [
                {
                    "name": "obj",
                    "description": "An object to apply to self and children",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.Collection"
        },
        {
            "file": "src/mvc/Controller.js",
            "line": 26,
            "description": "The application's router",
            "itemtype": "property",
            "name": "router",
            "type": "Lavaca.mvc.Router",
            "default": "null",
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/mvc/Controller.js",
            "line": 32,
            "description": "The application's view manager",
            "itemtype": "property",
            "name": "viewManager",
            "type": "Lavaca.mvc.ViewManager",
            "default": "null",
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/mvc/Controller.js",
            "line": 38,
            "description": "Loads a view",
            "itemtype": "method",
            "name": "view",
            "params": [
                {
                    "name": "cacheKey",
                    "description": "The key under which to cache the view",
                    "type": "String"
                },
                {
                    "name": "TView",
                    "description": "The type of view to load (should derive from [[Lavaca.mvc.View]])",
                    "type": "Function"
                },
                {
                    "name": "model",
                    "description": "The data object to pass to the view",
                    "type": "Object"
                },
                {
                    "name": "layer",
                    "description": "The integer indicating what UI layer the view sits on",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Promise"
            },
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/mvc/Controller.js",
            "line": 51,
            "description": "Adds a state to the browser history",
            "itemtype": "method",
            "name": "history",
            "params": [
                {
                    "name": "state",
                    "description": "A data object associated with the page state",
                    "type": "Object"
                },
                {
                    "name": "title",
                    "description": "The title of the page state",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The URL of the page state",
                    "type": "String"
                },
                {
                    "name": "useReplace",
                    "description": "The bool to decide if to remove previous history",
                    "type": "Boolean"
                }
            ],
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/mvc/Controller.js",
            "line": 68,
            "description": "Convenience method for formatting URLs",
            "itemtype": "method",
            "name": "url",
            "params": [
                {
                    "name": "str",
                    "description": "The URL string",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Format arguments to insert into the URL",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The formatted URL",
                "type": "String"
            },
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/mvc/Controller.js",
            "line": 80,
            "description": "Directs the user to another route",
            "itemtype": "method",
            "name": "redirect",
            "params": [
                {
                    "name": "str",
                    "description": "The URL string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Promise"
            },
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/mvc/Controller.js",
            "line": 88,
            "description": "Directs the user to another route",
            "itemtype": "method",
            "name": "redirect",
            "params": [
                {
                    "name": "str",
                    "description": "The URL string",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Format arguments to insert into the URL",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Promise"
            },
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/mvc/Controller.js",
            "line": 98,
            "description": "Readies the controller for garbage collection",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.mvc.Controller"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 70,
            "description": "The name of the event-causing attribute",
            "itemtype": "property",
            "name": "attribute",
            "type": "String",
            "default": "null",
            "class": "lavaca.mvc.AttributeEvent"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 75,
            "description": "The value of the attribute before the event",
            "itemtype": "property",
            "name": "previous",
            "type": "Object",
            "default": "null",
            "class": "lavaca.mvc.AttributeEvent"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 80,
            "description": "The value of the attribute after the event",
            "itemtype": "property",
            "name": "value",
            "type": "Object",
            "default": "null",
            "class": "lavaca.mvc.AttributeEvent"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 85,
            "description": "A list of validation messages the change caused",
            "itemtype": "property",
            "name": "messages",
            "type": "Array",
            "default": "[]",
            "class": "lavaca.mvc.AttributeEvent"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 124,
            "description": "When true, attributes are not validated",
            "itemtype": "property",
            "name": "suppressValidation",
            "default": "false",
            "type": "Boolean",
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 133,
            "description": "When true, changes to attributes are not tracked",
            "itemtype": "property",
            "name": "suppressTracking",
            "default": "false",
            "type": "Boolean",
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 142,
            "description": "Gets the value of a attribute",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "attribute",
                    "description": "The name of the attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value of the attribute, or null if there is no value",
                "type": "Object"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 158,
            "description": "Determines whether or not an attribute can be assigned",
            "itemtype": "method",
            "name": "canSet",
            "params": [
                {
                    "name": "attribute",
                    "description": "The name of the attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if you can assign to the attribute",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 168,
            "description": "Sets the value of the attribute, if it passes validation",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "attribute",
                    "description": "The name of the attribute",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if attribute was set, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 177,
            "description": "Sets the value of the attribute, if it passes validation",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "attribute",
                    "description": "The name of the attribute",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value",
                    "type": "Object"
                },
                {
                    "name": "flag",
                    "description": "A metadata flag describing the attribute",
                    "type": "String"
                },
                {
                    "name": "suppress",
                    "description": "When true, validation, events and tracking are suppressed",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "True if attribute was set, false otherwise",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 217,
            "description": "Determines whether or not this model has a named attribute",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "attribute",
                    "description": "The name of the attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if the attribute exists and has a value",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 227,
            "description": "The name of the ID attribute",
            "itemtype": "property",
            "name": "id",
            "default": "'id'",
            "type": "String",
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 236,
            "description": "Gets the ID of the model",
            "itemtype": "method",
            "name": "id",
            "return": {
                "description": "The ID of the model",
                "type": "String"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 245,
            "description": "Determines whether or not this model has been saved before",
            "itemtype": "method",
            "name": "isNew",
            "return": {
                "description": "True when the model has no ID associated with it",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 254,
            "description": "Ensures that a map is suitable to be applied to this model",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "map",
                    "description": "The string or key-value hash to parse",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The parsed version of the map",
                "type": "Object"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 267,
            "description": "Sets each attribute of this model according to the map",
            "itemtype": "method",
            "name": "apply",
            "params": [
                {
                    "name": "map",
                    "description": "The string or key-value map to parse and apply",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 273,
            "description": "Sets each attribute of this model according to the map",
            "itemtype": "method",
            "name": "apply",
            "params": [
                {
                    "name": "map",
                    "description": "The string or key-value map to parse and apply",
                    "type": "Object"
                },
                {
                    "name": "suppress",
                    "description": "When true, validation, events and tracking are suppressed",
                    "type": "Boolean"
                }
            ],
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 288,
            "description": "Removes all data from the model or removes selected flag from model.",
            "itemtype": "method",
            "name": "clear",
            "sig": "Removes all flagged data from the model",
            "params": [
                {
                    "name": "flag",
                    "description": "The metadata flag describing the data to remove",
                    "type": "String"
                }
            ],
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 318,
            "description": "Makes a copy of this model",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "The copy",
                "type": "Lavaca.mvc.Model"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 327,
            "description": "Adds a validation rule to this model",
            "itemtype": "method",
            "name": "addRule",
            "params": [
                {
                    "name": "attribute",
                    "description": "The name of the attribute to which the rule applies",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to use to validate the attribute, in the\n  form callback(attribute, value)",
                    "type": "Function"
                },
                {
                    "name": "message",
                    "description": "A text message used when a value fails the test",
                    "type": "String"
                }
            ],
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 339,
            "description": "Validates all attributes on the model",
            "itemtype": "method",
            "name": "validate",
            "return": {
                "description": "A map of attribute names to validation error messages",
                "type": "Object"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 345,
            "description": "Runs validation tests for a specific attribute",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "The",
                    "description": "name of the attribute to test",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A list of validation error messages",
                "type": "Array"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 352,
            "description": "Runs validation against a potential value for a attribute",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "attribute",
                    "description": "The name of the attribute",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The potential value for the attribute",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A list of validation error messages",
                "type": "Array"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 384,
            "description": "Converts this model to a key-value hash",
            "itemtype": "method",
            "name": "toObject",
            "return": {
                "description": "The key-value hash",
                "type": "Object"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 403,
            "description": "Converts this model to JSON",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "The JSON string representing the model",
                "type": "String"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 412,
            "description": "Bind an event handler to this object",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to execute when the event occurs",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 421,
            "description": "Bind an event handler to this object",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "attr",
                    "description": "An attribute to which to limit the scope of events",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to execute when the event occurs",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 430,
            "description": "Bind an event handler to this object",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to execute when the event occurs",
                    "type": "Function"
                },
                {
                    "name": "thisp",
                    "description": "The context of the handler",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 438,
            "description": "Bind an event handler to this object",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "attr",
                    "description": "An attribute to which to limit the scope of events",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to execute when the event occurs",
                    "type": "Function"
                },
                {
                    "name": "thisp",
                    "description": "The context of the handler",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This event dispatcher (for chaining)",
                "type": "Lavaca.events.EventDispatcher"
            },
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 463,
            "field": "{String} SENSITIVE",
            "static": 1,
            "default": "'sensitive'\nFlag indicating that data is sensitive",
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Model.js",
            "line": 470,
            "field": "{String} DO_NOT_COMPUTE",
            "static": 1,
            "default": "'do_not_compute'\nFlag indicating that the selected attribute should not be executed\nas a computed property and should instead just return the function.",
            "class": "lavaca.mvc.Model"
        },
        {
            "file": "src/mvc/Route.js",
            "line": 87,
            "description": "Tests if this route applies to a URL",
            "itemtype": "method",
            "name": "matches",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to test",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True when this route matches the URL",
                "type": "Boolean"
            },
            "class": "lavaca.mvc.Route"
        },
        {
            "file": "src/mvc/Route.js",
            "line": 97,
            "description": "Converts a URL into a params object according to this route's pattern",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to convert",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The params object",
                "type": "Object"
            },
            "class": "lavaca.mvc.Route"
        },
        {
            "file": "src/mvc/Route.js",
            "line": 148,
            "description": "Executes this route's controller action see if work",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "url",
                    "description": "The URL that supplies parameters to this route",
                    "type": "String"
                },
                {
                    "name": "router",
                    "description": "The router used by the application",
                    "type": "Lavaca.mvc.Router"
                },
                {
                    "name": "viewManager",
                    "description": "The view manager used by the application",
                    "type": "Lavaca.mvc.ViewManager"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Promise"
            },
            "class": "lavaca.mvc.Route"
        },
        {
            "file": "src/mvc/Route.js",
            "line": 157,
            "description": "Executes this route's controller action see if work",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "url",
                    "description": "The URL that supplies parameters to this route",
                    "type": "String"
                },
                {
                    "name": "router",
                    "description": "The router used by the application",
                    "type": "Lavaca.mvc.Router"
                },
                {
                    "name": "viewManager",
                    "description": "The view manager used by the application",
                    "type": "Lavaca.mvc.ViewManager"
                },
                {
                    "name": "state",
                    "description": "A history record object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Promise"
            },
            "class": "lavaca.mvc.Route"
        },
        {
            "file": "src/mvc/Route.js",
            "line": 167,
            "description": "Executes this route's controller action see if work",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "url",
                    "description": "The URL that supplies parameters to this route",
                    "type": "String"
                },
                {
                    "name": "router",
                    "description": "The router used by the application",
                    "type": "Lavaca.mvc.Router"
                },
                {
                    "name": "viewManager",
                    "description": "The view manager used by the application",
                    "type": "Lavaca.mvc.ViewManager"
                },
                {
                    "name": "state",
                    "description": "A history record object",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Additional parameters to pass to the controller action",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Promise"
            },
            "class": "lavaca.mvc.Route"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 17,
            "field": "{Array} routes",
            "default": "[]\nThe [[Lavaca.mvc.Route]]s used by this router",
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 23,
            "field": "{Lavaca.mvc.ViewManager} viewManager",
            "default": "null\nThe view manager used by this router",
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 31,
            "field": "{Boolean} locked",
            "default": "false\nWhen true, the router is prevented from executing a route",
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 37,
            "field": "{Boolean} hasNavigated",
            "default": "false\nWhether or not this router has been used to navigate",
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 43,
            "field": "{Boolean} runAuthenticationCheck",
            "default": "false\nWhen true, this runs the defined authentication function\nset in this.setAuth() before executing a route.",
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 63,
            "description": "Sets the viewManager property on the instance which is the view manager used by this router",
            "itemtype": "method",
            "name": "setEl",
            "params": [
                {
                    "name": "viewManager",
                    "description": "",
                    "type": "Lavaca.mvc.ViewManager"
                }
            ],
            "return": {
                "description": "This Router instance",
                "type": "Lavaca.mvc.Router"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 74,
            "description": "Adds multiple routes",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "map",
                    "description": "A hash in the form {pattern: [TController, action, params]}\n  or {pattern: {controller: TController, action: action, params: params}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The router (for chaining)",
                "type": "Lavaca.mvc.Router"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 82,
            "description": "Adds a route",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "pattern",
                    "description": "The route URL pattern",
                    "type": "String"
                },
                {
                    "name": "TController",
                    "description": "The type of controller to perform the action (should derive from [[Lavaca.mvc.Controller]])",
                    "type": "Function"
                },
                {
                    "name": "action",
                    "description": "The name of the controller method to call",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The router (for chaining)",
                "type": "Lavaca.mvc.Router"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 91,
            "description": "Adds a route",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "pattern",
                    "description": "The route URL pattern",
                    "type": "String"
                },
                {
                    "name": "TController",
                    "description": "The type of controller to perform the action (should derive from [[Lavaca.mvc.Controller]])",
                    "type": "Function"
                },
                {
                    "name": "action",
                    "description": "The name of the controller method to call",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Key-value pairs that will be passed to the action",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The router (for chaining)",
                "type": "Lavaca.mvc.Router"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 121,
            "description": "Executes the action for a given URL",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "url",
                    "description": "The URL",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Promise"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 128,
            "description": "Executes the action for a given URL",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "url",
                    "description": "The URL",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "A history record object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Promise"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 136,
            "description": "Executes the action for a given URL",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "url",
                    "description": "The URL",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "A history record object",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Additional parameters to pass to the route",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Promise"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 187,
            "description": "Unlocks the router so that it can be used again",
            "itemtype": "method",
            "name": "unlock",
            "return": {
                "description": "This router (for chaining)",
                "type": "Lavaca.mvc.Router"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 197,
            "description": "Creates authentication check for routes",
            "itemtype": "method",
            "name": "setAuth",
            "params": [
                {
                    "name": "func",
                    "description": "A function to run for specific authentication. Must return a Promise.",
                    "type": "Function"
                },
                {
                    "name": "failRoute",
                    "description": "The route to execute if authentication fails.",
                    "type": "String"
                }
            ],
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 204,
            "description": "Creates authentication check for routes",
            "itemtype": "method",
            "name": "setAuth",
            "params": [
                {
                    "name": "func",
                    "description": "A function to run for specific authentication. Must return a Promise.",
                    "type": "Function"
                },
                {
                    "name": "failRoute",
                    "description": "The route to execute if authentication fails.",
                    "type": "String"
                },
                {
                    "name": "checkAuthForEveryRoute",
                    "description": "Sets the default behavior of whether to run authentication check for each route. If no value is passed, it defaults to true.",
                    "type": "Boolean"
                }
            ],
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 222,
            "description": "Readies the router for garbage collection",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 235,
            "description": "Checks if route exists and executes that route",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "url",
                    "description": "The URL",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Promise"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 242,
            "description": "Checks if route exists and executes that route",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "url",
                    "description": "The URL",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "A history record object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Promise"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/Router.js",
            "line": 250,
            "description": "Checks if route exists and executes that route",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "url",
                    "description": "The URL",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "A history record object",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Additional parameters to pass to the route",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Promise"
            },
            "class": "lavaca.mvc.Router"
        },
        {
            "file": "src/mvc/View.js",
            "line": 36,
            "description": "The model used by the view",
            "itemtype": "property",
            "name": "model",
            "default": "null",
            "optional": 1,
            "type": "lavaca.mvc.Model",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 46,
            "description": "An id is applied to a data property on the views container",
            "itemtype": "property",
            "name": "id",
            "default": "generated from className and unique identifier",
            "type": "String",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 56,
            "description": "If the view is created in the context of a childView, the parent view is assigned to this view",
            "itemtype": "property",
            "name": "parentView",
            "default": "null",
            "type": "Object",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 69,
            "description": "The element that is either assigned to the view if in the context of a childView, or is created for the View\nif it is a PageView",
            "itemtype": "property",
            "name": "el",
            "default": "null",
            "type": "Object | String",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 92,
            "description": "A dictionary of selectors and event types in the form\n{eventType: {delegate: 'xyz', callback: func}}@property el",
            "itemtype": "property",
            "name": "eventMap",
            "default": "{}",
            "type": "Object",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 101,
            "description": "An array of selectors and events in the form of\n{delegate:delegate, event:event, callback: callback}",
            "itemtype": "property",
            "name": "extEventMap",
            "default": "[]]",
            "type": "Array",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 110,
            "description": "A dictionary of selectors, View types and models in the form\n  {selector: {TView: TView, model: model}}}",
            "itemtype": "property",
            "name": "childViewMap",
            "type": "Object",
            "default": "{}",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 119,
            "description": "Interactive elements used by the view",
            "itemtype": "property",
            "name": "childViews",
            "default": "lavaca.util.cache",
            "type": "lavaca.util.Cache",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 126,
            "description": "A dictionary of selectors and widget types in the form\n  {selector: widgetType}",
            "itemtype": "property",
            "name": "widgetMap",
            "type": "Object",
            "default": "{}",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 134,
            "description": "Interactive elements used by the view",
            "itemtype": "property",
            "name": "widgets",
            "default": "lavaca.util.Cache",
            "type": "lavaca.util.Cache",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 141,
            "description": "A map of all the events to be applied to child Views in the form of\n{type: {TView: TView, callback : callback}}",
            "itemtype": "property",
            "name": "childViewEventMap",
            "default": "Object",
            "type": "Object",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 154,
            "description": "Will render any childViews automatically when set to true",
            "itemtype": "property",
            "name": "autoRender",
            "default": "false",
            "type": "Boolean",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 162,
            "description": "The name of the template associated with the view",
            "itemtype": "property",
            "name": "template",
            "type": "String",
            "default": "null",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 169,
            "description": "A class name added to the view container",
            "itemtype": "property",
            "name": "String className",
            "default": "null",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 178,
            "description": "The index of the layer on which the view sits",
            "itemtype": "property",
            "name": "layer",
            "type": "Number",
            "default": "0",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 185,
            "description": "Type of view, ex PageView, View",
            "itemtype": "property",
            "name": "String viewType",
            "default": "null",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 192,
            "description": "Reference to the ChildViewManager if one is mapped",
            "itemtype": "property",
            "name": "childViewManager",
            "type": "Lavaca.mvc.childViewManager",
            "default": "false",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 199,
            "description": "Generate the HTML to be used in render() and redraw() methods. Override\nfrom subclasses. Specified here rather than having subclasses override\nrender() directly in order for subclasses to get selector-specific\nrendering (in redraw()) for \"free\".",
            "params": [
                {
                    "name": "model",
                    "description": "The data model, guaranteed to be a plain object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The html to be rendered",
                "type": "String|lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 262,
            "description": "Renders the view's template and replaces the DOM nodes that match the\nselector argument. If no selector argument is provided, the whole view\nwill be rendered. If the first parameter is passed as <code>false</code>\nthe resulting html will pe passed with the promise and nothing will be\nreplaced.  Note: the number of elements that match the provided selector\nmust be identical in the current markup and in the newly rendered markup\nor else the returned promise will be rejected.",
            "itemtype": "method",
            "name": "redraw",
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 273,
            "description": "Renders the view's template using the specified model and redraws the\nentire view",
            "itemtype": "method",
            "name": "redraw",
            "params": [
                {
                    "name": "model",
                    "description": "The data model to be passed to the template",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 280,
            "description": "Renders the view's template using the view's model and only redraws the\nelements that match the specified selector string.\nNote: The numbers of items that match the selector must\nbe exactly the same in the view's current markup and in the newly rendered\nmarkup. If that is not the case, the returned promise will be rejected and\nnothing will be redrawn.",
            "itemtype": "method",
            "name": "redraw",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector string that defines elements to redraw",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 291,
            "description": "Renders the view's template using the specified model and only redraws the\nelements that match the specified selector string.\nNote: The numbers of items that match the selector must\nbe exactly the same in the view's current markup and in the newly rendered\nmarkup. If that is not the case, the returned promise will be rejected and\nnothing will be redrawn.",
            "itemtype": "method",
            "name": "redraw",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector string that defines elements that will be updated",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "The data model to be passed to the template",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 303,
            "description": "Renders the view's template using the view's model. If shouldRedraw is true,\nthe entire view will be redrawn. If shouldRedraw is false, nothing will be redrawn,\nbut the returned promise will be resolved with the newly rendered content. This allows\nthe caller to attach a success handler to the returned promise and define their own\nredrawing behavior.",
            "itemtype": "method",
            "name": "redraw",
            "params": [
                {
                    "name": "shouldRedraw",
                    "description": "Whether the view should be automatically redrawn.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 313,
            "description": "Renders the view's template using the specified model. If shouldRedraw is true,\nthe entire view will be redrawn. If shouldRedraw is false, nothing will be redrawn,\nbut the returned promise will be resolved with the newly rendered content. This allows\nthe caller to attach a success handler to the returned promise and define their own\nredrawing behavior.",
            "itemtype": "method",
            "name": "redraw",
            "params": [
                {
                    "name": "shouldRedraw",
                    "description": "Whether the view should be automatically redrawn.",
                    "type": "Boolean"
                },
                {
                    "name": "model",
                    "description": "The data model to be passed to the template",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 380,
            "description": "Dispose old widgets and child views",
            "itemtype": "method",
            "name": "disposeChildViews",
            "params": [
                {
                    "name": "$el",
                    "description": "the $el to search for child views and widgets in",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 404,
            "description": "Dispose old widgets and child views",
            "itemtype": "method",
            "name": "disposeWidgets",
            "params": [
                {
                    "name": "$el",
                    "description": "the $el to search for child views and widgets in",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 425,
            "description": "Unbinds events from the model",
            "itemtype": "method",
            "name": "clearModelEvents",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 452,
            "description": "Unbinds all extEvents",
            "itemtype": "method",
            "name": "clearExtEvents",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 464,
            "description": "Binds events to the view",
            "itemtype": "method",
            "name": "applyEvents",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 523,
            "description": "Maps multiple delegated events for the view",
            "itemtype": "method",
            "name": "mapEvent",
            "params": [
                {
                    "name": "map",
                    "description": "A hash of the delegates, event types, and handlers\n    that will be bound when the view is rendered. The map should be in\n    the form <code>{delegate: {eventType: callback}}</code>. For example,\n    <code>{'.button': {click: onClickButton}}</code>. The events defined in\n    [[Lavaca.fx.Animation]] and [[Lavaca.fx.Transition]] are also supported.\n    To map an event to the view's el, use 'self' as the delegate. To map\n    events to the view's model, use 'model' as the delegate. To limit events\n    to only a particular property on the model, use a period-seperated\n    syntax such as <code>{model: {'change.myproperty': myCallback}}</code>",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This view (for chaining)",
                "type": "lavaca.mvc.View"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 538,
            "description": "Maps an event for the view",
            "itemtype": "method",
            "name": "mapEvent",
            "params": [
                {
                    "name": "delegate",
                    "description": "The element to which to delegate the event",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "The type of event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The event handler",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This view (for chaining)",
                "type": "lavaca.mvc.View"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 569,
            "description": "Called from mapEvent to map an event to external objects that extend from EventDispatcher",
            "itemtype": "method",
            "name": "mapEvent",
            "params": [
                {
                    "name": "delegate",
                    "description": "The object/model to which to delegate the event",
                    "type": "Object"
                },
                {
                    "name": "events",
                    "description": "An object of the callback events",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 590,
            "description": "Initializes widgets on the view",
            "itemtype": "method",
            "name": "createWidgets",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 638,
            "description": "Assigns multiple widget types to elements on the view",
            "itemtype": "method",
            "name": "mapWidget",
            "params": [
                {
                    "name": "map",
                    "description": "A hash of selectors to bind widgets to when the view is rendered.\n    The map should be in the form {selector: [[Lavaca.ui.Widget]]} or\n    {selector: {TWidget: [[Lavaca.ui.Widget]], args: [optional arguments to pass to widget constructor]}}.\n    For example, {'form': Lavaca.ui.Form} or {'form': {TWidget: Lavaca.ui.Form, args: [...]}}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This view (for chaining)",
                "type": "Lavaca.mvc.View"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 648,
            "description": "Assigns a widget type to be created for elements matching a selector when the view is rendered",
            "itemtype": "method",
            "name": "mapWidget",
            "params": [
                {
                    "name": "selector",
                    "description": "The selector for the root element of the widget",
                    "type": "String"
                },
                {
                    "name": "TWidget",
                    "description": "The [[Lavaca.ui.Widget]]-derived type of widget to create",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "This view (for chaining)",
                "type": "Lavaca.mvc.View"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 655,
            "description": "Assigns a widget type to be created for elements matching a selector when the view is rendered, and\naccepts optional arguments to pass to the widget constructor",
            "itemtype": "method",
            "name": "mapWidget",
            "params": [
                {
                    "name": "selector",
                    "description": "The selector for the root element of the widget",
                    "type": "String"
                },
                {
                    "name": "widgetOptions",
                    "description": "An object with a 'TWidget' key and an optional 'args' key which can be\n    an array of arguments to pass to the widget's constructor",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This view (for chaining)",
                "type": "Lavaca.mvc.View"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 675,
            "description": "Initializes child views on the view, called from onRenderSuccess",
            "itemtype": "method",
            "name": "createChildViews",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 724,
            "description": "Assigns multiple Views to elements on the view",
            "itemtype": "method",
            "name": "mapChildView",
            "params": [
                {
                    "name": "map",
                    "description": "A hash of selectors to view types and models to be bound when the view is rendered.\n    The map should be in the form {selector: {TView : TView, model : lavaca.mvc.Model}}. For example, {'form': {TView : ExampleView, model : new Model()}}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "This view (for chaining)",
                "type": "lavaca.mvc.View"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 744,
            "description": "Instantiates a ChildViewManager for handling transitions between various childviews",
            "itemtype": "method",
            "name": "mapChildViewManager",
            "params": [
                {
                    "name": "el",
                    "description": "The element selector for the child views to be rendred in",
                    "type": "String"
                },
                {
                    "name": "map",
                    "description": "An object containing all of the routes and view types to be rendered\n    The map should be in the form {selector: {TView : TView, model : lavaca.mvc.Model, step: Int}}. For example, {'form': {TView : ExampleView, model : new Model(), step: 1}}",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 756,
            "description": "Listen for events triggered from child views.",
            "itemtype": "method",
            "name": "mapChildViewEvent",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event to listen for",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The method to execute when this event type has occured",
                    "type": "Function"
                },
                {
                    "name": "TView",
                    "description": "(Optional) Only listen on child views of this type",
                    "type": "Lavaca.mvc.View"
                }
            ],
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 764,
            "description": "Maps multiple child event types",
            "itemtype": "method",
            "name": "mapChildViewEvent",
            "params": [
                {
                    "name": "map",
                    "description": "A hash of event types with callbacks and TView's associated with that type\n The map should be in the form {type : {callback : {Function}, TView : TView}}",
                    "type": "Object"
                }
            ],
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 786,
            "description": "Called from onRenderSuccess of the view, adds listeners to all childviews if present",
            "itemtype": "method",
            "name": "applyChildViewEvent",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 812,
            "description": "Executes when the template renders successfully",
            "itemtype": "method",
            "name": "onRenderSuccess",
            "params": [
                {
                    "name": "e",
                    "description": "The render event. This object should have a string property named \"html\"\n  that contains the template's rendered HTML output.",
                    "type": "Event"
                }
            ],
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 821,
            "description": "Executes when the template fails to render",
            "itemtype": "method",
            "name": "onRenderError",
            "params": [
                {
                    "name": "e",
                    "description": "The error event. This object should have a string property named \"err\"\n  that contains the error message.",
                    "type": "Event"
                }
            ],
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 831,
            "description": "Readies the view for garbage collection",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 859,
            "description": "Adds this view to a container",
            "itemtype": "method",
            "name": "insertInto",
            "params": [
                {
                    "name": "container",
                    "description": "The containing element",
                    "type": "JQuery"
                }
            ],
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 880,
            "description": "Executes when the user navigates to this view",
            "itemtype": "method",
            "name": "enter",
            "params": [
                {
                    "name": "container",
                    "description": "The parent element of all views",
                    "type": "JQuery"
                },
                {
                    "name": "exitingViews",
                    "description": "The views that are exiting as this one enters",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 901,
            "description": "Executes when the user navigates away from this view",
            "itemtype": "method",
            "name": "exit",
            "params": [
                {
                    "name": "container",
                    "description": "The parent element of all views",
                    "type": "JQuery"
                },
                {
                    "name": "enteringViews",
                    "description": "The views that are entering as this one exits",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "lavaca.util.Promise"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 914,
            "description": "Retrieves an array of widgets that match a selector",
            "itemtype": "method",
            "name": "getWidget",
            "params": [
                {
                    "name": "selector",
                    "description": "The selector that should match the widgets you wish to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An array of widgets",
                "type": "Array"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/View.js",
            "line": 929,
            "description": "Retrieves an array of childViews that match a selector",
            "itemtype": "method",
            "name": "getChildViews",
            "params": [
                {
                    "name": "selector",
                    "description": "The selector that should match the childViews you wish to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An array of childViews",
                "type": "Array"
            },
            "class": "lavaca.mvc.View"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 21,
            "description": "The element that contains all view layers",
            "itemtype": "property",
            "name": "el",
            "type": "JQuery",
            "default": "null",
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 27,
            "description": "A cache containing all views",
            "itemtype": "property",
            "name": "views",
            "type": "Lavaca.util.Cache",
            "default": "new Lavaca.util.Cache()",
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 33,
            "description": "A list containing all layers",
            "itemtype": "property",
            "name": "layers",
            "type": "Array",
            "default": "[]",
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 39,
            "description": "A list containing all views that are currently exiting",
            "itemtype": "property",
            "name": "exitingPageViews",
            "type": "Array",
            "default": "[]",
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 45,
            "description": "A list containing all views that are currently entering",
            "itemtype": "property",
            "name": "enteringPageViews",
            "type": "Array",
            "default": "[]",
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 52,
            "description": "When true, the view manager is prevented from loading views.",
            "itemtype": "property",
            "name": "locked",
            "type": "Boolean",
            "default": "false",
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 58,
            "description": "Sets the el property on the instance",
            "itemtype": "method",
            "name": "setEl",
            "params": [
                {
                    "name": "el",
                    "description": "A jQuery object of the element that contains all layers",
                    "type": "JQuery"
                }
            ],
            "return": {
                "description": "This View Manager instance",
                "type": "Lavaca.mvc.ViewManager"
            },
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 65,
            "description": "Sets the el property on the instance",
            "itemtype": "method",
            "name": "setEl",
            "params": [
                {
                    "name": "el",
                    "description": "A CSS selector matching the element that contains all layers",
                    "type": "String"
                }
            ],
            "return": {
                "description": "This View Manager instance",
                "type": "Lavaca.mvc.ViewManager"
            },
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 76,
            "description": "Loads a view",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "cacheKey",
                    "description": "The cache key associated with the view",
                    "type": "String"
                },
                {
                    "name": "TPageView",
                    "description": "The type of view to load (should derive from [[Lavaca.mvc.View]])",
                    "type": "Function"
                },
                {
                    "name": "model",
                    "description": "The views model",
                    "type": "Object"
                },
                {
                    "name": "layer",
                    "description": "The index of the layer on which the view will sit",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Promise"
            },
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 86,
            "description": "Loads a view",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "cacheKey",
                    "description": "The cache key associated with the view",
                    "type": "String"
                },
                {
                    "name": "TPageView",
                    "description": "The type of view to load (should derive from [[Lavaca.mvc.View]])",
                    "type": "Function"
                },
                {
                    "name": "model",
                    "description": "The views model",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "Parameters to be mapped to the view",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Promise"
            },
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 157,
            "description": "Execute beforeEnter or beforeExit for each layer. Both functions\nbeforeEnter and beforeExit must return promises.",
            "itemtype": "method",
            "name": "beforeEnterExit",
            "params": [
                {
                    "name": "index",
                    "description": "The index above which is to be cleared",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Promise"
            },
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 165,
            "description": "Execute beforeEnter or beforeExit for each layer. Both functions\nbeforeEnter and beforeExit must return promises.",
            "itemtype": "method",
            "name": "beforeEnterExit",
            "params": [
                {
                    "name": "index",
                    "description": "The index above which is to be cleared",
                    "type": "Number"
                },
                {
                    "name": "enteringView",
                    "description": "A view that will be entering",
                    "type": "Lavaca.mvc.View"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Promise"
            },
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 192,
            "description": "Removes all views on a layer",
            "itemtype": "method",
            "name": "dismiss",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the layer to remove",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Promise"
            },
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 199,
            "description": "Removes all views on a layer",
            "itemtype": "method",
            "name": "dismiss",
            "params": [
                {
                    "name": "el",
                    "description": "An element on the layer to remove (or the layer itself)",
                    "type": "JQuery"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Promise"
            },
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 206,
            "description": "Removes all views on a layer",
            "itemtype": "method",
            "name": "dismiss",
            "params": [
                {
                    "name": "view",
                    "description": "The view on the layer to remove",
                    "type": "Lavaca.mvc.View"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Promise"
            },
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 230,
            "description": "Removes all layers above a given index",
            "itemtype": "method",
            "name": "dismissLayersAbove",
            "params": [
                {
                    "name": "index",
                    "description": "The index above which to clear",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Promise"
            },
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 237,
            "description": "Removes all layers above a given index",
            "itemtype": "method",
            "name": "dismissLayersAbove",
            "params": [
                {
                    "name": "index",
                    "description": "The index above which to clear",
                    "type": "Number"
                },
                {
                    "name": "exceptForView",
                    "description": "A view that should not be dismissed",
                    "type": "Lavaca.mvc.View"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Promise"
            },
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 275,
            "description": "Empties the view cache",
            "itemtype": "method",
            "name": "flush",
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/mvc/ViewManager.js",
            "line": 296,
            "description": "Readies the view manager for garbage collection",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.mvc.ViewManager"
        },
        {
            "file": "src/net/Connectivity.js",
            "line": 31,
            "description": "Attempts to detect whether or not the browser is connected",
            "itemtype": "method",
            "name": "isOffline",
            "static": 1,
            "return": {
                "description": "True if the browser is offline; false if the browser is online\n   or if connection status cannot be determined",
                "type": "Boolean"
            },
            "class": "lavaca.net.Connectivity"
        },
        {
            "file": "src/net/Connectivity.js",
            "line": 53,
            "description": "Makes an AJAX request if the user is online. If the user is offline, the returned\npromise will be rejected with the string argument \"offline\"",
            "itemtype": "method",
            "name": "ajax",
            "static": 1,
            "params": [
                {
                    "name": "opts",
                    "description": "jQuery-style AJAX options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A promise",
                "type": "Promise"
            },
            "class": "lavaca.net.Connectivity"
        },
        {
            "file": "src/net/Connectivity.js",
            "line": 75,
            "description": "Adds a callback to be executed whenever any Lavaca.net.Connectivity.ajax() call is\nblocked as a result of a lack of internet connection.",
            "itemtype": "method",
            "name": "registerOfflineAjaxHandler",
            "static": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                }
            ],
            "class": "lavaca.net.Connectivity"
        },
        {
            "file": "src/net/History.js",
            "line": 38,
            "description": "A list containing history states generated by the app (not used for HTML5 history)",
            "itemtype": "property",
            "name": "sequence",
            "type": "Array",
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 43,
            "description": "The current index in the history sequence (not used for HTML5 history)",
            "itemtype": "property",
            "name": "position",
            "type": "Number",
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 50,
            "description": "Auto-generated callback executed when a history event occurs",
            "itemtype": "property",
            "name": "onPopState",
            "type": "Function",
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 120,
            "description": "Retrieve the current history record",
            "itemtype": "method",
            "name": "current",
            "return": {
                "description": "The current history record",
                "type": "Object"
            },
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 129,
            "description": "Determines whether or not there are history states",
            "itemtype": "method",
            "name": "hasHistory",
            "return": {
                "description": "True when there is a history state",
                "type": "Boolean"
            },
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 138,
            "description": "Adds a record to the history",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "state",
                    "description": "A data object associated with the page state",
                    "type": "Object"
                },
                {
                    "name": "title",
                    "description": "The title of the page state",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The URL of the page state",
                    "type": "String"
                }
            ],
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 160,
            "description": "Replaces the current record in the history",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "state",
                    "description": "A data object associated with the page state",
                    "type": "Object"
                },
                {
                    "name": "title",
                    "description": "The title of the page state",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The URL of the page state",
                    "type": "String"
                }
            ],
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 180,
            "description": "Unbind the history object and ready it for garbage collection",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 197,
            "description": "Initialize a singleton history abstraction layer",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "return": {
                "description": "The history instance",
                "type": "Lavaca.mvc.History"
            },
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 204,
            "description": "Initialize a singleton history abstraction layer",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "useHash",
                    "description": "When true, use the location hash to manage history state instead of HTML5 history",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The history instance",
                "type": "Lavaca.mvc.History"
            },
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 221,
            "description": "Adds a record to the history",
            "itemtype": "method",
            "name": "push",
            "static": 1,
            "params": [
                {
                    "name": "state",
                    "description": "A data object associated with the page state",
                    "type": "Object"
                },
                {
                    "name": "title",
                    "description": "The title of the page state",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The URL of the page state",
                    "type": "String"
                }
            ],
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 233,
            "description": "Replaces the current record in the history",
            "itemtype": "method",
            "name": "replace",
            "static": 1,
            "params": [
                {
                    "name": "state",
                    "description": "A data object associated with the page state",
                    "type": "Object"
                },
                {
                    "name": "title",
                    "description": "The title of the page state",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The URL of the page state",
                    "type": "String"
                }
            ],
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 245,
            "description": "Goes to the previous history state",
            "itemtype": "method",
            "name": "back",
            "static": 1,
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 253,
            "description": "Goes to the next history state",
            "itemtype": "method",
            "name": "forward",
            "static": 1,
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 261,
            "description": "Unbind the history object and ready it for garbage collection",
            "itemtype": "method",
            "name": "dispose",
            "static": 1,
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 272,
            "description": "Binds an event handler to the singleton history",
            "itemtype": "method",
            "name": "on",
            "static": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to execute when the event occurs",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The history object (for chaining)",
                "type": "Lavaca.mvc.History"
            },
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 284,
            "description": "Unbinds an event handler from the singleton history",
            "itemtype": "method",
            "name": "off",
            "static": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The type of event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to stop executing when the\n   event occurs",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The history object (for chaining)",
                "type": "Lavaca.mvc.History"
            },
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 297,
            "description": "Sets Histroy to hash mode",
            "itemtype": "method",
            "name": "overrideStandardsMode",
            "static": 1,
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 306,
            "description": "Stores the page transition animations so that if you route back, it will animate correctly",
            "itemtype": "property",
            "name": "animationBreadcrumb",
            "type": "Array",
            "class": "lavaca.net.History"
        },
        {
            "file": "src/net/History.js",
            "line": 312,
            "description": "Flag to notify when history back is being called",
            "itemtype": "property",
            "name": "isRoutingBack",
            "type": "Boolean",
            "class": "lavaca.net.History"
        },
        {
            "file": "src/ui/LoadingIndicator.js",
            "line": 15,
            "description": "Class name applied to the root",
            "itemtype": "property",
            "name": "className",
            "type": "String",
            "default": "'loading'",
            "class": "lavaca.ui.LoadingIndicator"
        },
        {
            "file": "src/ui/LoadingIndicator.js",
            "line": 21,
            "description": "Activates the loading indicator",
            "itemtype": "method",
            "name": "show",
            "class": "lavaca.ui.LoadingIndicator"
        },
        {
            "file": "src/ui/LoadingIndicator.js",
            "line": 28,
            "description": "Deactivates the loading indicator",
            "itemtype": "method",
            "name": "hide",
            "class": "lavaca.ui.LoadingIndicator"
        },
        {
            "file": "src/ui/LoadingIndicator.js",
            "line": 36,
            "description": "Creates a loading indicator and binds it to the document's AJAX events",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "class": "lavaca.ui.LoadingIndicator"
        },
        {
            "file": "src/ui/LoadingIndicator.js",
            "line": 41,
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "params": [
                {
                    "name": "TLoadingIndicator",
                    "description": "The type of loading indicator to create (should derive from [[Lavaca.ui.LoadingIndicator]])",
                    "type": "Function"
                }
            ],
            "class": "lavaca.ui.LoadingIndicator"
        },
        {
            "file": "src/ui/Widget.js",
            "line": 18,
            "description": "The DOM element that is the root of the widget",
            "itemtype": "property",
            "name": "el",
            "type": "JQuery",
            "default": "null",
            "class": "lavaca.ui.Widget"
        },
        {
            "file": "src/ui/Widget.js",
            "line": 28,
            "description": "The el's ID",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "default": "(Autogenerated)",
            "class": "lavaca.ui.Widget"
        },
        {
            "file": "src/util/Cache.js",
            "line": 12,
            "description": "Retrieves an item from the cache",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "id",
                    "description": "The key under which the item is stored",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The stored item (or null if no item is stored)",
                "type": "Object"
            },
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Cache.js",
            "line": 19,
            "description": "Retrieves an item from the cache",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "id",
                    "description": "The key under which the item is stored",
                    "type": "String"
                },
                {
                    "name": "def",
                    "description": "A default value that will be added, if there is no item stored",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The stored item (or null if no item is stored and no default)",
                "type": "Object"
            },
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Cache.js",
            "line": 33,
            "description": "Assigns an item to a key in the cache",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "id",
                    "description": "The key under which the item will be stored",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The object to store in the cache",
                    "type": "Object"
                }
            ],
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Cache.js",
            "line": 43,
            "description": "Adds an item to the cache",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "value",
                    "description": "The object to store in the cache",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The auto-generated ID under which the value was stored",
                "type": "String"
            },
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Cache.js",
            "line": 55,
            "description": "Removes an item from the cache (if it exists)",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "id",
                    "description": "The key under which the item is stored",
                    "type": "String"
                }
            ],
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Cache.js",
            "line": 64,
            "description": "Executes a callback for each cached item. To stop iteration immediately,\nreturn false from the callback.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "callback",
                    "description": "A function to execute for each item, callback(key, item)",
                    "type": "Function"
                }
            ],
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Cache.js",
            "line": 70,
            "description": "Executes a callback for each cached item. To stop iteration immediately,\nreturn false from the callback.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "callback",
                    "description": "A function to execute for each item, callback(key, item)",
                    "type": "Function"
                },
                {
                    "name": "thisp",
                    "description": "The context of the callback",
                    "type": "Object"
                }
            ],
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Cache.js",
            "line": 88,
            "description": "Serializes the cache to a hash",
            "itemtype": "method",
            "name": "toObject",
            "return": {
                "description": "The resulting key-value hash",
                "type": "Object"
            },
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Cache.js",
            "line": 101,
            "description": "Serializes the cache to JSON",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "The JSON string",
                "type": "String"
            },
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Cache.js",
            "line": 110,
            "description": "Serializes the cache to an array",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "The resulting array with elements being index based and keys stored in an array on the 'ids' property",
                "type": "Object"
            },
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Cache.js",
            "line": 126,
            "description": "removes all items from the cache",
            "itemtype": "method",
            "name": "clear",
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Cache.js",
            "line": 136,
            "description": "returns number of items in cache",
            "itemtype": "method",
            "name": "count",
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Cache.js",
            "line": 148,
            "description": "Clears all items from the cache on dispose",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.util.Cache"
        },
        {
            "file": "src/util/Disposable.js",
            "line": 36,
            "description": "Readies the object to be garbage collected",
            "itemtype": "method",
            "name": "dispose",
            "class": "lavaca.util.Disposable"
        },
        {
            "file": "src/util/extend.js",
            "line": 7,
            "description": "Establishes inheritance between types. After a type is extended, it receives its own static\nconvenience method, extend(TSub, overrides).",
            "itemtype": "method",
            "name": "extend",
            "static": 1,
            "class": "lavaca.util.extend"
        },
        {
            "file": "src/util/extend.js",
            "line": 14,
            "description": "Establishes inheritance between types. After a type is extended, it receives its own static\nconvenience method, extend(TSub, overrides).",
            "itemtype": "method",
            "name": "extend",
            "static": 1,
            "params": [
                {
                    "name": "TSub",
                    "description": "The child type which will inherit from superType",
                    "type": "Function"
                },
                {
                    "name": "overrides",
                    "description": "A hash of key-value pairs that will be added to the subType",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The subtype",
                "type": "Function"
            },
            "class": "lavaca.util.extend"
        },
        {
            "file": "src/util/extend.js",
            "line": 24,
            "description": "Establishes inheritance between types. After a type is extended, it receives its own static\nconvenience method, extend(TSub, overrides).",
            "itemtype": "method",
            "name": "extend",
            "static": 1,
            "params": [
                {
                    "name": "TSuper",
                    "description": "The base type to extend",
                    "type": "Function"
                },
                {
                    "name": "TSub",
                    "description": "The child type which will inherit from superType",
                    "type": "Function"
                },
                {
                    "name": "overrides",
                    "description": "A hash of key-value pairs that will be added to the subType",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The subtype",
                "type": "Function"
            },
            "class": "lavaca.util.extend"
        },
        {
            "file": "src/util/uuid.js",
            "line": 8,
            "description": "Produces a unique identifier",
            "itemtype": "method",
            "name": "uuid",
            "static": 1,
            "params": [
                {
                    "name": "namespace",
                    "description": "A string served the namespace of a uuid",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A number that is unique to this page",
                "type": "Number"
            },
            "class": "lavaca.util.uuid"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:134"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:134"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:134"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:134"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:134"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:134"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:134"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:155"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:155"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:155"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:155"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:155"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:155"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:155"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Animation.js:155"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:114"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:175"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:212"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: opt",
            "line": " src/fx/Transform.js:251"
        },
        {
            "message": "unknown tag: super",
            "line": " src/mvc/Collection.js:58"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/mvc/Collection.js:177"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/mvc/Collection.js:228"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/mvc/Collection.js:235"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/mvc/Collection.js:280"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src/mvc/Collection.js:287"
        },
        {
            "message": "unknown tag: sig",
            "line": " src/mvc/Collection.js:457"
        },
        {
            "message": "unknown tag: sig",
            "line": " src/mvc/Model.js:288"
        },
        {
            "message": "unknown tag: field",
            "line": " src/mvc/Model.js:463"
        },
        {
            "message": "unknown tag: field",
            "line": " src/mvc/Model.js:470"
        },
        {
            "message": "unknown tag: field",
            "line": " src/mvc/Router.js:17"
        },
        {
            "message": "unknown tag: field",
            "line": " src/mvc/Router.js:23"
        },
        {
            "message": "unknown tag: field",
            "line": " src/mvc/Router.js:31"
        },
        {
            "message": "unknown tag: field",
            "line": " src/mvc/Router.js:37"
        },
        {
            "message": "unknown tag: field",
            "line": " src/mvc/Router.js:43"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/net/History.js:129"
        },
        {
            "message": "Missing item type\nCreates an application",
            "line": " src/mvc/Application.js:45"
        },
        {
            "message": "Missing item type",
            "line": " src/mvc/Model.js:463"
        },
        {
            "message": "Missing item type",
            "line": " src/mvc/Model.js:470"
        },
        {
            "message": "Missing item type",
            "line": " src/mvc/Router.js:17"
        },
        {
            "message": "Missing item type",
            "line": " src/mvc/Router.js:23"
        },
        {
            "message": "Missing item type",
            "line": " src/mvc/Router.js:31"
        },
        {
            "message": "Missing item type",
            "line": " src/mvc/Router.js:37"
        },
        {
            "message": "Missing item type",
            "line": " src/mvc/Router.js:43"
        },
        {
            "message": "Missing item type\nGenerate the HTML to be used in render() and redraw() methods. Override\nfrom subclasses. Specified here rather than having subclasses override\nrender() directly in order for subclasses to get selector-specific\nrendering (in redraw()) for \"free\".",
            "line": " src/mvc/View.js:199"
        }
    ]
}